
RoomAutomation.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  0000029c  00000330  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000029c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000014  00800110  00800110  00000340  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000340  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000370  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  000003b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c09  00000000  00000000  00000460  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008e2  00000000  00000000  00001069  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000054a  00000000  00000000  0000194b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000200  00000000  00000000  00001e98  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000497  00000000  00000000  00002098  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000561  00000000  00000000  0000252f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  00002a90  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e9       	ldi	r30, 0x9C	; 156
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 31       	cpi	r26, 0x10	; 16
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e1       	ldi	r26, 0x10	; 16
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 32       	cpi	r26, 0x24	; 36
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 93 00 	call	0x126	; 0x126 <main>
  9e:	0c 94 4c 01 	jmp	0x298	; 0x298 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <knobs_init>:
#define knob2_Channel ADC5D


void knobs_init(void){
	//set pc4 & 5 to input
	DDRC &= ~( (1<<PORTC4) | (1<<PORTC5) );
  a6:	87 b1       	in	r24, 0x07	; 7
  a8:	8f 7c       	andi	r24, 0xCF	; 207
  aa:	87 b9       	out	0x07, r24	; 7


	ADMUX |= (1<<REFS0);//set reference voltage to Vcc
  ac:	ec e7       	ldi	r30, 0x7C	; 124
  ae:	f0 e0       	ldi	r31, 0x00	; 0
  b0:	80 81       	ld	r24, Z
  b2:	80 64       	ori	r24, 0x40	; 64
  b4:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADEN) | (1<<ADSC) | (1<<ADATE) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
  b6:	ea e7       	ldi	r30, 0x7A	; 122
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	80 81       	ld	r24, Z
  bc:	87 6e       	ori	r24, 0xE7	; 231
  be:	80 83       	st	Z, r24
	ADCSRB |= (1<<ADTS1);//set ADC auto trigger mode to Ext Interrupt
  c0:	eb e7       	ldi	r30, 0x7B	; 123
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	80 81       	ld	r24, Z
  c6:	82 60       	ori	r24, 0x02	; 2
  c8:	80 83       	st	Z, r24
  ca:	08 95       	ret

000000cc <update>:
	usart_ReceiveString(strbuff);
	update(strbuff);
}

void update(char *instruct){
	instruct[1] = 0;
  cc:	fc 01       	movw	r30, r24
  ce:	11 82       	std	Z+1, r1	; 0x01
  d0:	08 95       	ret

000000d2 <__vector_18>:
#define MASK(x) (1 << x)

void update(char *instruct); /* this function is called when a interrupt triggers and there needs to be something updated immediately*/


ISR(USART_RX_vect){
  d2:	1f 92       	push	r1
  d4:	0f 92       	push	r0
  d6:	0f b6       	in	r0, 0x3f	; 63
  d8:	0f 92       	push	r0
  da:	11 24       	eor	r1, r1
  dc:	2f 93       	push	r18
  de:	3f 93       	push	r19
  e0:	4f 93       	push	r20
  e2:	5f 93       	push	r21
  e4:	6f 93       	push	r22
  e6:	7f 93       	push	r23
  e8:	8f 93       	push	r24
  ea:	9f 93       	push	r25
  ec:	af 93       	push	r26
  ee:	bf 93       	push	r27
  f0:	ef 93       	push	r30
  f2:	ff 93       	push	r31
	static char strbuff[20];
	usart_ReceiveString(strbuff);
  f4:	80 e1       	ldi	r24, 0x10	; 16
  f6:	91 e0       	ldi	r25, 0x01	; 1
  f8:	0e 94 f7 00 	call	0x1ee	; 0x1ee <usart_ReceiveString>
	update(strbuff);
  fc:	80 e1       	ldi	r24, 0x10	; 16
  fe:	91 e0       	ldi	r25, 0x01	; 1
 100:	0e 94 66 00 	call	0xcc	; 0xcc <update>
}
 104:	ff 91       	pop	r31
 106:	ef 91       	pop	r30
 108:	bf 91       	pop	r27
 10a:	af 91       	pop	r26
 10c:	9f 91       	pop	r25
 10e:	8f 91       	pop	r24
 110:	7f 91       	pop	r23
 112:	6f 91       	pop	r22
 114:	5f 91       	pop	r21
 116:	4f 91       	pop	r20
 118:	3f 91       	pop	r19
 11a:	2f 91       	pop	r18
 11c:	0f 90       	pop	r0
 11e:	0f be       	out	0x3f, r0	; 63
 120:	0f 90       	pop	r0
 122:	1f 90       	pop	r1
 124:	18 95       	reti

00000126 <main>:
	
	
}

int main(void)
{
 126:	cf 93       	push	r28
 128:	df 93       	push	r29
 12a:	00 d0       	rcall	.+0      	; 0x12c <main+0x6>
 12c:	00 d0       	rcall	.+0      	; 0x12e <main+0x8>
 12e:	00 d0       	rcall	.+0      	; 0x130 <main+0xa>
 130:	cd b7       	in	r28, 0x3d	; 61
 132:	de b7       	in	r29, 0x3e	; 62
//  DDRB |= MASK(PORTB5);//enable pin 5 for output
// 	PORTB |= MASK(PORTB5);//set pin 5 to high

 	volatile int knobpos1 = 0;
 134:	1a 82       	std	Y+2, r1	; 0x02
 136:	19 82       	std	Y+1, r1	; 0x01
	volatile long knobpos2 = 0;
 138:	1b 82       	std	Y+3, r1	; 0x03
 13a:	1c 82       	std	Y+4, r1	; 0x04
 13c:	1d 82       	std	Y+5, r1	; 0x05
 13e:	1e 82       	std	Y+6, r1	; 0x06

		
	knobs_init();
 140:	0e 94 53 00 	call	0xa6	; 0xa6 <knobs_init>
	usart_Init(9600);
 144:	60 e8       	ldi	r22, 0x80	; 128
 146:	75 e2       	ldi	r23, 0x25	; 37
 148:	80 e0       	ldi	r24, 0x00	; 0
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	0e 94 ae 00 	call	0x15c	; 0x15c <usart_Init>
	sei();//enable uart interrupt
 150:	78 94       	sei
	
	usart_SendString("boot successful");
 152:	80 e0       	ldi	r24, 0x00	; 0
 154:	91 e0       	ldi	r25, 0x01	; 1
 156:	0e 94 14 01 	call	0x228	; 0x228 <usart_SendString>
 15a:	ff cf       	rjmp	.-2      	; 0x15a <main+0x34>

0000015c <usart_Init>:
	while(buff[i] != '\0'){
		usart_TxChar((char)buff[i++]);
	}
	
		
}
 15c:	cf 93       	push	r28
 15e:	df 93       	push	r29
 160:	c1 ec       	ldi	r28, 0xC1	; 193
 162:	d0 e0       	ldi	r29, 0x00	; 0
 164:	28 81       	ld	r18, Y
 166:	28 61       	ori	r18, 0x18	; 24
 168:	28 83       	st	Y, r18
 16a:	e2 ec       	ldi	r30, 0xC2	; 194
 16c:	f0 e0       	ldi	r31, 0x00	; 0
 16e:	20 81       	ld	r18, Z
 170:	27 60       	ori	r18, 0x07	; 7
 172:	20 83       	st	Z, r18
 174:	dc 01       	movw	r26, r24
 176:	cb 01       	movw	r24, r22
 178:	88 0f       	add	r24, r24
 17a:	99 1f       	adc	r25, r25
 17c:	aa 1f       	adc	r26, r26
 17e:	bb 1f       	adc	r27, r27
 180:	88 0f       	add	r24, r24
 182:	99 1f       	adc	r25, r25
 184:	aa 1f       	adc	r26, r26
 186:	bb 1f       	adc	r27, r27
 188:	9c 01       	movw	r18, r24
 18a:	ad 01       	movw	r20, r26
 18c:	22 0f       	add	r18, r18
 18e:	33 1f       	adc	r19, r19
 190:	44 1f       	adc	r20, r20
 192:	55 1f       	adc	r21, r21
 194:	22 0f       	add	r18, r18
 196:	33 1f       	adc	r19, r19
 198:	44 1f       	adc	r20, r20
 19a:	55 1f       	adc	r21, r21
 19c:	60 e0       	ldi	r22, 0x00	; 0
 19e:	74 e2       	ldi	r23, 0x24	; 36
 1a0:	84 ef       	ldi	r24, 0xF4	; 244
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	0e 94 2a 01 	call	0x254	; 0x254 <__udivmodsi4>
 1a8:	8f ef       	ldi	r24, 0xFF	; 255
 1aa:	82 0f       	add	r24, r18
 1ac:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 1b0:	da 01       	movw	r26, r20
 1b2:	c9 01       	movw	r24, r18
 1b4:	01 97       	sbiw	r24, 0x01	; 1
 1b6:	a1 09       	sbc	r26, r1
 1b8:	b1 09       	sbc	r27, r1
 1ba:	89 2f       	mov	r24, r25
 1bc:	9a 2f       	mov	r25, r26
 1be:	ab 2f       	mov	r26, r27
 1c0:	bb 27       	eor	r27, r27
 1c2:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 1c6:	88 81       	ld	r24, Y
 1c8:	80 68       	ori	r24, 0x80	; 128
 1ca:	88 83       	st	Y, r24
 1cc:	df 91       	pop	r29
 1ce:	cf 91       	pop	r28
 1d0:	08 95       	ret

000001d2 <usart_RxChar>:
 1d2:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 1d6:	88 23       	and	r24, r24
 1d8:	e4 f7       	brge	.-8      	; 0x1d2 <usart_RxChar>
 1da:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 1de:	08 95       	ret

000001e0 <usart_TxChar>:
 1e0:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 1e4:	95 ff       	sbrs	r25, 5
 1e6:	fc cf       	rjmp	.-8      	; 0x1e0 <usart_TxChar>
 1e8:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 1ec:	08 95       	ret

000001ee <usart_ReceiveString>:
 1ee:	ef 92       	push	r14
 1f0:	ff 92       	push	r15
 1f2:	0f 93       	push	r16
 1f4:	1f 93       	push	r17
 1f6:	cf 93       	push	r28
 1f8:	7c 01       	movw	r14, r24
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	c1 e0       	ldi	r28, 0x01	; 1
 1fe:	c9 0f       	add	r28, r25
 200:	87 01       	movw	r16, r14
 202:	09 0f       	add	r16, r25
 204:	11 1d       	adc	r17, r1
 206:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <usart_RxChar>
 20a:	f8 01       	movw	r30, r16
 20c:	80 83       	st	Z, r24
 20e:	9c 2f       	mov	r25, r28
 210:	8a 30       	cpi	r24, 0x0A	; 10
 212:	a1 f7       	brne	.-24     	; 0x1fc <usart_ReceiveString+0xe>
 214:	f7 01       	movw	r30, r14
 216:	ec 0f       	add	r30, r28
 218:	f1 1d       	adc	r31, r1
 21a:	10 82       	st	Z, r1
 21c:	cf 91       	pop	r28
 21e:	1f 91       	pop	r17
 220:	0f 91       	pop	r16
 222:	ff 90       	pop	r15
 224:	ef 90       	pop	r14
 226:	08 95       	ret

00000228 <usart_SendString>:

void usart_SendString(char *str)									/* Send string of USART data function */
{
 228:	0f 93       	push	r16
 22a:	1f 93       	push	r17
 22c:	cf 93       	push	r28
 22e:	df 93       	push	r29
 230:	8c 01       	movw	r16, r24
	int i = 0;
 232:	c0 e0       	ldi	r28, 0x00	; 0
 234:	d0 e0       	ldi	r29, 0x00	; 0
	while (str[i] != '\0'){
 236:	03 c0       	rjmp	.+6      	; 0x23e <usart_SendString+0x16>
		usart_TxChar(str[i++]);					/* Send each char of string till the NULL */
 238:	21 96       	adiw	r28, 0x01	; 1
 23a:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <usart_TxChar>
}

void usart_SendString(char *str)									/* Send string of USART data function */
{
	int i = 0;
	while (str[i] != '\0'){
 23e:	f8 01       	movw	r30, r16
 240:	ec 0f       	add	r30, r28
 242:	fd 1f       	adc	r31, r29
 244:	80 81       	ld	r24, Z
 246:	81 11       	cpse	r24, r1
 248:	f7 cf       	rjmp	.-18     	; 0x238 <usart_SendString+0x10>
		usart_TxChar(str[i++]);					/* Send each char of string till the NULL */
	}
}
 24a:	df 91       	pop	r29
 24c:	cf 91       	pop	r28
 24e:	1f 91       	pop	r17
 250:	0f 91       	pop	r16
 252:	08 95       	ret

00000254 <__udivmodsi4>:
 254:	a1 e2       	ldi	r26, 0x21	; 33
 256:	1a 2e       	mov	r1, r26
 258:	aa 1b       	sub	r26, r26
 25a:	bb 1b       	sub	r27, r27
 25c:	fd 01       	movw	r30, r26
 25e:	0d c0       	rjmp	.+26     	; 0x27a <__udivmodsi4_ep>

00000260 <__udivmodsi4_loop>:
 260:	aa 1f       	adc	r26, r26
 262:	bb 1f       	adc	r27, r27
 264:	ee 1f       	adc	r30, r30
 266:	ff 1f       	adc	r31, r31
 268:	a2 17       	cp	r26, r18
 26a:	b3 07       	cpc	r27, r19
 26c:	e4 07       	cpc	r30, r20
 26e:	f5 07       	cpc	r31, r21
 270:	20 f0       	brcs	.+8      	; 0x27a <__udivmodsi4_ep>
 272:	a2 1b       	sub	r26, r18
 274:	b3 0b       	sbc	r27, r19
 276:	e4 0b       	sbc	r30, r20
 278:	f5 0b       	sbc	r31, r21

0000027a <__udivmodsi4_ep>:
 27a:	66 1f       	adc	r22, r22
 27c:	77 1f       	adc	r23, r23
 27e:	88 1f       	adc	r24, r24
 280:	99 1f       	adc	r25, r25
 282:	1a 94       	dec	r1
 284:	69 f7       	brne	.-38     	; 0x260 <__udivmodsi4_loop>
 286:	60 95       	com	r22
 288:	70 95       	com	r23
 28a:	80 95       	com	r24
 28c:	90 95       	com	r25
 28e:	9b 01       	movw	r18, r22
 290:	ac 01       	movw	r20, r24
 292:	bd 01       	movw	r22, r26
 294:	cf 01       	movw	r24, r30
 296:	08 95       	ret

00000298 <_exit>:
 298:	f8 94       	cli

0000029a <__stop_program>:
 29a:	ff cf       	rjmp	.-2      	; 0x29a <__stop_program>
