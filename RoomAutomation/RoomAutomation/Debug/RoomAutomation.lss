
RoomAutomation.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000006b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000065c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000006b0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006e0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000078  00000000  00000000  00000720  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000093c  00000000  00000000  00000798  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000071c  00000000  00000000  000010d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003a8  00000000  00000000  000017f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000184  00000000  00000000  00001b98  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003f3  00000000  00000000  00001d1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000058c  00000000  00000000  0000210f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  0000269b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 77 00 	call	0xee	; 0xee <main>
  78:	0c 94 2c 03 	jmp	0x658	; 0x658 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <knobs_init>:
#define knob2_Channel ADC5D


void knobs_init(void){
	//set pc4 & 5 to input
	DDRC &= ~( (1<<PORTC4) | (1<<PORTC5) );
  80:	87 b1       	in	r24, 0x07	; 7
  82:	8f 7c       	andi	r24, 0xCF	; 207
  84:	87 b9       	out	0x07, r24	; 7


	ADMUX |= (1<<REFS0);//set reference voltage to Vcc
  86:	ec e7       	ldi	r30, 0x7C	; 124
  88:	f0 e0       	ldi	r31, 0x00	; 0
  8a:	80 81       	ld	r24, Z
  8c:	80 64       	ori	r24, 0x40	; 64
  8e:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADEN) | (1<<ADSC) | (1<<ADATE) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
  90:	ea e7       	ldi	r30, 0x7A	; 122
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	80 81       	ld	r24, Z
  96:	87 6e       	ori	r24, 0xE7	; 231
  98:	80 83       	st	Z, r24
	ADCSRB |= (1<<ADTS1);//set AD auto trigger mode to Ext Interrupt
  9a:	eb e7       	ldi	r30, 0x7B	; 123
  9c:	f0 e0       	ldi	r31, 0x00	; 0
  9e:	80 81       	ld	r24, Z
  a0:	82 60       	ori	r24, 0x02	; 2
  a2:	80 83       	st	Z, r24
  a4:	08 95       	ret

000000a6 <knobs_getPos1>:
	
}

uint16_t knobs_getPos1(void){
  a6:	0f 93       	push	r16
  a8:	1f 93       	push	r17
	//while((ADCSRA & (1<<ADSC)));//wait for conversion to finish
	//update input channel
	ADMUX &= ~((1<<MUX0) | (1<<MUX1) | (1<<MUX2) | (1<<MUX3));//reset mux
  aa:	ec e7       	ldi	r30, 0x7C	; 124
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	80 81       	ld	r24, Z
  b0:	80 7f       	andi	r24, 0xF0	; 240
  b2:	80 83       	st	Z, r24
	ADMUX |= knob1_Channel;
  b4:	80 81       	ld	r24, Z
  b6:	84 60       	ori	r24, 0x04	; 4
  b8:	80 83       	st	Z, r24
	
	ADCSRA |= (1<<ADSC);//start conversion
  ba:	ea e7       	ldi	r30, 0x7A	; 122
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	80 81       	ld	r24, Z
  c0:	80 64       	ori	r24, 0x40	; 64
  c2:	80 83       	st	Z, r24
	
	while((ADCSRA & (1<<ADSC)));//wait for conversion to finish
  c4:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  c8:	86 fd       	sbrc	r24, 6
  ca:	fc cf       	rjmp	.-8      	; 0xc4 <knobs_getPos1+0x1e>

	return mapi(ADC, 0, 1023, 0, 255);
  cc:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
  d0:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
  d4:	0f ef       	ldi	r16, 0xFF	; 255
  d6:	10 e0       	ldi	r17, 0x00	; 0
  d8:	20 e0       	ldi	r18, 0x00	; 0
  da:	30 e0       	ldi	r19, 0x00	; 0
  dc:	4f ef       	ldi	r20, 0xFF	; 255
  de:	53 e0       	ldi	r21, 0x03	; 3
  e0:	60 e0       	ldi	r22, 0x00	; 0
  e2:	70 e0       	ldi	r23, 0x00	; 0
  e4:	0e 94 8b 00 	call	0x116	; 0x116 <mapi>
}
  e8:	1f 91       	pop	r17
  ea:	0f 91       	pop	r16
  ec:	08 95       	ret

000000ee <main>:
#include "knobs/knobs.h"

#define MASK(x) (1 << x)

int main(void)
{
  ee:	cf 93       	push	r28
  f0:	df 93       	push	r29
  f2:	00 d0       	rcall	.+0      	; 0xf4 <main+0x6>
  f4:	00 d0       	rcall	.+0      	; 0xf6 <main+0x8>
  f6:	00 d0       	rcall	.+0      	; 0xf8 <main+0xa>
  f8:	cd b7       	in	r28, 0x3d	; 61
  fa:	de b7       	in	r29, 0x3e	; 62
//  DDRB |= MASK(PORTB5);//enable pin 5 for output
// 	PORTB |= MASK(PORTB5);//set pin 5 to high

 	volatile int knobpos1 = 0;
  fc:	1a 82       	std	Y+2, r1	; 0x02
  fe:	19 82       	std	Y+1, r1	; 0x01
	volatile long knobpos2 = 0;
 100:	1b 82       	std	Y+3, r1	; 0x03
 102:	1c 82       	std	Y+4, r1	; 0x04
 104:	1d 82       	std	Y+5, r1	; 0x05
 106:	1e 82       	std	Y+6, r1	; 0x06
	 
	knobs_init();
 108:	0e 94 40 00 	call	0x80	; 0x80 <knobs_init>
	
	while (1){

		knobpos1 = knobs_getPos1();	
 10c:	0e 94 53 00 	call	0xa6	; 0xa6 <knobs_getPos1>
 110:	9a 83       	std	Y+2, r25	; 0x02
 112:	89 83       	std	Y+1, r24	; 0x01
 114:	fb cf       	rjmp	.-10     	; 0x10c <main+0x1e>

00000116 <mapi>:
 * Created: 10/07/2021 17:21:24
 *  Author: william
 */ 
#include "math_map.h"

int mapi(int value, int fromLow, int fromHigh, int toLow, int toHigh){
 116:	2f 92       	push	r2
 118:	3f 92       	push	r3
 11a:	4f 92       	push	r4
 11c:	5f 92       	push	r5
 11e:	6f 92       	push	r6
 120:	7f 92       	push	r7
 122:	8f 92       	push	r8
 124:	9f 92       	push	r9
 126:	af 92       	push	r10
 128:	bf 92       	push	r11
 12a:	cf 92       	push	r12
 12c:	df 92       	push	r13
 12e:	ef 92       	push	r14
 130:	ff 92       	push	r15
 132:	0f 93       	push	r16
 134:	1f 93       	push	r17
 136:	cf 93       	push	r28
 138:	df 93       	push	r29
 13a:	00 d0       	rcall	.+0      	; 0x13c <mapi+0x26>
 13c:	00 d0       	rcall	.+0      	; 0x13e <mapi+0x28>
 13e:	00 d0       	rcall	.+0      	; 0x140 <mapi+0x2a>
 140:	cd b7       	in	r28, 0x3d	; 61
 142:	de b7       	in	r29, 0x3e	; 62
 144:	9e 83       	std	Y+6, r25	; 0x06
 146:	8d 83       	std	Y+5, r24	; 0x05
 148:	7b 01       	movw	r14, r22
 14a:	6a 01       	movw	r12, r20
 14c:	19 01       	movw	r2, r18
	//this function maps a value with a certain range to another range perspectively
	float result;
	if (value > fromHigh){
 14e:	48 17       	cp	r20, r24
 150:	59 07       	cpc	r21, r25
 152:	14 f4       	brge	.+4      	; 0x158 <mapi+0x42>
		value = fromHigh;
 154:	5e 83       	std	Y+6, r21	; 0x06
 156:	4d 83       	std	Y+5, r20	; 0x05
	}
	if (value < fromLow){
 158:	2d 81       	ldd	r18, Y+5	; 0x05
 15a:	3e 81       	ldd	r19, Y+6	; 0x06
 15c:	2e 15       	cp	r18, r14
 15e:	3f 05       	cpc	r19, r15
 160:	14 f4       	brge	.+4      	; 0x166 <mapi+0x50>
		value = fromLow;
 162:	fe 82       	std	Y+6, r15	; 0x06
 164:	ed 82       	std	Y+5, r14	; 0x05
	}
	
	result = (float)(toHigh-toLow);
 166:	b8 01       	movw	r22, r16
 168:	62 19       	sub	r22, r2
 16a:	73 09       	sbc	r23, r3
 16c:	07 2e       	mov	r0, r23
 16e:	00 0c       	add	r0, r0
 170:	88 0b       	sbc	r24, r24
 172:	99 0b       	sbc	r25, r25
 174:	0e 94 33 02 	call	0x466	; 0x466 <__floatsisf>
 178:	69 83       	std	Y+1, r22	; 0x01
 17a:	7a 83       	std	Y+2, r23	; 0x02
 17c:	8b 83       	std	Y+3, r24	; 0x03
 17e:	9c 83       	std	Y+4, r25	; 0x04
	result = result *  (((float)value-(float)fromLow) / ((float)fromHigh-(float)fromLow));
 180:	2d 81       	ldd	r18, Y+5	; 0x05
 182:	3e 81       	ldd	r19, Y+6	; 0x06
 184:	b9 01       	movw	r22, r18
 186:	33 0f       	add	r19, r19
 188:	88 0b       	sbc	r24, r24
 18a:	99 0b       	sbc	r25, r25
 18c:	0e 94 33 02 	call	0x466	; 0x466 <__floatsisf>
 190:	2b 01       	movw	r4, r22
 192:	3c 01       	movw	r6, r24
 194:	b7 01       	movw	r22, r14
 196:	ff 0c       	add	r15, r15
 198:	88 0b       	sbc	r24, r24
 19a:	99 0b       	sbc	r25, r25
 19c:	0e 94 33 02 	call	0x466	; 0x466 <__floatsisf>
 1a0:	4b 01       	movw	r8, r22
 1a2:	5c 01       	movw	r10, r24
 1a4:	9b 01       	movw	r18, r22
 1a6:	ac 01       	movw	r20, r24
 1a8:	c3 01       	movw	r24, r6
 1aa:	b2 01       	movw	r22, r4
 1ac:	0e 94 1c 01 	call	0x238	; 0x238 <__subsf3>
 1b0:	2b 01       	movw	r4, r22
 1b2:	3c 01       	movw	r6, r24
 1b4:	b6 01       	movw	r22, r12
 1b6:	dd 0c       	add	r13, r13
 1b8:	88 0b       	sbc	r24, r24
 1ba:	99 0b       	sbc	r25, r25
 1bc:	0e 94 33 02 	call	0x466	; 0x466 <__floatsisf>
 1c0:	a5 01       	movw	r20, r10
 1c2:	94 01       	movw	r18, r8
 1c4:	0e 94 1c 01 	call	0x238	; 0x238 <__subsf3>
 1c8:	9b 01       	movw	r18, r22
 1ca:	ac 01       	movw	r20, r24
 1cc:	c3 01       	movw	r24, r6
 1ce:	b2 01       	movw	r22, r4
 1d0:	0e 94 89 01 	call	0x312	; 0x312 <__divsf3>
 1d4:	9b 01       	movw	r18, r22
 1d6:	ac 01       	movw	r20, r24
 1d8:	69 81       	ldd	r22, Y+1	; 0x01
 1da:	7a 81       	ldd	r23, Y+2	; 0x02
 1dc:	8b 81       	ldd	r24, Y+3	; 0x03
 1de:	9c 81       	ldd	r25, Y+4	; 0x04
 1e0:	0e 94 bf 02 	call	0x57e	; 0x57e <__mulsf3>
 1e4:	6b 01       	movw	r12, r22
 1e6:	7c 01       	movw	r14, r24
	result += (float)toLow;
 1e8:	b1 01       	movw	r22, r2
 1ea:	33 0c       	add	r3, r3
 1ec:	88 0b       	sbc	r24, r24
 1ee:	99 0b       	sbc	r25, r25
 1f0:	0e 94 33 02 	call	0x466	; 0x466 <__floatsisf>
 1f4:	9b 01       	movw	r18, r22
 1f6:	ac 01       	movw	r20, r24
 1f8:	c7 01       	movw	r24, r14
 1fa:	b6 01       	movw	r22, r12
 1fc:	0e 94 1d 01 	call	0x23a	; 0x23a <__addsf3>
	
	return (int)result;
 200:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <__fixsfsi>
}
 204:	cb 01       	movw	r24, r22
 206:	26 96       	adiw	r28, 0x06	; 6
 208:	0f b6       	in	r0, 0x3f	; 63
 20a:	f8 94       	cli
 20c:	de bf       	out	0x3e, r29	; 62
 20e:	0f be       	out	0x3f, r0	; 63
 210:	cd bf       	out	0x3d, r28	; 61
 212:	df 91       	pop	r29
 214:	cf 91       	pop	r28
 216:	1f 91       	pop	r17
 218:	0f 91       	pop	r16
 21a:	ff 90       	pop	r15
 21c:	ef 90       	pop	r14
 21e:	df 90       	pop	r13
 220:	cf 90       	pop	r12
 222:	bf 90       	pop	r11
 224:	af 90       	pop	r10
 226:	9f 90       	pop	r9
 228:	8f 90       	pop	r8
 22a:	7f 90       	pop	r7
 22c:	6f 90       	pop	r6
 22e:	5f 90       	pop	r5
 230:	4f 90       	pop	r4
 232:	3f 90       	pop	r3
 234:	2f 90       	pop	r2
 236:	08 95       	ret

00000238 <__subsf3>:
 238:	50 58       	subi	r21, 0x80	; 128

0000023a <__addsf3>:
 23a:	bb 27       	eor	r27, r27
 23c:	aa 27       	eor	r26, r26
 23e:	0e 94 34 01 	call	0x268	; 0x268 <__addsf3x>
 242:	0c 94 85 02 	jmp	0x50a	; 0x50a <__fp_round>
 246:	0e 94 77 02 	call	0x4ee	; 0x4ee <__fp_pscA>
 24a:	38 f0       	brcs	.+14     	; 0x25a <__addsf3+0x20>
 24c:	0e 94 7e 02 	call	0x4fc	; 0x4fc <__fp_pscB>
 250:	20 f0       	brcs	.+8      	; 0x25a <__addsf3+0x20>
 252:	39 f4       	brne	.+14     	; 0x262 <__addsf3+0x28>
 254:	9f 3f       	cpi	r25, 0xFF	; 255
 256:	19 f4       	brne	.+6      	; 0x25e <__addsf3+0x24>
 258:	26 f4       	brtc	.+8      	; 0x262 <__addsf3+0x28>
 25a:	0c 94 74 02 	jmp	0x4e8	; 0x4e8 <__fp_nan>
 25e:	0e f4       	brtc	.+2      	; 0x262 <__addsf3+0x28>
 260:	e0 95       	com	r30
 262:	e7 fb       	bst	r30, 7
 264:	0c 94 6e 02 	jmp	0x4dc	; 0x4dc <__fp_inf>

00000268 <__addsf3x>:
 268:	e9 2f       	mov	r30, r25
 26a:	0e 94 96 02 	call	0x52c	; 0x52c <__fp_split3>
 26e:	58 f3       	brcs	.-42     	; 0x246 <__addsf3+0xc>
 270:	ba 17       	cp	r27, r26
 272:	62 07       	cpc	r22, r18
 274:	73 07       	cpc	r23, r19
 276:	84 07       	cpc	r24, r20
 278:	95 07       	cpc	r25, r21
 27a:	20 f0       	brcs	.+8      	; 0x284 <__addsf3x+0x1c>
 27c:	79 f4       	brne	.+30     	; 0x29c <__addsf3x+0x34>
 27e:	a6 f5       	brtc	.+104    	; 0x2e8 <__addsf3x+0x80>
 280:	0c 94 b8 02 	jmp	0x570	; 0x570 <__fp_zero>
 284:	0e f4       	brtc	.+2      	; 0x288 <__addsf3x+0x20>
 286:	e0 95       	com	r30
 288:	0b 2e       	mov	r0, r27
 28a:	ba 2f       	mov	r27, r26
 28c:	a0 2d       	mov	r26, r0
 28e:	0b 01       	movw	r0, r22
 290:	b9 01       	movw	r22, r18
 292:	90 01       	movw	r18, r0
 294:	0c 01       	movw	r0, r24
 296:	ca 01       	movw	r24, r20
 298:	a0 01       	movw	r20, r0
 29a:	11 24       	eor	r1, r1
 29c:	ff 27       	eor	r31, r31
 29e:	59 1b       	sub	r21, r25
 2a0:	99 f0       	breq	.+38     	; 0x2c8 <__addsf3x+0x60>
 2a2:	59 3f       	cpi	r21, 0xF9	; 249
 2a4:	50 f4       	brcc	.+20     	; 0x2ba <__addsf3x+0x52>
 2a6:	50 3e       	cpi	r21, 0xE0	; 224
 2a8:	68 f1       	brcs	.+90     	; 0x304 <__addsf3x+0x9c>
 2aa:	1a 16       	cp	r1, r26
 2ac:	f0 40       	sbci	r31, 0x00	; 0
 2ae:	a2 2f       	mov	r26, r18
 2b0:	23 2f       	mov	r18, r19
 2b2:	34 2f       	mov	r19, r20
 2b4:	44 27       	eor	r20, r20
 2b6:	58 5f       	subi	r21, 0xF8	; 248
 2b8:	f3 cf       	rjmp	.-26     	; 0x2a0 <__addsf3x+0x38>
 2ba:	46 95       	lsr	r20
 2bc:	37 95       	ror	r19
 2be:	27 95       	ror	r18
 2c0:	a7 95       	ror	r26
 2c2:	f0 40       	sbci	r31, 0x00	; 0
 2c4:	53 95       	inc	r21
 2c6:	c9 f7       	brne	.-14     	; 0x2ba <__addsf3x+0x52>
 2c8:	7e f4       	brtc	.+30     	; 0x2e8 <__addsf3x+0x80>
 2ca:	1f 16       	cp	r1, r31
 2cc:	ba 0b       	sbc	r27, r26
 2ce:	62 0b       	sbc	r22, r18
 2d0:	73 0b       	sbc	r23, r19
 2d2:	84 0b       	sbc	r24, r20
 2d4:	ba f0       	brmi	.+46     	; 0x304 <__addsf3x+0x9c>
 2d6:	91 50       	subi	r25, 0x01	; 1
 2d8:	a1 f0       	breq	.+40     	; 0x302 <__addsf3x+0x9a>
 2da:	ff 0f       	add	r31, r31
 2dc:	bb 1f       	adc	r27, r27
 2de:	66 1f       	adc	r22, r22
 2e0:	77 1f       	adc	r23, r23
 2e2:	88 1f       	adc	r24, r24
 2e4:	c2 f7       	brpl	.-16     	; 0x2d6 <__addsf3x+0x6e>
 2e6:	0e c0       	rjmp	.+28     	; 0x304 <__addsf3x+0x9c>
 2e8:	ba 0f       	add	r27, r26
 2ea:	62 1f       	adc	r22, r18
 2ec:	73 1f       	adc	r23, r19
 2ee:	84 1f       	adc	r24, r20
 2f0:	48 f4       	brcc	.+18     	; 0x304 <__addsf3x+0x9c>
 2f2:	87 95       	ror	r24
 2f4:	77 95       	ror	r23
 2f6:	67 95       	ror	r22
 2f8:	b7 95       	ror	r27
 2fa:	f7 95       	ror	r31
 2fc:	9e 3f       	cpi	r25, 0xFE	; 254
 2fe:	08 f0       	brcs	.+2      	; 0x302 <__addsf3x+0x9a>
 300:	b0 cf       	rjmp	.-160    	; 0x262 <__addsf3+0x28>
 302:	93 95       	inc	r25
 304:	88 0f       	add	r24, r24
 306:	08 f0       	brcs	.+2      	; 0x30a <__addsf3x+0xa2>
 308:	99 27       	eor	r25, r25
 30a:	ee 0f       	add	r30, r30
 30c:	97 95       	ror	r25
 30e:	87 95       	ror	r24
 310:	08 95       	ret

00000312 <__divsf3>:
 312:	0e 94 9d 01 	call	0x33a	; 0x33a <__divsf3x>
 316:	0c 94 85 02 	jmp	0x50a	; 0x50a <__fp_round>
 31a:	0e 94 7e 02 	call	0x4fc	; 0x4fc <__fp_pscB>
 31e:	58 f0       	brcs	.+22     	; 0x336 <__divsf3+0x24>
 320:	0e 94 77 02 	call	0x4ee	; 0x4ee <__fp_pscA>
 324:	40 f0       	brcs	.+16     	; 0x336 <__divsf3+0x24>
 326:	29 f4       	brne	.+10     	; 0x332 <__divsf3+0x20>
 328:	5f 3f       	cpi	r21, 0xFF	; 255
 32a:	29 f0       	breq	.+10     	; 0x336 <__divsf3+0x24>
 32c:	0c 94 6e 02 	jmp	0x4dc	; 0x4dc <__fp_inf>
 330:	51 11       	cpse	r21, r1
 332:	0c 94 b9 02 	jmp	0x572	; 0x572 <__fp_szero>
 336:	0c 94 74 02 	jmp	0x4e8	; 0x4e8 <__fp_nan>

0000033a <__divsf3x>:
 33a:	0e 94 96 02 	call	0x52c	; 0x52c <__fp_split3>
 33e:	68 f3       	brcs	.-38     	; 0x31a <__divsf3+0x8>

00000340 <__divsf3_pse>:
 340:	99 23       	and	r25, r25
 342:	b1 f3       	breq	.-20     	; 0x330 <__divsf3+0x1e>
 344:	55 23       	and	r21, r21
 346:	91 f3       	breq	.-28     	; 0x32c <__divsf3+0x1a>
 348:	95 1b       	sub	r25, r21
 34a:	55 0b       	sbc	r21, r21
 34c:	bb 27       	eor	r27, r27
 34e:	aa 27       	eor	r26, r26
 350:	62 17       	cp	r22, r18
 352:	73 07       	cpc	r23, r19
 354:	84 07       	cpc	r24, r20
 356:	38 f0       	brcs	.+14     	; 0x366 <__divsf3_pse+0x26>
 358:	9f 5f       	subi	r25, 0xFF	; 255
 35a:	5f 4f       	sbci	r21, 0xFF	; 255
 35c:	22 0f       	add	r18, r18
 35e:	33 1f       	adc	r19, r19
 360:	44 1f       	adc	r20, r20
 362:	aa 1f       	adc	r26, r26
 364:	a9 f3       	breq	.-22     	; 0x350 <__divsf3_pse+0x10>
 366:	35 d0       	rcall	.+106    	; 0x3d2 <__divsf3_pse+0x92>
 368:	0e 2e       	mov	r0, r30
 36a:	3a f0       	brmi	.+14     	; 0x37a <__divsf3_pse+0x3a>
 36c:	e0 e8       	ldi	r30, 0x80	; 128
 36e:	32 d0       	rcall	.+100    	; 0x3d4 <__divsf3_pse+0x94>
 370:	91 50       	subi	r25, 0x01	; 1
 372:	50 40       	sbci	r21, 0x00	; 0
 374:	e6 95       	lsr	r30
 376:	00 1c       	adc	r0, r0
 378:	ca f7       	brpl	.-14     	; 0x36c <__divsf3_pse+0x2c>
 37a:	2b d0       	rcall	.+86     	; 0x3d2 <__divsf3_pse+0x92>
 37c:	fe 2f       	mov	r31, r30
 37e:	29 d0       	rcall	.+82     	; 0x3d2 <__divsf3_pse+0x92>
 380:	66 0f       	add	r22, r22
 382:	77 1f       	adc	r23, r23
 384:	88 1f       	adc	r24, r24
 386:	bb 1f       	adc	r27, r27
 388:	26 17       	cp	r18, r22
 38a:	37 07       	cpc	r19, r23
 38c:	48 07       	cpc	r20, r24
 38e:	ab 07       	cpc	r26, r27
 390:	b0 e8       	ldi	r27, 0x80	; 128
 392:	09 f0       	breq	.+2      	; 0x396 <__divsf3_pse+0x56>
 394:	bb 0b       	sbc	r27, r27
 396:	80 2d       	mov	r24, r0
 398:	bf 01       	movw	r22, r30
 39a:	ff 27       	eor	r31, r31
 39c:	93 58       	subi	r25, 0x83	; 131
 39e:	5f 4f       	sbci	r21, 0xFF	; 255
 3a0:	3a f0       	brmi	.+14     	; 0x3b0 <__divsf3_pse+0x70>
 3a2:	9e 3f       	cpi	r25, 0xFE	; 254
 3a4:	51 05       	cpc	r21, r1
 3a6:	78 f0       	brcs	.+30     	; 0x3c6 <__divsf3_pse+0x86>
 3a8:	0c 94 6e 02 	jmp	0x4dc	; 0x4dc <__fp_inf>
 3ac:	0c 94 b9 02 	jmp	0x572	; 0x572 <__fp_szero>
 3b0:	5f 3f       	cpi	r21, 0xFF	; 255
 3b2:	e4 f3       	brlt	.-8      	; 0x3ac <__divsf3_pse+0x6c>
 3b4:	98 3e       	cpi	r25, 0xE8	; 232
 3b6:	d4 f3       	brlt	.-12     	; 0x3ac <__divsf3_pse+0x6c>
 3b8:	86 95       	lsr	r24
 3ba:	77 95       	ror	r23
 3bc:	67 95       	ror	r22
 3be:	b7 95       	ror	r27
 3c0:	f7 95       	ror	r31
 3c2:	9f 5f       	subi	r25, 0xFF	; 255
 3c4:	c9 f7       	brne	.-14     	; 0x3b8 <__divsf3_pse+0x78>
 3c6:	88 0f       	add	r24, r24
 3c8:	91 1d       	adc	r25, r1
 3ca:	96 95       	lsr	r25
 3cc:	87 95       	ror	r24
 3ce:	97 f9       	bld	r25, 7
 3d0:	08 95       	ret
 3d2:	e1 e0       	ldi	r30, 0x01	; 1
 3d4:	66 0f       	add	r22, r22
 3d6:	77 1f       	adc	r23, r23
 3d8:	88 1f       	adc	r24, r24
 3da:	bb 1f       	adc	r27, r27
 3dc:	62 17       	cp	r22, r18
 3de:	73 07       	cpc	r23, r19
 3e0:	84 07       	cpc	r24, r20
 3e2:	ba 07       	cpc	r27, r26
 3e4:	20 f0       	brcs	.+8      	; 0x3ee <__divsf3_pse+0xae>
 3e6:	62 1b       	sub	r22, r18
 3e8:	73 0b       	sbc	r23, r19
 3ea:	84 0b       	sbc	r24, r20
 3ec:	ba 0b       	sbc	r27, r26
 3ee:	ee 1f       	adc	r30, r30
 3f0:	88 f7       	brcc	.-30     	; 0x3d4 <__divsf3_pse+0x94>
 3f2:	e0 95       	com	r30
 3f4:	08 95       	ret

000003f6 <__fixsfsi>:
 3f6:	0e 94 02 02 	call	0x404	; 0x404 <__fixunssfsi>
 3fa:	68 94       	set
 3fc:	b1 11       	cpse	r27, r1
 3fe:	0c 94 b9 02 	jmp	0x572	; 0x572 <__fp_szero>
 402:	08 95       	ret

00000404 <__fixunssfsi>:
 404:	0e 94 9e 02 	call	0x53c	; 0x53c <__fp_splitA>
 408:	88 f0       	brcs	.+34     	; 0x42c <__fixunssfsi+0x28>
 40a:	9f 57       	subi	r25, 0x7F	; 127
 40c:	98 f0       	brcs	.+38     	; 0x434 <__fixunssfsi+0x30>
 40e:	b9 2f       	mov	r27, r25
 410:	99 27       	eor	r25, r25
 412:	b7 51       	subi	r27, 0x17	; 23
 414:	b0 f0       	brcs	.+44     	; 0x442 <__fixunssfsi+0x3e>
 416:	e1 f0       	breq	.+56     	; 0x450 <__fixunssfsi+0x4c>
 418:	66 0f       	add	r22, r22
 41a:	77 1f       	adc	r23, r23
 41c:	88 1f       	adc	r24, r24
 41e:	99 1f       	adc	r25, r25
 420:	1a f0       	brmi	.+6      	; 0x428 <__fixunssfsi+0x24>
 422:	ba 95       	dec	r27
 424:	c9 f7       	brne	.-14     	; 0x418 <__fixunssfsi+0x14>
 426:	14 c0       	rjmp	.+40     	; 0x450 <__fixunssfsi+0x4c>
 428:	b1 30       	cpi	r27, 0x01	; 1
 42a:	91 f0       	breq	.+36     	; 0x450 <__fixunssfsi+0x4c>
 42c:	0e 94 b8 02 	call	0x570	; 0x570 <__fp_zero>
 430:	b1 e0       	ldi	r27, 0x01	; 1
 432:	08 95       	ret
 434:	0c 94 b8 02 	jmp	0x570	; 0x570 <__fp_zero>
 438:	67 2f       	mov	r22, r23
 43a:	78 2f       	mov	r23, r24
 43c:	88 27       	eor	r24, r24
 43e:	b8 5f       	subi	r27, 0xF8	; 248
 440:	39 f0       	breq	.+14     	; 0x450 <__fixunssfsi+0x4c>
 442:	b9 3f       	cpi	r27, 0xF9	; 249
 444:	cc f3       	brlt	.-14     	; 0x438 <__fixunssfsi+0x34>
 446:	86 95       	lsr	r24
 448:	77 95       	ror	r23
 44a:	67 95       	ror	r22
 44c:	b3 95       	inc	r27
 44e:	d9 f7       	brne	.-10     	; 0x446 <__fixunssfsi+0x42>
 450:	3e f4       	brtc	.+14     	; 0x460 <__fixunssfsi+0x5c>
 452:	90 95       	com	r25
 454:	80 95       	com	r24
 456:	70 95       	com	r23
 458:	61 95       	neg	r22
 45a:	7f 4f       	sbci	r23, 0xFF	; 255
 45c:	8f 4f       	sbci	r24, 0xFF	; 255
 45e:	9f 4f       	sbci	r25, 0xFF	; 255
 460:	08 95       	ret

00000462 <__floatunsisf>:
 462:	e8 94       	clt
 464:	09 c0       	rjmp	.+18     	; 0x478 <__floatsisf+0x12>

00000466 <__floatsisf>:
 466:	97 fb       	bst	r25, 7
 468:	3e f4       	brtc	.+14     	; 0x478 <__floatsisf+0x12>
 46a:	90 95       	com	r25
 46c:	80 95       	com	r24
 46e:	70 95       	com	r23
 470:	61 95       	neg	r22
 472:	7f 4f       	sbci	r23, 0xFF	; 255
 474:	8f 4f       	sbci	r24, 0xFF	; 255
 476:	9f 4f       	sbci	r25, 0xFF	; 255
 478:	99 23       	and	r25, r25
 47a:	a9 f0       	breq	.+42     	; 0x4a6 <__floatsisf+0x40>
 47c:	f9 2f       	mov	r31, r25
 47e:	96 e9       	ldi	r25, 0x96	; 150
 480:	bb 27       	eor	r27, r27
 482:	93 95       	inc	r25
 484:	f6 95       	lsr	r31
 486:	87 95       	ror	r24
 488:	77 95       	ror	r23
 48a:	67 95       	ror	r22
 48c:	b7 95       	ror	r27
 48e:	f1 11       	cpse	r31, r1
 490:	f8 cf       	rjmp	.-16     	; 0x482 <__floatsisf+0x1c>
 492:	fa f4       	brpl	.+62     	; 0x4d2 <__floatsisf+0x6c>
 494:	bb 0f       	add	r27, r27
 496:	11 f4       	brne	.+4      	; 0x49c <__floatsisf+0x36>
 498:	60 ff       	sbrs	r22, 0
 49a:	1b c0       	rjmp	.+54     	; 0x4d2 <__floatsisf+0x6c>
 49c:	6f 5f       	subi	r22, 0xFF	; 255
 49e:	7f 4f       	sbci	r23, 0xFF	; 255
 4a0:	8f 4f       	sbci	r24, 0xFF	; 255
 4a2:	9f 4f       	sbci	r25, 0xFF	; 255
 4a4:	16 c0       	rjmp	.+44     	; 0x4d2 <__floatsisf+0x6c>
 4a6:	88 23       	and	r24, r24
 4a8:	11 f0       	breq	.+4      	; 0x4ae <__floatsisf+0x48>
 4aa:	96 e9       	ldi	r25, 0x96	; 150
 4ac:	11 c0       	rjmp	.+34     	; 0x4d0 <__floatsisf+0x6a>
 4ae:	77 23       	and	r23, r23
 4b0:	21 f0       	breq	.+8      	; 0x4ba <__floatsisf+0x54>
 4b2:	9e e8       	ldi	r25, 0x8E	; 142
 4b4:	87 2f       	mov	r24, r23
 4b6:	76 2f       	mov	r23, r22
 4b8:	05 c0       	rjmp	.+10     	; 0x4c4 <__floatsisf+0x5e>
 4ba:	66 23       	and	r22, r22
 4bc:	71 f0       	breq	.+28     	; 0x4da <__floatsisf+0x74>
 4be:	96 e8       	ldi	r25, 0x86	; 134
 4c0:	86 2f       	mov	r24, r22
 4c2:	70 e0       	ldi	r23, 0x00	; 0
 4c4:	60 e0       	ldi	r22, 0x00	; 0
 4c6:	2a f0       	brmi	.+10     	; 0x4d2 <__floatsisf+0x6c>
 4c8:	9a 95       	dec	r25
 4ca:	66 0f       	add	r22, r22
 4cc:	77 1f       	adc	r23, r23
 4ce:	88 1f       	adc	r24, r24
 4d0:	da f7       	brpl	.-10     	; 0x4c8 <__floatsisf+0x62>
 4d2:	88 0f       	add	r24, r24
 4d4:	96 95       	lsr	r25
 4d6:	87 95       	ror	r24
 4d8:	97 f9       	bld	r25, 7
 4da:	08 95       	ret

000004dc <__fp_inf>:
 4dc:	97 f9       	bld	r25, 7
 4de:	9f 67       	ori	r25, 0x7F	; 127
 4e0:	80 e8       	ldi	r24, 0x80	; 128
 4e2:	70 e0       	ldi	r23, 0x00	; 0
 4e4:	60 e0       	ldi	r22, 0x00	; 0
 4e6:	08 95       	ret

000004e8 <__fp_nan>:
 4e8:	9f ef       	ldi	r25, 0xFF	; 255
 4ea:	80 ec       	ldi	r24, 0xC0	; 192
 4ec:	08 95       	ret

000004ee <__fp_pscA>:
 4ee:	00 24       	eor	r0, r0
 4f0:	0a 94       	dec	r0
 4f2:	16 16       	cp	r1, r22
 4f4:	17 06       	cpc	r1, r23
 4f6:	18 06       	cpc	r1, r24
 4f8:	09 06       	cpc	r0, r25
 4fa:	08 95       	ret

000004fc <__fp_pscB>:
 4fc:	00 24       	eor	r0, r0
 4fe:	0a 94       	dec	r0
 500:	12 16       	cp	r1, r18
 502:	13 06       	cpc	r1, r19
 504:	14 06       	cpc	r1, r20
 506:	05 06       	cpc	r0, r21
 508:	08 95       	ret

0000050a <__fp_round>:
 50a:	09 2e       	mov	r0, r25
 50c:	03 94       	inc	r0
 50e:	00 0c       	add	r0, r0
 510:	11 f4       	brne	.+4      	; 0x516 <__fp_round+0xc>
 512:	88 23       	and	r24, r24
 514:	52 f0       	brmi	.+20     	; 0x52a <__fp_round+0x20>
 516:	bb 0f       	add	r27, r27
 518:	40 f4       	brcc	.+16     	; 0x52a <__fp_round+0x20>
 51a:	bf 2b       	or	r27, r31
 51c:	11 f4       	brne	.+4      	; 0x522 <__fp_round+0x18>
 51e:	60 ff       	sbrs	r22, 0
 520:	04 c0       	rjmp	.+8      	; 0x52a <__fp_round+0x20>
 522:	6f 5f       	subi	r22, 0xFF	; 255
 524:	7f 4f       	sbci	r23, 0xFF	; 255
 526:	8f 4f       	sbci	r24, 0xFF	; 255
 528:	9f 4f       	sbci	r25, 0xFF	; 255
 52a:	08 95       	ret

0000052c <__fp_split3>:
 52c:	57 fd       	sbrc	r21, 7
 52e:	90 58       	subi	r25, 0x80	; 128
 530:	44 0f       	add	r20, r20
 532:	55 1f       	adc	r21, r21
 534:	59 f0       	breq	.+22     	; 0x54c <__fp_splitA+0x10>
 536:	5f 3f       	cpi	r21, 0xFF	; 255
 538:	71 f0       	breq	.+28     	; 0x556 <__fp_splitA+0x1a>
 53a:	47 95       	ror	r20

0000053c <__fp_splitA>:
 53c:	88 0f       	add	r24, r24
 53e:	97 fb       	bst	r25, 7
 540:	99 1f       	adc	r25, r25
 542:	61 f0       	breq	.+24     	; 0x55c <__fp_splitA+0x20>
 544:	9f 3f       	cpi	r25, 0xFF	; 255
 546:	79 f0       	breq	.+30     	; 0x566 <__fp_splitA+0x2a>
 548:	87 95       	ror	r24
 54a:	08 95       	ret
 54c:	12 16       	cp	r1, r18
 54e:	13 06       	cpc	r1, r19
 550:	14 06       	cpc	r1, r20
 552:	55 1f       	adc	r21, r21
 554:	f2 cf       	rjmp	.-28     	; 0x53a <__fp_split3+0xe>
 556:	46 95       	lsr	r20
 558:	f1 df       	rcall	.-30     	; 0x53c <__fp_splitA>
 55a:	08 c0       	rjmp	.+16     	; 0x56c <__fp_splitA+0x30>
 55c:	16 16       	cp	r1, r22
 55e:	17 06       	cpc	r1, r23
 560:	18 06       	cpc	r1, r24
 562:	99 1f       	adc	r25, r25
 564:	f1 cf       	rjmp	.-30     	; 0x548 <__fp_splitA+0xc>
 566:	86 95       	lsr	r24
 568:	71 05       	cpc	r23, r1
 56a:	61 05       	cpc	r22, r1
 56c:	08 94       	sec
 56e:	08 95       	ret

00000570 <__fp_zero>:
 570:	e8 94       	clt

00000572 <__fp_szero>:
 572:	bb 27       	eor	r27, r27
 574:	66 27       	eor	r22, r22
 576:	77 27       	eor	r23, r23
 578:	cb 01       	movw	r24, r22
 57a:	97 f9       	bld	r25, 7
 57c:	08 95       	ret

0000057e <__mulsf3>:
 57e:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <__mulsf3x>
 582:	0c 94 85 02 	jmp	0x50a	; 0x50a <__fp_round>
 586:	0e 94 77 02 	call	0x4ee	; 0x4ee <__fp_pscA>
 58a:	38 f0       	brcs	.+14     	; 0x59a <__mulsf3+0x1c>
 58c:	0e 94 7e 02 	call	0x4fc	; 0x4fc <__fp_pscB>
 590:	20 f0       	brcs	.+8      	; 0x59a <__mulsf3+0x1c>
 592:	95 23       	and	r25, r21
 594:	11 f0       	breq	.+4      	; 0x59a <__mulsf3+0x1c>
 596:	0c 94 6e 02 	jmp	0x4dc	; 0x4dc <__fp_inf>
 59a:	0c 94 74 02 	jmp	0x4e8	; 0x4e8 <__fp_nan>
 59e:	11 24       	eor	r1, r1
 5a0:	0c 94 b9 02 	jmp	0x572	; 0x572 <__fp_szero>

000005a4 <__mulsf3x>:
 5a4:	0e 94 96 02 	call	0x52c	; 0x52c <__fp_split3>
 5a8:	70 f3       	brcs	.-36     	; 0x586 <__mulsf3+0x8>

000005aa <__mulsf3_pse>:
 5aa:	95 9f       	mul	r25, r21
 5ac:	c1 f3       	breq	.-16     	; 0x59e <__mulsf3+0x20>
 5ae:	95 0f       	add	r25, r21
 5b0:	50 e0       	ldi	r21, 0x00	; 0
 5b2:	55 1f       	adc	r21, r21
 5b4:	62 9f       	mul	r22, r18
 5b6:	f0 01       	movw	r30, r0
 5b8:	72 9f       	mul	r23, r18
 5ba:	bb 27       	eor	r27, r27
 5bc:	f0 0d       	add	r31, r0
 5be:	b1 1d       	adc	r27, r1
 5c0:	63 9f       	mul	r22, r19
 5c2:	aa 27       	eor	r26, r26
 5c4:	f0 0d       	add	r31, r0
 5c6:	b1 1d       	adc	r27, r1
 5c8:	aa 1f       	adc	r26, r26
 5ca:	64 9f       	mul	r22, r20
 5cc:	66 27       	eor	r22, r22
 5ce:	b0 0d       	add	r27, r0
 5d0:	a1 1d       	adc	r26, r1
 5d2:	66 1f       	adc	r22, r22
 5d4:	82 9f       	mul	r24, r18
 5d6:	22 27       	eor	r18, r18
 5d8:	b0 0d       	add	r27, r0
 5da:	a1 1d       	adc	r26, r1
 5dc:	62 1f       	adc	r22, r18
 5de:	73 9f       	mul	r23, r19
 5e0:	b0 0d       	add	r27, r0
 5e2:	a1 1d       	adc	r26, r1
 5e4:	62 1f       	adc	r22, r18
 5e6:	83 9f       	mul	r24, r19
 5e8:	a0 0d       	add	r26, r0
 5ea:	61 1d       	adc	r22, r1
 5ec:	22 1f       	adc	r18, r18
 5ee:	74 9f       	mul	r23, r20
 5f0:	33 27       	eor	r19, r19
 5f2:	a0 0d       	add	r26, r0
 5f4:	61 1d       	adc	r22, r1
 5f6:	23 1f       	adc	r18, r19
 5f8:	84 9f       	mul	r24, r20
 5fa:	60 0d       	add	r22, r0
 5fc:	21 1d       	adc	r18, r1
 5fe:	82 2f       	mov	r24, r18
 600:	76 2f       	mov	r23, r22
 602:	6a 2f       	mov	r22, r26
 604:	11 24       	eor	r1, r1
 606:	9f 57       	subi	r25, 0x7F	; 127
 608:	50 40       	sbci	r21, 0x00	; 0
 60a:	9a f0       	brmi	.+38     	; 0x632 <__mulsf3_pse+0x88>
 60c:	f1 f0       	breq	.+60     	; 0x64a <__mulsf3_pse+0xa0>
 60e:	88 23       	and	r24, r24
 610:	4a f0       	brmi	.+18     	; 0x624 <__mulsf3_pse+0x7a>
 612:	ee 0f       	add	r30, r30
 614:	ff 1f       	adc	r31, r31
 616:	bb 1f       	adc	r27, r27
 618:	66 1f       	adc	r22, r22
 61a:	77 1f       	adc	r23, r23
 61c:	88 1f       	adc	r24, r24
 61e:	91 50       	subi	r25, 0x01	; 1
 620:	50 40       	sbci	r21, 0x00	; 0
 622:	a9 f7       	brne	.-22     	; 0x60e <__mulsf3_pse+0x64>
 624:	9e 3f       	cpi	r25, 0xFE	; 254
 626:	51 05       	cpc	r21, r1
 628:	80 f0       	brcs	.+32     	; 0x64a <__mulsf3_pse+0xa0>
 62a:	0c 94 6e 02 	jmp	0x4dc	; 0x4dc <__fp_inf>
 62e:	0c 94 b9 02 	jmp	0x572	; 0x572 <__fp_szero>
 632:	5f 3f       	cpi	r21, 0xFF	; 255
 634:	e4 f3       	brlt	.-8      	; 0x62e <__mulsf3_pse+0x84>
 636:	98 3e       	cpi	r25, 0xE8	; 232
 638:	d4 f3       	brlt	.-12     	; 0x62e <__mulsf3_pse+0x84>
 63a:	86 95       	lsr	r24
 63c:	77 95       	ror	r23
 63e:	67 95       	ror	r22
 640:	b7 95       	ror	r27
 642:	f7 95       	ror	r31
 644:	e7 95       	ror	r30
 646:	9f 5f       	subi	r25, 0xFF	; 255
 648:	c1 f7       	brne	.-16     	; 0x63a <__mulsf3_pse+0x90>
 64a:	fe 2b       	or	r31, r30
 64c:	88 0f       	add	r24, r24
 64e:	91 1d       	adc	r25, r1
 650:	96 95       	lsr	r25
 652:	87 95       	ror	r24
 654:	97 f9       	bld	r25, 7
 656:	08 95       	ret

00000658 <_exit>:
 658:	f8 94       	cli

0000065a <__stop_program>:
 65a:	ff cf       	rjmp	.-2      	; 0x65a <__stop_program>
