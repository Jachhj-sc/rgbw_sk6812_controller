
RoomAutomation.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000009a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000092e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000014  00800100  00800100  000009a2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000009a2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000009d4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d8  00000000  00000000  00000a14  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ddd  00000000  00000000  00000aec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009cc  00000000  00000000  000018c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006f8  00000000  00000000  00002295  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000304  00000000  00000000  00002990  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000531  00000000  00000000  00002c94  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a8f  00000000  00000000  000031c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  00003c54  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__vector_18>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a4 31       	cpi	r26, 0x14	; 20
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 ab 00 	call	0x156	; 0x156 <main>
  88:	0c 94 95 04 	jmp	0x92a	; 0x92a <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <knobs_init>:
#define knob2_Channel ADC5D


void knobs_init(void){
	//set pc4 & 5 to input
	DDRC &= ~( (1<<PORTC4) | (1<<PORTC5) );
  90:	87 b1       	in	r24, 0x07	; 7
  92:	8f 7c       	andi	r24, 0xCF	; 207
  94:	87 b9       	out	0x07, r24	; 7


	ADMUX |= (1<<REFS0);//set reference voltage to Vcc
  96:	ec e7       	ldi	r30, 0x7C	; 124
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	80 81       	ld	r24, Z
  9c:	80 64       	ori	r24, 0x40	; 64
  9e:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADEN) | (1<<ADSC) | (1<<ADATE) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
  a0:	ea e7       	ldi	r30, 0x7A	; 122
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	80 81       	ld	r24, Z
  a6:	87 6e       	ori	r24, 0xE7	; 231
  a8:	80 83       	st	Z, r24
	ADCSRB |= (1<<ADTS1);//set ADC auto trigger mode to Ext Interrupt
  aa:	eb e7       	ldi	r30, 0x7B	; 123
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	80 81       	ld	r24, Z
  b0:	82 60       	ori	r24, 0x02	; 2
  b2:	80 83       	st	Z, r24
  b4:	08 95       	ret

000000b6 <knobs_getPos1>:
	
}

uint16_t knobs_getPos1(void){
  b6:	0f 93       	push	r16
  b8:	1f 93       	push	r17
	//while((ADCSRA & (1<<ADSC)));//wait for conversion to finish
	//update input channel
	ADMUX &= ~((1<<MUX0) | (1<<MUX1) | (1<<MUX2) | (1<<MUX3));//reset mux
  ba:	ec e7       	ldi	r30, 0x7C	; 124
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	80 81       	ld	r24, Z
  c0:	80 7f       	andi	r24, 0xF0	; 240
  c2:	80 83       	st	Z, r24
	ADMUX |= knob1_Channel;
  c4:	80 81       	ld	r24, Z
  c6:	84 60       	ori	r24, 0x04	; 4
  c8:	80 83       	st	Z, r24
	
	ADCSRA |= (1<<ADSC);//start conversion
  ca:	ea e7       	ldi	r30, 0x7A	; 122
  cc:	f0 e0       	ldi	r31, 0x00	; 0
  ce:	80 81       	ld	r24, Z
  d0:	80 64       	ori	r24, 0x40	; 64
  d2:	80 83       	st	Z, r24
	
	while((ADCSRA & (1<<ADSC)));//wait for conversion to finish
  d4:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  d8:	86 fd       	sbrc	r24, 6
  da:	fc cf       	rjmp	.-8      	; 0xd4 <knobs_getPos1+0x1e>

	return mapi(ADC, 0, 1023, 0, 255);
  dc:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
  e0:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
  e4:	0f ef       	ldi	r16, 0xFF	; 255
  e6:	10 e0       	ldi	r17, 0x00	; 0
  e8:	20 e0       	ldi	r18, 0x00	; 0
  ea:	30 e0       	ldi	r19, 0x00	; 0
  ec:	4f ef       	ldi	r20, 0xFF	; 255
  ee:	53 e0       	ldi	r21, 0x03	; 3
  f0:	60 e0       	ldi	r22, 0x00	; 0
  f2:	70 e0       	ldi	r23, 0x00	; 0
  f4:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <mapi>
}
  f8:	1f 91       	pop	r17
  fa:	0f 91       	pop	r16
  fc:	08 95       	ret

000000fe <__vector_18>:
#define MASK(x) (1 << x)


unsigned char strbuff[20];

ISR(USART_RX_vect){
  fe:	1f 92       	push	r1
 100:	0f 92       	push	r0
 102:	0f b6       	in	r0, 0x3f	; 63
 104:	0f 92       	push	r0
 106:	11 24       	eor	r1, r1
 108:	2f 93       	push	r18
 10a:	3f 93       	push	r19
 10c:	4f 93       	push	r20
 10e:	5f 93       	push	r21
 110:	6f 93       	push	r22
 112:	7f 93       	push	r23
 114:	8f 93       	push	r24
 116:	9f 93       	push	r25
 118:	af 93       	push	r26
 11a:	bf 93       	push	r27
 11c:	ef 93       	push	r30
 11e:	ff 93       	push	r31
	usart_ReceiveString(strbuff);
 120:	80 e0       	ldi	r24, 0x00	; 0
 122:	91 e0       	ldi	r25, 0x01	; 1
 124:	0e 94 ad 01 	call	0x35a	; 0x35a <usart_ReceiveString>
	usart_SendString(strbuff);//echo
 128:	80 e0       	ldi	r24, 0x00	; 0
 12a:	91 e0       	ldi	r25, 0x01	; 1
 12c:	0e 94 18 02 	call	0x430	; 0x430 <usart_SendString>
	strcpy((char *)strbuff, "");
 130:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
}
 134:	ff 91       	pop	r31
 136:	ef 91       	pop	r30
 138:	bf 91       	pop	r27
 13a:	af 91       	pop	r26
 13c:	9f 91       	pop	r25
 13e:	8f 91       	pop	r24
 140:	7f 91       	pop	r23
 142:	6f 91       	pop	r22
 144:	5f 91       	pop	r21
 146:	4f 91       	pop	r20
 148:	3f 91       	pop	r19
 14a:	2f 91       	pop	r18
 14c:	0f 90       	pop	r0
 14e:	0f be       	out	0x3f, r0	; 63
 150:	0f 90       	pop	r0
 152:	1f 90       	pop	r1
 154:	18 95       	reti

00000156 <main>:


int main(void)
{
 156:	cf 93       	push	r28
 158:	df 93       	push	r29
 15a:	00 d0       	rcall	.+0      	; 0x15c <main+0x6>
 15c:	00 d0       	rcall	.+0      	; 0x15e <main+0x8>
 15e:	00 d0       	rcall	.+0      	; 0x160 <main+0xa>
 160:	cd b7       	in	r28, 0x3d	; 61
 162:	de b7       	in	r29, 0x3e	; 62
//  DDRB |= MASK(PORTB5);//enable pin 5 for output
// 	PORTB |= MASK(PORTB5);//set pin 5 to high

 	volatile int knobpos1 = 0;
 164:	1a 82       	std	Y+2, r1	; 0x02
 166:	19 82       	std	Y+1, r1	; 0x01
	volatile long knobpos2 = 0;
 168:	1b 82       	std	Y+3, r1	; 0x03
 16a:	1c 82       	std	Y+4, r1	; 0x04
 16c:	1d 82       	std	Y+5, r1	; 0x05
 16e:	1e 82       	std	Y+6, r1	; 0x06
	 
	 
	knobs_init();
 170:	0e 94 48 00 	call	0x90	; 0x90 <knobs_init>
	usart_Init(9600);
 174:	60 e8       	ldi	r22, 0x80	; 128
 176:	75 e2       	ldi	r23, 0x25	; 37
 178:	80 e0       	ldi	r24, 0x00	; 0
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	0e 94 64 01 	call	0x2c8	; 0x2c8 <usart_Init>
	
	sei();//enable uart interrupt
 180:	78 94       	sei
	while (1){

		knobpos1 = knobs_getPos1();
 182:	0e 94 5b 00 	call	0xb6	; 0xb6 <knobs_getPos1>
 186:	9a 83       	std	Y+2, r25	; 0x02
 188:	89 83       	std	Y+1, r24	; 0x01
		
		usart_SendValueToText(knobpos1);
 18a:	89 81       	ldd	r24, Y+1	; 0x01
 18c:	9a 81       	ldd	r25, Y+2	; 0x02
 18e:	0e 94 ca 01 	call	0x394	; 0x394 <usart_SendValueToText>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 192:	2f ef       	ldi	r18, 0xFF	; 255
 194:	89 e6       	ldi	r24, 0x69	; 105
 196:	98 e1       	ldi	r25, 0x18	; 24
 198:	21 50       	subi	r18, 0x01	; 1
 19a:	80 40       	sbci	r24, 0x00	; 0
 19c:	90 40       	sbci	r25, 0x00	; 0
 19e:	e1 f7       	brne	.-8      	; 0x198 <main+0x42>
 1a0:	00 c0       	rjmp	.+0      	; 0x1a2 <main+0x4c>
 1a2:	00 00       	nop
 1a4:	ee cf       	rjmp	.-36     	; 0x182 <main+0x2c>

000001a6 <mapi>:
 * Created: 10/07/2021 17:21:24
 *  Author: william
 */ 
#include "math_map.h"

int mapi(int value, int fromLow, int fromHigh, int toLow, int toHigh){
 1a6:	2f 92       	push	r2
 1a8:	3f 92       	push	r3
 1aa:	4f 92       	push	r4
 1ac:	5f 92       	push	r5
 1ae:	6f 92       	push	r6
 1b0:	7f 92       	push	r7
 1b2:	8f 92       	push	r8
 1b4:	9f 92       	push	r9
 1b6:	af 92       	push	r10
 1b8:	bf 92       	push	r11
 1ba:	cf 92       	push	r12
 1bc:	df 92       	push	r13
 1be:	ef 92       	push	r14
 1c0:	ff 92       	push	r15
 1c2:	0f 93       	push	r16
 1c4:	1f 93       	push	r17
 1c6:	cf 93       	push	r28
 1c8:	df 93       	push	r29
 1ca:	00 d0       	rcall	.+0      	; 0x1cc <mapi+0x26>
 1cc:	00 d0       	rcall	.+0      	; 0x1ce <mapi+0x28>
 1ce:	00 d0       	rcall	.+0      	; 0x1d0 <mapi+0x2a>
 1d0:	cd b7       	in	r28, 0x3d	; 61
 1d2:	de b7       	in	r29, 0x3e	; 62
 1d4:	9e 83       	std	Y+6, r25	; 0x06
 1d6:	8d 83       	std	Y+5, r24	; 0x05
 1d8:	7b 01       	movw	r14, r22
 1da:	6a 01       	movw	r12, r20
 1dc:	19 01       	movw	r2, r18
	//this function maps a value with a certain range to another range perspectively
	float result;
	if (value > fromHigh){
 1de:	48 17       	cp	r20, r24
 1e0:	59 07       	cpc	r21, r25
 1e2:	14 f4       	brge	.+4      	; 0x1e8 <mapi+0x42>
		value = fromHigh;
 1e4:	5e 83       	std	Y+6, r21	; 0x06
 1e6:	4d 83       	std	Y+5, r20	; 0x05
	}
	if (value < fromLow){
 1e8:	2d 81       	ldd	r18, Y+5	; 0x05
 1ea:	3e 81       	ldd	r19, Y+6	; 0x06
 1ec:	2e 15       	cp	r18, r14
 1ee:	3f 05       	cpc	r19, r15
 1f0:	14 f4       	brge	.+4      	; 0x1f6 <mapi+0x50>
		value = fromLow;
 1f2:	fe 82       	std	Y+6, r15	; 0x06
 1f4:	ed 82       	std	Y+5, r14	; 0x05
	}
	
	result = (float)(toHigh-toLow);
 1f6:	b8 01       	movw	r22, r16
 1f8:	62 19       	sub	r22, r2
 1fa:	73 09       	sbc	r23, r3
 1fc:	07 2e       	mov	r0, r23
 1fe:	00 0c       	add	r0, r0
 200:	88 0b       	sbc	r24, r24
 202:	99 0b       	sbc	r25, r25
 204:	0e 94 45 03 	call	0x68a	; 0x68a <__floatsisf>
 208:	69 83       	std	Y+1, r22	; 0x01
 20a:	7a 83       	std	Y+2, r23	; 0x02
 20c:	8b 83       	std	Y+3, r24	; 0x03
 20e:	9c 83       	std	Y+4, r25	; 0x04
	result = result *  (((float)value-(float)fromLow) / ((float)fromHigh-(float)fromLow));
 210:	2d 81       	ldd	r18, Y+5	; 0x05
 212:	3e 81       	ldd	r19, Y+6	; 0x06
 214:	b9 01       	movw	r22, r18
 216:	33 0f       	add	r19, r19
 218:	88 0b       	sbc	r24, r24
 21a:	99 0b       	sbc	r25, r25
 21c:	0e 94 45 03 	call	0x68a	; 0x68a <__floatsisf>
 220:	2b 01       	movw	r4, r22
 222:	3c 01       	movw	r6, r24
 224:	b7 01       	movw	r22, r14
 226:	ff 0c       	add	r15, r15
 228:	88 0b       	sbc	r24, r24
 22a:	99 0b       	sbc	r25, r25
 22c:	0e 94 45 03 	call	0x68a	; 0x68a <__floatsisf>
 230:	4b 01       	movw	r8, r22
 232:	5c 01       	movw	r10, r24
 234:	9b 01       	movw	r18, r22
 236:	ac 01       	movw	r20, r24
 238:	c3 01       	movw	r24, r6
 23a:	b2 01       	movw	r22, r4
 23c:	0e 94 2e 02 	call	0x45c	; 0x45c <__subsf3>
 240:	2b 01       	movw	r4, r22
 242:	3c 01       	movw	r6, r24
 244:	b6 01       	movw	r22, r12
 246:	dd 0c       	add	r13, r13
 248:	88 0b       	sbc	r24, r24
 24a:	99 0b       	sbc	r25, r25
 24c:	0e 94 45 03 	call	0x68a	; 0x68a <__floatsisf>
 250:	a5 01       	movw	r20, r10
 252:	94 01       	movw	r18, r8
 254:	0e 94 2e 02 	call	0x45c	; 0x45c <__subsf3>
 258:	9b 01       	movw	r18, r22
 25a:	ac 01       	movw	r20, r24
 25c:	c3 01       	movw	r24, r6
 25e:	b2 01       	movw	r22, r4
 260:	0e 94 9b 02 	call	0x536	; 0x536 <__divsf3>
 264:	9b 01       	movw	r18, r22
 266:	ac 01       	movw	r20, r24
 268:	69 81       	ldd	r22, Y+1	; 0x01
 26a:	7a 81       	ldd	r23, Y+2	; 0x02
 26c:	8b 81       	ldd	r24, Y+3	; 0x03
 26e:	9c 81       	ldd	r25, Y+4	; 0x04
 270:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <__mulsf3>
 274:	6b 01       	movw	r12, r22
 276:	7c 01       	movw	r14, r24
	result += (float)toLow;
 278:	b1 01       	movw	r22, r2
 27a:	33 0c       	add	r3, r3
 27c:	88 0b       	sbc	r24, r24
 27e:	99 0b       	sbc	r25, r25
 280:	0e 94 45 03 	call	0x68a	; 0x68a <__floatsisf>
 284:	9b 01       	movw	r18, r22
 286:	ac 01       	movw	r20, r24
 288:	c7 01       	movw	r24, r14
 28a:	b6 01       	movw	r22, r12
 28c:	0e 94 2f 02 	call	0x45e	; 0x45e <__addsf3>
	
	return (int)result;
 290:	0e 94 0d 03 	call	0x61a	; 0x61a <__fixsfsi>
}
 294:	cb 01       	movw	r24, r22
 296:	26 96       	adiw	r28, 0x06	; 6
 298:	0f b6       	in	r0, 0x3f	; 63
 29a:	f8 94       	cli
 29c:	de bf       	out	0x3e, r29	; 62
 29e:	0f be       	out	0x3f, r0	; 63
 2a0:	cd bf       	out	0x3d, r28	; 61
 2a2:	df 91       	pop	r29
 2a4:	cf 91       	pop	r28
 2a6:	1f 91       	pop	r17
 2a8:	0f 91       	pop	r16
 2aa:	ff 90       	pop	r15
 2ac:	ef 90       	pop	r14
 2ae:	df 90       	pop	r13
 2b0:	cf 90       	pop	r12
 2b2:	bf 90       	pop	r11
 2b4:	af 90       	pop	r10
 2b6:	9f 90       	pop	r9
 2b8:	8f 90       	pop	r8
 2ba:	7f 90       	pop	r7
 2bc:	6f 90       	pop	r6
 2be:	5f 90       	pop	r5
 2c0:	4f 90       	pop	r4
 2c2:	3f 90       	pop	r3
 2c4:	2f 90       	pop	r2
 2c6:	08 95       	ret

000002c8 <usart_Init>:
	{
		t++;
	}
	Buff[t] = '\0';
	*hex = Buff[0];//only return the first received byte, discard the rest.
}
 2c8:	cf 93       	push	r28
 2ca:	df 93       	push	r29
 2cc:	c1 ec       	ldi	r28, 0xC1	; 193
 2ce:	d0 e0       	ldi	r29, 0x00	; 0
 2d0:	28 81       	ld	r18, Y
 2d2:	28 61       	ori	r18, 0x18	; 24
 2d4:	28 83       	st	Y, r18
 2d6:	e2 ec       	ldi	r30, 0xC2	; 194
 2d8:	f0 e0       	ldi	r31, 0x00	; 0
 2da:	20 81       	ld	r18, Z
 2dc:	27 60       	ori	r18, 0x07	; 7
 2de:	20 83       	st	Z, r18
 2e0:	dc 01       	movw	r26, r24
 2e2:	cb 01       	movw	r24, r22
 2e4:	88 0f       	add	r24, r24
 2e6:	99 1f       	adc	r25, r25
 2e8:	aa 1f       	adc	r26, r26
 2ea:	bb 1f       	adc	r27, r27
 2ec:	88 0f       	add	r24, r24
 2ee:	99 1f       	adc	r25, r25
 2f0:	aa 1f       	adc	r26, r26
 2f2:	bb 1f       	adc	r27, r27
 2f4:	9c 01       	movw	r18, r24
 2f6:	ad 01       	movw	r20, r26
 2f8:	22 0f       	add	r18, r18
 2fa:	33 1f       	adc	r19, r19
 2fc:	44 1f       	adc	r20, r20
 2fe:	55 1f       	adc	r21, r21
 300:	22 0f       	add	r18, r18
 302:	33 1f       	adc	r19, r19
 304:	44 1f       	adc	r20, r20
 306:	55 1f       	adc	r21, r21
 308:	60 e0       	ldi	r22, 0x00	; 0
 30a:	74 e2       	ldi	r23, 0x24	; 36
 30c:	84 ef       	ldi	r24, 0xF4	; 244
 30e:	90 e0       	ldi	r25, 0x00	; 0
 310:	0e 94 3e 04 	call	0x87c	; 0x87c <__udivmodsi4>
 314:	8f ef       	ldi	r24, 0xFF	; 255
 316:	82 0f       	add	r24, r18
 318:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 31c:	da 01       	movw	r26, r20
 31e:	c9 01       	movw	r24, r18
 320:	01 97       	sbiw	r24, 0x01	; 1
 322:	a1 09       	sbc	r26, r1
 324:	b1 09       	sbc	r27, r1
 326:	89 2f       	mov	r24, r25
 328:	9a 2f       	mov	r25, r26
 32a:	ab 2f       	mov	r26, r27
 32c:	bb 27       	eor	r27, r27
 32e:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 332:	88 81       	ld	r24, Y
 334:	80 68       	ori	r24, 0x80	; 128
 336:	88 83       	st	Y, r24
 338:	df 91       	pop	r29
 33a:	cf 91       	pop	r28
 33c:	08 95       	ret

0000033e <usart_RxChar>:
 33e:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 342:	88 23       	and	r24, r24
 344:	e4 f7       	brge	.-8      	; 0x33e <usart_RxChar>
 346:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 34a:	08 95       	ret

0000034c <usart_TxChar>:
 34c:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 350:	95 ff       	sbrs	r25, 5
 352:	fc cf       	rjmp	.-8      	; 0x34c <usart_TxChar>
 354:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 358:	08 95       	ret

0000035a <usart_ReceiveString>:
 35a:	ef 92       	push	r14
 35c:	ff 92       	push	r15
 35e:	0f 93       	push	r16
 360:	1f 93       	push	r17
 362:	cf 93       	push	r28
 364:	7c 01       	movw	r14, r24
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	c1 e0       	ldi	r28, 0x01	; 1
 36a:	c9 0f       	add	r28, r25
 36c:	87 01       	movw	r16, r14
 36e:	09 0f       	add	r16, r25
 370:	11 1d       	adc	r17, r1
 372:	0e 94 9f 01 	call	0x33e	; 0x33e <usart_RxChar>
 376:	f8 01       	movw	r30, r16
 378:	80 83       	st	Z, r24
 37a:	9c 2f       	mov	r25, r28
 37c:	8a 30       	cpi	r24, 0x0A	; 10
 37e:	a1 f7       	brne	.-24     	; 0x368 <usart_ReceiveString+0xe>
 380:	f7 01       	movw	r30, r14
 382:	ec 0f       	add	r30, r28
 384:	f1 1d       	adc	r31, r1
 386:	10 82       	st	Z, r1
 388:	cf 91       	pop	r28
 38a:	1f 91       	pop	r17
 38c:	0f 91       	pop	r16
 38e:	ff 90       	pop	r15
 390:	ef 90       	pop	r14
 392:	08 95       	ret

00000394 <usart_SendValueToText>:

void usart_SendValueToText(uint8_t val){
 394:	0f 93       	push	r16
 396:	1f 93       	push	r17
 398:	cf 93       	push	r28
 39a:	df 93       	push	r29
 39c:	cd b7       	in	r28, 0x3d	; 61
 39e:	de b7       	in	r29, 0x3e	; 62
 3a0:	64 97       	sbiw	r28, 0x14	; 20
 3a2:	0f b6       	in	r0, 0x3f	; 63
 3a4:	f8 94       	cli
 3a6:	de bf       	out	0x3e, r29	; 62
 3a8:	0f be       	out	0x3f, r0	; 63
 3aa:	cd bf       	out	0x3d, r28	; 61
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 3ac:	4a e0       	ldi	r20, 0x0A	; 10
 3ae:	be 01       	movw	r22, r28
 3b0:	6f 5f       	subi	r22, 0xFF	; 255
 3b2:	7f 4f       	sbci	r23, 0xFF	; 255
 3b4:	90 e0       	ldi	r25, 0x00	; 0
 3b6:	0e 94 60 04 	call	0x8c0	; 0x8c0 <__itoa_ncheck>
	char buff[20];
	itoa(val, buff, 10);

//append \n after the number
	int a = 0;
 3ba:	20 e0       	ldi	r18, 0x00	; 0
 3bc:	30 e0       	ldi	r19, 0x00	; 0
	while (buff[++a] != '\0');
 3be:	01 c0       	rjmp	.+2      	; 0x3c2 <usart_SendValueToText+0x2e>
 3c0:	9c 01       	movw	r18, r24
 3c2:	c9 01       	movw	r24, r18
 3c4:	01 96       	adiw	r24, 0x01	; 1
 3c6:	e1 e0       	ldi	r30, 0x01	; 1
 3c8:	f0 e0       	ldi	r31, 0x00	; 0
 3ca:	ec 0f       	add	r30, r28
 3cc:	fd 1f       	adc	r31, r29
 3ce:	e8 0f       	add	r30, r24
 3d0:	f9 1f       	adc	r31, r25
 3d2:	40 81       	ld	r20, Z
 3d4:	41 11       	cpse	r20, r1
 3d6:	f4 cf       	rjmp	.-24     	; 0x3c0 <usart_SendValueToText+0x2c>
	buff[a] = '\n';
 3d8:	e1 e0       	ldi	r30, 0x01	; 1
 3da:	f0 e0       	ldi	r31, 0x00	; 0
 3dc:	ec 0f       	add	r30, r28
 3de:	fd 1f       	adc	r31, r29
 3e0:	e8 0f       	add	r30, r24
 3e2:	f9 1f       	adc	r31, r25
 3e4:	4a e0       	ldi	r20, 0x0A	; 10
 3e6:	40 83       	st	Z, r20
	buff[a+1] = '\0';
 3e8:	2e 5f       	subi	r18, 0xFE	; 254
 3ea:	3f 4f       	sbci	r19, 0xFF	; 255
 3ec:	e1 e0       	ldi	r30, 0x01	; 1
 3ee:	f0 e0       	ldi	r31, 0x00	; 0
 3f0:	ec 0f       	add	r30, r28
 3f2:	fd 1f       	adc	r31, r29
 3f4:	e2 0f       	add	r30, r18
 3f6:	f3 1f       	adc	r31, r19
 3f8:	10 82       	st	Z, r1
	
	int i = 0;
 3fa:	00 e0       	ldi	r16, 0x00	; 0
 3fc:	10 e0       	ldi	r17, 0x00	; 0
	while(buff[i] != '\0'){
 3fe:	04 c0       	rjmp	.+8      	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
		usart_TxChar((unsigned char)buff[i++]);
 400:	0f 5f       	subi	r16, 0xFF	; 255
 402:	1f 4f       	sbci	r17, 0xFF	; 255
 404:	0e 94 a6 01 	call	0x34c	; 0x34c <usart_TxChar>
	while (buff[++a] != '\0');
	buff[a] = '\n';
	buff[a+1] = '\0';
	
	int i = 0;
	while(buff[i] != '\0'){
 408:	e1 e0       	ldi	r30, 0x01	; 1
 40a:	f0 e0       	ldi	r31, 0x00	; 0
 40c:	ec 0f       	add	r30, r28
 40e:	fd 1f       	adc	r31, r29
 410:	e0 0f       	add	r30, r16
 412:	f1 1f       	adc	r31, r17
 414:	80 81       	ld	r24, Z
 416:	81 11       	cpse	r24, r1
 418:	f3 cf       	rjmp	.-26     	; 0x400 <__EEPROM_REGION_LENGTH__>
		usart_TxChar((unsigned char)buff[i++]);
	}
	
		
}
 41a:	64 96       	adiw	r28, 0x14	; 20
 41c:	0f b6       	in	r0, 0x3f	; 63
 41e:	f8 94       	cli
 420:	de bf       	out	0x3e, r29	; 62
 422:	0f be       	out	0x3f, r0	; 63
 424:	cd bf       	out	0x3d, r28	; 61
 426:	df 91       	pop	r29
 428:	cf 91       	pop	r28
 42a:	1f 91       	pop	r17
 42c:	0f 91       	pop	r16
 42e:	08 95       	ret

00000430 <usart_SendString>:

void usart_SendString(unsigned char *str)									/* Send string of USART data function */
{
 430:	0f 93       	push	r16
 432:	1f 93       	push	r17
 434:	cf 93       	push	r28
 436:	df 93       	push	r29
 438:	8c 01       	movw	r16, r24
	int i = 0;
 43a:	c0 e0       	ldi	r28, 0x00	; 0
 43c:	d0 e0       	ldi	r29, 0x00	; 0
	while (str[i] != '\0'){
 43e:	03 c0       	rjmp	.+6      	; 0x446 <usart_SendString+0x16>
		usart_TxChar(str[i++]);					/* Send each char of string till the NULL */
 440:	21 96       	adiw	r28, 0x01	; 1
 442:	0e 94 a6 01 	call	0x34c	; 0x34c <usart_TxChar>
}

void usart_SendString(unsigned char *str)									/* Send string of USART data function */
{
	int i = 0;
	while (str[i] != '\0'){
 446:	f8 01       	movw	r30, r16
 448:	ec 0f       	add	r30, r28
 44a:	fd 1f       	adc	r31, r29
 44c:	80 81       	ld	r24, Z
 44e:	81 11       	cpse	r24, r1
 450:	f7 cf       	rjmp	.-18     	; 0x440 <usart_SendString+0x10>
		usart_TxChar(str[i++]);					/* Send each char of string till the NULL */
	}
}
 452:	df 91       	pop	r29
 454:	cf 91       	pop	r28
 456:	1f 91       	pop	r17
 458:	0f 91       	pop	r16
 45a:	08 95       	ret

0000045c <__subsf3>:
 45c:	50 58       	subi	r21, 0x80	; 128

0000045e <__addsf3>:
 45e:	bb 27       	eor	r27, r27
 460:	aa 27       	eor	r26, r26
 462:	0e 94 46 02 	call	0x48c	; 0x48c <__addsf3x>
 466:	0c 94 97 03 	jmp	0x72e	; 0x72e <__fp_round>
 46a:	0e 94 89 03 	call	0x712	; 0x712 <__fp_pscA>
 46e:	38 f0       	brcs	.+14     	; 0x47e <__addsf3+0x20>
 470:	0e 94 90 03 	call	0x720	; 0x720 <__fp_pscB>
 474:	20 f0       	brcs	.+8      	; 0x47e <__addsf3+0x20>
 476:	39 f4       	brne	.+14     	; 0x486 <__addsf3+0x28>
 478:	9f 3f       	cpi	r25, 0xFF	; 255
 47a:	19 f4       	brne	.+6      	; 0x482 <__addsf3+0x24>
 47c:	26 f4       	brtc	.+8      	; 0x486 <__addsf3+0x28>
 47e:	0c 94 86 03 	jmp	0x70c	; 0x70c <__fp_nan>
 482:	0e f4       	brtc	.+2      	; 0x486 <__addsf3+0x28>
 484:	e0 95       	com	r30
 486:	e7 fb       	bst	r30, 7
 488:	0c 94 80 03 	jmp	0x700	; 0x700 <__fp_inf>

0000048c <__addsf3x>:
 48c:	e9 2f       	mov	r30, r25
 48e:	0e 94 a8 03 	call	0x750	; 0x750 <__fp_split3>
 492:	58 f3       	brcs	.-42     	; 0x46a <__addsf3+0xc>
 494:	ba 17       	cp	r27, r26
 496:	62 07       	cpc	r22, r18
 498:	73 07       	cpc	r23, r19
 49a:	84 07       	cpc	r24, r20
 49c:	95 07       	cpc	r25, r21
 49e:	20 f0       	brcs	.+8      	; 0x4a8 <__addsf3x+0x1c>
 4a0:	79 f4       	brne	.+30     	; 0x4c0 <__addsf3x+0x34>
 4a2:	a6 f5       	brtc	.+104    	; 0x50c <__addsf3x+0x80>
 4a4:	0c 94 ca 03 	jmp	0x794	; 0x794 <__fp_zero>
 4a8:	0e f4       	brtc	.+2      	; 0x4ac <__addsf3x+0x20>
 4aa:	e0 95       	com	r30
 4ac:	0b 2e       	mov	r0, r27
 4ae:	ba 2f       	mov	r27, r26
 4b0:	a0 2d       	mov	r26, r0
 4b2:	0b 01       	movw	r0, r22
 4b4:	b9 01       	movw	r22, r18
 4b6:	90 01       	movw	r18, r0
 4b8:	0c 01       	movw	r0, r24
 4ba:	ca 01       	movw	r24, r20
 4bc:	a0 01       	movw	r20, r0
 4be:	11 24       	eor	r1, r1
 4c0:	ff 27       	eor	r31, r31
 4c2:	59 1b       	sub	r21, r25
 4c4:	99 f0       	breq	.+38     	; 0x4ec <__addsf3x+0x60>
 4c6:	59 3f       	cpi	r21, 0xF9	; 249
 4c8:	50 f4       	brcc	.+20     	; 0x4de <__addsf3x+0x52>
 4ca:	50 3e       	cpi	r21, 0xE0	; 224
 4cc:	68 f1       	brcs	.+90     	; 0x528 <__addsf3x+0x9c>
 4ce:	1a 16       	cp	r1, r26
 4d0:	f0 40       	sbci	r31, 0x00	; 0
 4d2:	a2 2f       	mov	r26, r18
 4d4:	23 2f       	mov	r18, r19
 4d6:	34 2f       	mov	r19, r20
 4d8:	44 27       	eor	r20, r20
 4da:	58 5f       	subi	r21, 0xF8	; 248
 4dc:	f3 cf       	rjmp	.-26     	; 0x4c4 <__addsf3x+0x38>
 4de:	46 95       	lsr	r20
 4e0:	37 95       	ror	r19
 4e2:	27 95       	ror	r18
 4e4:	a7 95       	ror	r26
 4e6:	f0 40       	sbci	r31, 0x00	; 0
 4e8:	53 95       	inc	r21
 4ea:	c9 f7       	brne	.-14     	; 0x4de <__addsf3x+0x52>
 4ec:	7e f4       	brtc	.+30     	; 0x50c <__addsf3x+0x80>
 4ee:	1f 16       	cp	r1, r31
 4f0:	ba 0b       	sbc	r27, r26
 4f2:	62 0b       	sbc	r22, r18
 4f4:	73 0b       	sbc	r23, r19
 4f6:	84 0b       	sbc	r24, r20
 4f8:	ba f0       	brmi	.+46     	; 0x528 <__addsf3x+0x9c>
 4fa:	91 50       	subi	r25, 0x01	; 1
 4fc:	a1 f0       	breq	.+40     	; 0x526 <__addsf3x+0x9a>
 4fe:	ff 0f       	add	r31, r31
 500:	bb 1f       	adc	r27, r27
 502:	66 1f       	adc	r22, r22
 504:	77 1f       	adc	r23, r23
 506:	88 1f       	adc	r24, r24
 508:	c2 f7       	brpl	.-16     	; 0x4fa <__addsf3x+0x6e>
 50a:	0e c0       	rjmp	.+28     	; 0x528 <__addsf3x+0x9c>
 50c:	ba 0f       	add	r27, r26
 50e:	62 1f       	adc	r22, r18
 510:	73 1f       	adc	r23, r19
 512:	84 1f       	adc	r24, r20
 514:	48 f4       	brcc	.+18     	; 0x528 <__addsf3x+0x9c>
 516:	87 95       	ror	r24
 518:	77 95       	ror	r23
 51a:	67 95       	ror	r22
 51c:	b7 95       	ror	r27
 51e:	f7 95       	ror	r31
 520:	9e 3f       	cpi	r25, 0xFE	; 254
 522:	08 f0       	brcs	.+2      	; 0x526 <__addsf3x+0x9a>
 524:	b0 cf       	rjmp	.-160    	; 0x486 <__addsf3+0x28>
 526:	93 95       	inc	r25
 528:	88 0f       	add	r24, r24
 52a:	08 f0       	brcs	.+2      	; 0x52e <__addsf3x+0xa2>
 52c:	99 27       	eor	r25, r25
 52e:	ee 0f       	add	r30, r30
 530:	97 95       	ror	r25
 532:	87 95       	ror	r24
 534:	08 95       	ret

00000536 <__divsf3>:
 536:	0e 94 af 02 	call	0x55e	; 0x55e <__divsf3x>
 53a:	0c 94 97 03 	jmp	0x72e	; 0x72e <__fp_round>
 53e:	0e 94 90 03 	call	0x720	; 0x720 <__fp_pscB>
 542:	58 f0       	brcs	.+22     	; 0x55a <__divsf3+0x24>
 544:	0e 94 89 03 	call	0x712	; 0x712 <__fp_pscA>
 548:	40 f0       	brcs	.+16     	; 0x55a <__divsf3+0x24>
 54a:	29 f4       	brne	.+10     	; 0x556 <__divsf3+0x20>
 54c:	5f 3f       	cpi	r21, 0xFF	; 255
 54e:	29 f0       	breq	.+10     	; 0x55a <__divsf3+0x24>
 550:	0c 94 80 03 	jmp	0x700	; 0x700 <__fp_inf>
 554:	51 11       	cpse	r21, r1
 556:	0c 94 cb 03 	jmp	0x796	; 0x796 <__fp_szero>
 55a:	0c 94 86 03 	jmp	0x70c	; 0x70c <__fp_nan>

0000055e <__divsf3x>:
 55e:	0e 94 a8 03 	call	0x750	; 0x750 <__fp_split3>
 562:	68 f3       	brcs	.-38     	; 0x53e <__divsf3+0x8>

00000564 <__divsf3_pse>:
 564:	99 23       	and	r25, r25
 566:	b1 f3       	breq	.-20     	; 0x554 <__divsf3+0x1e>
 568:	55 23       	and	r21, r21
 56a:	91 f3       	breq	.-28     	; 0x550 <__divsf3+0x1a>
 56c:	95 1b       	sub	r25, r21
 56e:	55 0b       	sbc	r21, r21
 570:	bb 27       	eor	r27, r27
 572:	aa 27       	eor	r26, r26
 574:	62 17       	cp	r22, r18
 576:	73 07       	cpc	r23, r19
 578:	84 07       	cpc	r24, r20
 57a:	38 f0       	brcs	.+14     	; 0x58a <__divsf3_pse+0x26>
 57c:	9f 5f       	subi	r25, 0xFF	; 255
 57e:	5f 4f       	sbci	r21, 0xFF	; 255
 580:	22 0f       	add	r18, r18
 582:	33 1f       	adc	r19, r19
 584:	44 1f       	adc	r20, r20
 586:	aa 1f       	adc	r26, r26
 588:	a9 f3       	breq	.-22     	; 0x574 <__divsf3_pse+0x10>
 58a:	35 d0       	rcall	.+106    	; 0x5f6 <__divsf3_pse+0x92>
 58c:	0e 2e       	mov	r0, r30
 58e:	3a f0       	brmi	.+14     	; 0x59e <__divsf3_pse+0x3a>
 590:	e0 e8       	ldi	r30, 0x80	; 128
 592:	32 d0       	rcall	.+100    	; 0x5f8 <__divsf3_pse+0x94>
 594:	91 50       	subi	r25, 0x01	; 1
 596:	50 40       	sbci	r21, 0x00	; 0
 598:	e6 95       	lsr	r30
 59a:	00 1c       	adc	r0, r0
 59c:	ca f7       	brpl	.-14     	; 0x590 <__divsf3_pse+0x2c>
 59e:	2b d0       	rcall	.+86     	; 0x5f6 <__divsf3_pse+0x92>
 5a0:	fe 2f       	mov	r31, r30
 5a2:	29 d0       	rcall	.+82     	; 0x5f6 <__divsf3_pse+0x92>
 5a4:	66 0f       	add	r22, r22
 5a6:	77 1f       	adc	r23, r23
 5a8:	88 1f       	adc	r24, r24
 5aa:	bb 1f       	adc	r27, r27
 5ac:	26 17       	cp	r18, r22
 5ae:	37 07       	cpc	r19, r23
 5b0:	48 07       	cpc	r20, r24
 5b2:	ab 07       	cpc	r26, r27
 5b4:	b0 e8       	ldi	r27, 0x80	; 128
 5b6:	09 f0       	breq	.+2      	; 0x5ba <__divsf3_pse+0x56>
 5b8:	bb 0b       	sbc	r27, r27
 5ba:	80 2d       	mov	r24, r0
 5bc:	bf 01       	movw	r22, r30
 5be:	ff 27       	eor	r31, r31
 5c0:	93 58       	subi	r25, 0x83	; 131
 5c2:	5f 4f       	sbci	r21, 0xFF	; 255
 5c4:	3a f0       	brmi	.+14     	; 0x5d4 <__divsf3_pse+0x70>
 5c6:	9e 3f       	cpi	r25, 0xFE	; 254
 5c8:	51 05       	cpc	r21, r1
 5ca:	78 f0       	brcs	.+30     	; 0x5ea <__divsf3_pse+0x86>
 5cc:	0c 94 80 03 	jmp	0x700	; 0x700 <__fp_inf>
 5d0:	0c 94 cb 03 	jmp	0x796	; 0x796 <__fp_szero>
 5d4:	5f 3f       	cpi	r21, 0xFF	; 255
 5d6:	e4 f3       	brlt	.-8      	; 0x5d0 <__divsf3_pse+0x6c>
 5d8:	98 3e       	cpi	r25, 0xE8	; 232
 5da:	d4 f3       	brlt	.-12     	; 0x5d0 <__divsf3_pse+0x6c>
 5dc:	86 95       	lsr	r24
 5de:	77 95       	ror	r23
 5e0:	67 95       	ror	r22
 5e2:	b7 95       	ror	r27
 5e4:	f7 95       	ror	r31
 5e6:	9f 5f       	subi	r25, 0xFF	; 255
 5e8:	c9 f7       	brne	.-14     	; 0x5dc <__divsf3_pse+0x78>
 5ea:	88 0f       	add	r24, r24
 5ec:	91 1d       	adc	r25, r1
 5ee:	96 95       	lsr	r25
 5f0:	87 95       	ror	r24
 5f2:	97 f9       	bld	r25, 7
 5f4:	08 95       	ret
 5f6:	e1 e0       	ldi	r30, 0x01	; 1
 5f8:	66 0f       	add	r22, r22
 5fa:	77 1f       	adc	r23, r23
 5fc:	88 1f       	adc	r24, r24
 5fe:	bb 1f       	adc	r27, r27
 600:	62 17       	cp	r22, r18
 602:	73 07       	cpc	r23, r19
 604:	84 07       	cpc	r24, r20
 606:	ba 07       	cpc	r27, r26
 608:	20 f0       	brcs	.+8      	; 0x612 <__divsf3_pse+0xae>
 60a:	62 1b       	sub	r22, r18
 60c:	73 0b       	sbc	r23, r19
 60e:	84 0b       	sbc	r24, r20
 610:	ba 0b       	sbc	r27, r26
 612:	ee 1f       	adc	r30, r30
 614:	88 f7       	brcc	.-30     	; 0x5f8 <__divsf3_pse+0x94>
 616:	e0 95       	com	r30
 618:	08 95       	ret

0000061a <__fixsfsi>:
 61a:	0e 94 14 03 	call	0x628	; 0x628 <__fixunssfsi>
 61e:	68 94       	set
 620:	b1 11       	cpse	r27, r1
 622:	0c 94 cb 03 	jmp	0x796	; 0x796 <__fp_szero>
 626:	08 95       	ret

00000628 <__fixunssfsi>:
 628:	0e 94 b0 03 	call	0x760	; 0x760 <__fp_splitA>
 62c:	88 f0       	brcs	.+34     	; 0x650 <__fixunssfsi+0x28>
 62e:	9f 57       	subi	r25, 0x7F	; 127
 630:	98 f0       	brcs	.+38     	; 0x658 <__fixunssfsi+0x30>
 632:	b9 2f       	mov	r27, r25
 634:	99 27       	eor	r25, r25
 636:	b7 51       	subi	r27, 0x17	; 23
 638:	b0 f0       	brcs	.+44     	; 0x666 <__fixunssfsi+0x3e>
 63a:	e1 f0       	breq	.+56     	; 0x674 <__fixunssfsi+0x4c>
 63c:	66 0f       	add	r22, r22
 63e:	77 1f       	adc	r23, r23
 640:	88 1f       	adc	r24, r24
 642:	99 1f       	adc	r25, r25
 644:	1a f0       	brmi	.+6      	; 0x64c <__fixunssfsi+0x24>
 646:	ba 95       	dec	r27
 648:	c9 f7       	brne	.-14     	; 0x63c <__fixunssfsi+0x14>
 64a:	14 c0       	rjmp	.+40     	; 0x674 <__fixunssfsi+0x4c>
 64c:	b1 30       	cpi	r27, 0x01	; 1
 64e:	91 f0       	breq	.+36     	; 0x674 <__fixunssfsi+0x4c>
 650:	0e 94 ca 03 	call	0x794	; 0x794 <__fp_zero>
 654:	b1 e0       	ldi	r27, 0x01	; 1
 656:	08 95       	ret
 658:	0c 94 ca 03 	jmp	0x794	; 0x794 <__fp_zero>
 65c:	67 2f       	mov	r22, r23
 65e:	78 2f       	mov	r23, r24
 660:	88 27       	eor	r24, r24
 662:	b8 5f       	subi	r27, 0xF8	; 248
 664:	39 f0       	breq	.+14     	; 0x674 <__fixunssfsi+0x4c>
 666:	b9 3f       	cpi	r27, 0xF9	; 249
 668:	cc f3       	brlt	.-14     	; 0x65c <__fixunssfsi+0x34>
 66a:	86 95       	lsr	r24
 66c:	77 95       	ror	r23
 66e:	67 95       	ror	r22
 670:	b3 95       	inc	r27
 672:	d9 f7       	brne	.-10     	; 0x66a <__fixunssfsi+0x42>
 674:	3e f4       	brtc	.+14     	; 0x684 <__fixunssfsi+0x5c>
 676:	90 95       	com	r25
 678:	80 95       	com	r24
 67a:	70 95       	com	r23
 67c:	61 95       	neg	r22
 67e:	7f 4f       	sbci	r23, 0xFF	; 255
 680:	8f 4f       	sbci	r24, 0xFF	; 255
 682:	9f 4f       	sbci	r25, 0xFF	; 255
 684:	08 95       	ret

00000686 <__floatunsisf>:
 686:	e8 94       	clt
 688:	09 c0       	rjmp	.+18     	; 0x69c <__floatsisf+0x12>

0000068a <__floatsisf>:
 68a:	97 fb       	bst	r25, 7
 68c:	3e f4       	brtc	.+14     	; 0x69c <__floatsisf+0x12>
 68e:	90 95       	com	r25
 690:	80 95       	com	r24
 692:	70 95       	com	r23
 694:	61 95       	neg	r22
 696:	7f 4f       	sbci	r23, 0xFF	; 255
 698:	8f 4f       	sbci	r24, 0xFF	; 255
 69a:	9f 4f       	sbci	r25, 0xFF	; 255
 69c:	99 23       	and	r25, r25
 69e:	a9 f0       	breq	.+42     	; 0x6ca <__floatsisf+0x40>
 6a0:	f9 2f       	mov	r31, r25
 6a2:	96 e9       	ldi	r25, 0x96	; 150
 6a4:	bb 27       	eor	r27, r27
 6a6:	93 95       	inc	r25
 6a8:	f6 95       	lsr	r31
 6aa:	87 95       	ror	r24
 6ac:	77 95       	ror	r23
 6ae:	67 95       	ror	r22
 6b0:	b7 95       	ror	r27
 6b2:	f1 11       	cpse	r31, r1
 6b4:	f8 cf       	rjmp	.-16     	; 0x6a6 <__floatsisf+0x1c>
 6b6:	fa f4       	brpl	.+62     	; 0x6f6 <__floatsisf+0x6c>
 6b8:	bb 0f       	add	r27, r27
 6ba:	11 f4       	brne	.+4      	; 0x6c0 <__floatsisf+0x36>
 6bc:	60 ff       	sbrs	r22, 0
 6be:	1b c0       	rjmp	.+54     	; 0x6f6 <__floatsisf+0x6c>
 6c0:	6f 5f       	subi	r22, 0xFF	; 255
 6c2:	7f 4f       	sbci	r23, 0xFF	; 255
 6c4:	8f 4f       	sbci	r24, 0xFF	; 255
 6c6:	9f 4f       	sbci	r25, 0xFF	; 255
 6c8:	16 c0       	rjmp	.+44     	; 0x6f6 <__floatsisf+0x6c>
 6ca:	88 23       	and	r24, r24
 6cc:	11 f0       	breq	.+4      	; 0x6d2 <__floatsisf+0x48>
 6ce:	96 e9       	ldi	r25, 0x96	; 150
 6d0:	11 c0       	rjmp	.+34     	; 0x6f4 <__floatsisf+0x6a>
 6d2:	77 23       	and	r23, r23
 6d4:	21 f0       	breq	.+8      	; 0x6de <__floatsisf+0x54>
 6d6:	9e e8       	ldi	r25, 0x8E	; 142
 6d8:	87 2f       	mov	r24, r23
 6da:	76 2f       	mov	r23, r22
 6dc:	05 c0       	rjmp	.+10     	; 0x6e8 <__floatsisf+0x5e>
 6de:	66 23       	and	r22, r22
 6e0:	71 f0       	breq	.+28     	; 0x6fe <__floatsisf+0x74>
 6e2:	96 e8       	ldi	r25, 0x86	; 134
 6e4:	86 2f       	mov	r24, r22
 6e6:	70 e0       	ldi	r23, 0x00	; 0
 6e8:	60 e0       	ldi	r22, 0x00	; 0
 6ea:	2a f0       	brmi	.+10     	; 0x6f6 <__floatsisf+0x6c>
 6ec:	9a 95       	dec	r25
 6ee:	66 0f       	add	r22, r22
 6f0:	77 1f       	adc	r23, r23
 6f2:	88 1f       	adc	r24, r24
 6f4:	da f7       	brpl	.-10     	; 0x6ec <__floatsisf+0x62>
 6f6:	88 0f       	add	r24, r24
 6f8:	96 95       	lsr	r25
 6fa:	87 95       	ror	r24
 6fc:	97 f9       	bld	r25, 7
 6fe:	08 95       	ret

00000700 <__fp_inf>:
 700:	97 f9       	bld	r25, 7
 702:	9f 67       	ori	r25, 0x7F	; 127
 704:	80 e8       	ldi	r24, 0x80	; 128
 706:	70 e0       	ldi	r23, 0x00	; 0
 708:	60 e0       	ldi	r22, 0x00	; 0
 70a:	08 95       	ret

0000070c <__fp_nan>:
 70c:	9f ef       	ldi	r25, 0xFF	; 255
 70e:	80 ec       	ldi	r24, 0xC0	; 192
 710:	08 95       	ret

00000712 <__fp_pscA>:
 712:	00 24       	eor	r0, r0
 714:	0a 94       	dec	r0
 716:	16 16       	cp	r1, r22
 718:	17 06       	cpc	r1, r23
 71a:	18 06       	cpc	r1, r24
 71c:	09 06       	cpc	r0, r25
 71e:	08 95       	ret

00000720 <__fp_pscB>:
 720:	00 24       	eor	r0, r0
 722:	0a 94       	dec	r0
 724:	12 16       	cp	r1, r18
 726:	13 06       	cpc	r1, r19
 728:	14 06       	cpc	r1, r20
 72a:	05 06       	cpc	r0, r21
 72c:	08 95       	ret

0000072e <__fp_round>:
 72e:	09 2e       	mov	r0, r25
 730:	03 94       	inc	r0
 732:	00 0c       	add	r0, r0
 734:	11 f4       	brne	.+4      	; 0x73a <__fp_round+0xc>
 736:	88 23       	and	r24, r24
 738:	52 f0       	brmi	.+20     	; 0x74e <__fp_round+0x20>
 73a:	bb 0f       	add	r27, r27
 73c:	40 f4       	brcc	.+16     	; 0x74e <__fp_round+0x20>
 73e:	bf 2b       	or	r27, r31
 740:	11 f4       	brne	.+4      	; 0x746 <__fp_round+0x18>
 742:	60 ff       	sbrs	r22, 0
 744:	04 c0       	rjmp	.+8      	; 0x74e <__fp_round+0x20>
 746:	6f 5f       	subi	r22, 0xFF	; 255
 748:	7f 4f       	sbci	r23, 0xFF	; 255
 74a:	8f 4f       	sbci	r24, 0xFF	; 255
 74c:	9f 4f       	sbci	r25, 0xFF	; 255
 74e:	08 95       	ret

00000750 <__fp_split3>:
 750:	57 fd       	sbrc	r21, 7
 752:	90 58       	subi	r25, 0x80	; 128
 754:	44 0f       	add	r20, r20
 756:	55 1f       	adc	r21, r21
 758:	59 f0       	breq	.+22     	; 0x770 <__fp_splitA+0x10>
 75a:	5f 3f       	cpi	r21, 0xFF	; 255
 75c:	71 f0       	breq	.+28     	; 0x77a <__fp_splitA+0x1a>
 75e:	47 95       	ror	r20

00000760 <__fp_splitA>:
 760:	88 0f       	add	r24, r24
 762:	97 fb       	bst	r25, 7
 764:	99 1f       	adc	r25, r25
 766:	61 f0       	breq	.+24     	; 0x780 <__fp_splitA+0x20>
 768:	9f 3f       	cpi	r25, 0xFF	; 255
 76a:	79 f0       	breq	.+30     	; 0x78a <__fp_splitA+0x2a>
 76c:	87 95       	ror	r24
 76e:	08 95       	ret
 770:	12 16       	cp	r1, r18
 772:	13 06       	cpc	r1, r19
 774:	14 06       	cpc	r1, r20
 776:	55 1f       	adc	r21, r21
 778:	f2 cf       	rjmp	.-28     	; 0x75e <__fp_split3+0xe>
 77a:	46 95       	lsr	r20
 77c:	f1 df       	rcall	.-30     	; 0x760 <__fp_splitA>
 77e:	08 c0       	rjmp	.+16     	; 0x790 <__fp_splitA+0x30>
 780:	16 16       	cp	r1, r22
 782:	17 06       	cpc	r1, r23
 784:	18 06       	cpc	r1, r24
 786:	99 1f       	adc	r25, r25
 788:	f1 cf       	rjmp	.-30     	; 0x76c <__fp_splitA+0xc>
 78a:	86 95       	lsr	r24
 78c:	71 05       	cpc	r23, r1
 78e:	61 05       	cpc	r22, r1
 790:	08 94       	sec
 792:	08 95       	ret

00000794 <__fp_zero>:
 794:	e8 94       	clt

00000796 <__fp_szero>:
 796:	bb 27       	eor	r27, r27
 798:	66 27       	eor	r22, r22
 79a:	77 27       	eor	r23, r23
 79c:	cb 01       	movw	r24, r22
 79e:	97 f9       	bld	r25, 7
 7a0:	08 95       	ret

000007a2 <__mulsf3>:
 7a2:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <__mulsf3x>
 7a6:	0c 94 97 03 	jmp	0x72e	; 0x72e <__fp_round>
 7aa:	0e 94 89 03 	call	0x712	; 0x712 <__fp_pscA>
 7ae:	38 f0       	brcs	.+14     	; 0x7be <__mulsf3+0x1c>
 7b0:	0e 94 90 03 	call	0x720	; 0x720 <__fp_pscB>
 7b4:	20 f0       	brcs	.+8      	; 0x7be <__mulsf3+0x1c>
 7b6:	95 23       	and	r25, r21
 7b8:	11 f0       	breq	.+4      	; 0x7be <__mulsf3+0x1c>
 7ba:	0c 94 80 03 	jmp	0x700	; 0x700 <__fp_inf>
 7be:	0c 94 86 03 	jmp	0x70c	; 0x70c <__fp_nan>
 7c2:	11 24       	eor	r1, r1
 7c4:	0c 94 cb 03 	jmp	0x796	; 0x796 <__fp_szero>

000007c8 <__mulsf3x>:
 7c8:	0e 94 a8 03 	call	0x750	; 0x750 <__fp_split3>
 7cc:	70 f3       	brcs	.-36     	; 0x7aa <__mulsf3+0x8>

000007ce <__mulsf3_pse>:
 7ce:	95 9f       	mul	r25, r21
 7d0:	c1 f3       	breq	.-16     	; 0x7c2 <__mulsf3+0x20>
 7d2:	95 0f       	add	r25, r21
 7d4:	50 e0       	ldi	r21, 0x00	; 0
 7d6:	55 1f       	adc	r21, r21
 7d8:	62 9f       	mul	r22, r18
 7da:	f0 01       	movw	r30, r0
 7dc:	72 9f       	mul	r23, r18
 7de:	bb 27       	eor	r27, r27
 7e0:	f0 0d       	add	r31, r0
 7e2:	b1 1d       	adc	r27, r1
 7e4:	63 9f       	mul	r22, r19
 7e6:	aa 27       	eor	r26, r26
 7e8:	f0 0d       	add	r31, r0
 7ea:	b1 1d       	adc	r27, r1
 7ec:	aa 1f       	adc	r26, r26
 7ee:	64 9f       	mul	r22, r20
 7f0:	66 27       	eor	r22, r22
 7f2:	b0 0d       	add	r27, r0
 7f4:	a1 1d       	adc	r26, r1
 7f6:	66 1f       	adc	r22, r22
 7f8:	82 9f       	mul	r24, r18
 7fa:	22 27       	eor	r18, r18
 7fc:	b0 0d       	add	r27, r0
 7fe:	a1 1d       	adc	r26, r1
 800:	62 1f       	adc	r22, r18
 802:	73 9f       	mul	r23, r19
 804:	b0 0d       	add	r27, r0
 806:	a1 1d       	adc	r26, r1
 808:	62 1f       	adc	r22, r18
 80a:	83 9f       	mul	r24, r19
 80c:	a0 0d       	add	r26, r0
 80e:	61 1d       	adc	r22, r1
 810:	22 1f       	adc	r18, r18
 812:	74 9f       	mul	r23, r20
 814:	33 27       	eor	r19, r19
 816:	a0 0d       	add	r26, r0
 818:	61 1d       	adc	r22, r1
 81a:	23 1f       	adc	r18, r19
 81c:	84 9f       	mul	r24, r20
 81e:	60 0d       	add	r22, r0
 820:	21 1d       	adc	r18, r1
 822:	82 2f       	mov	r24, r18
 824:	76 2f       	mov	r23, r22
 826:	6a 2f       	mov	r22, r26
 828:	11 24       	eor	r1, r1
 82a:	9f 57       	subi	r25, 0x7F	; 127
 82c:	50 40       	sbci	r21, 0x00	; 0
 82e:	9a f0       	brmi	.+38     	; 0x856 <__DATA_REGION_LENGTH__+0x56>
 830:	f1 f0       	breq	.+60     	; 0x86e <__DATA_REGION_LENGTH__+0x6e>
 832:	88 23       	and	r24, r24
 834:	4a f0       	brmi	.+18     	; 0x848 <__DATA_REGION_LENGTH__+0x48>
 836:	ee 0f       	add	r30, r30
 838:	ff 1f       	adc	r31, r31
 83a:	bb 1f       	adc	r27, r27
 83c:	66 1f       	adc	r22, r22
 83e:	77 1f       	adc	r23, r23
 840:	88 1f       	adc	r24, r24
 842:	91 50       	subi	r25, 0x01	; 1
 844:	50 40       	sbci	r21, 0x00	; 0
 846:	a9 f7       	brne	.-22     	; 0x832 <__DATA_REGION_LENGTH__+0x32>
 848:	9e 3f       	cpi	r25, 0xFE	; 254
 84a:	51 05       	cpc	r21, r1
 84c:	80 f0       	brcs	.+32     	; 0x86e <__DATA_REGION_LENGTH__+0x6e>
 84e:	0c 94 80 03 	jmp	0x700	; 0x700 <__fp_inf>
 852:	0c 94 cb 03 	jmp	0x796	; 0x796 <__fp_szero>
 856:	5f 3f       	cpi	r21, 0xFF	; 255
 858:	e4 f3       	brlt	.-8      	; 0x852 <__DATA_REGION_LENGTH__+0x52>
 85a:	98 3e       	cpi	r25, 0xE8	; 232
 85c:	d4 f3       	brlt	.-12     	; 0x852 <__DATA_REGION_LENGTH__+0x52>
 85e:	86 95       	lsr	r24
 860:	77 95       	ror	r23
 862:	67 95       	ror	r22
 864:	b7 95       	ror	r27
 866:	f7 95       	ror	r31
 868:	e7 95       	ror	r30
 86a:	9f 5f       	subi	r25, 0xFF	; 255
 86c:	c1 f7       	brne	.-16     	; 0x85e <__DATA_REGION_LENGTH__+0x5e>
 86e:	fe 2b       	or	r31, r30
 870:	88 0f       	add	r24, r24
 872:	91 1d       	adc	r25, r1
 874:	96 95       	lsr	r25
 876:	87 95       	ror	r24
 878:	97 f9       	bld	r25, 7
 87a:	08 95       	ret

0000087c <__udivmodsi4>:
 87c:	a1 e2       	ldi	r26, 0x21	; 33
 87e:	1a 2e       	mov	r1, r26
 880:	aa 1b       	sub	r26, r26
 882:	bb 1b       	sub	r27, r27
 884:	fd 01       	movw	r30, r26
 886:	0d c0       	rjmp	.+26     	; 0x8a2 <__udivmodsi4_ep>

00000888 <__udivmodsi4_loop>:
 888:	aa 1f       	adc	r26, r26
 88a:	bb 1f       	adc	r27, r27
 88c:	ee 1f       	adc	r30, r30
 88e:	ff 1f       	adc	r31, r31
 890:	a2 17       	cp	r26, r18
 892:	b3 07       	cpc	r27, r19
 894:	e4 07       	cpc	r30, r20
 896:	f5 07       	cpc	r31, r21
 898:	20 f0       	brcs	.+8      	; 0x8a2 <__udivmodsi4_ep>
 89a:	a2 1b       	sub	r26, r18
 89c:	b3 0b       	sbc	r27, r19
 89e:	e4 0b       	sbc	r30, r20
 8a0:	f5 0b       	sbc	r31, r21

000008a2 <__udivmodsi4_ep>:
 8a2:	66 1f       	adc	r22, r22
 8a4:	77 1f       	adc	r23, r23
 8a6:	88 1f       	adc	r24, r24
 8a8:	99 1f       	adc	r25, r25
 8aa:	1a 94       	dec	r1
 8ac:	69 f7       	brne	.-38     	; 0x888 <__udivmodsi4_loop>
 8ae:	60 95       	com	r22
 8b0:	70 95       	com	r23
 8b2:	80 95       	com	r24
 8b4:	90 95       	com	r25
 8b6:	9b 01       	movw	r18, r22
 8b8:	ac 01       	movw	r20, r24
 8ba:	bd 01       	movw	r22, r26
 8bc:	cf 01       	movw	r24, r30
 8be:	08 95       	ret

000008c0 <__itoa_ncheck>:
 8c0:	bb 27       	eor	r27, r27
 8c2:	4a 30       	cpi	r20, 0x0A	; 10
 8c4:	31 f4       	brne	.+12     	; 0x8d2 <__itoa_ncheck+0x12>
 8c6:	99 23       	and	r25, r25
 8c8:	22 f4       	brpl	.+8      	; 0x8d2 <__itoa_ncheck+0x12>
 8ca:	bd e2       	ldi	r27, 0x2D	; 45
 8cc:	90 95       	com	r25
 8ce:	81 95       	neg	r24
 8d0:	9f 4f       	sbci	r25, 0xFF	; 255
 8d2:	0c 94 6c 04 	jmp	0x8d8	; 0x8d8 <__utoa_common>

000008d6 <__utoa_ncheck>:
 8d6:	bb 27       	eor	r27, r27

000008d8 <__utoa_common>:
 8d8:	fb 01       	movw	r30, r22
 8da:	55 27       	eor	r21, r21
 8dc:	aa 27       	eor	r26, r26
 8de:	88 0f       	add	r24, r24
 8e0:	99 1f       	adc	r25, r25
 8e2:	aa 1f       	adc	r26, r26
 8e4:	a4 17       	cp	r26, r20
 8e6:	10 f0       	brcs	.+4      	; 0x8ec <__utoa_common+0x14>
 8e8:	a4 1b       	sub	r26, r20
 8ea:	83 95       	inc	r24
 8ec:	50 51       	subi	r21, 0x10	; 16
 8ee:	b9 f7       	brne	.-18     	; 0x8de <__utoa_common+0x6>
 8f0:	a0 5d       	subi	r26, 0xD0	; 208
 8f2:	aa 33       	cpi	r26, 0x3A	; 58
 8f4:	08 f0       	brcs	.+2      	; 0x8f8 <__utoa_common+0x20>
 8f6:	a9 5d       	subi	r26, 0xD9	; 217
 8f8:	a1 93       	st	Z+, r26
 8fa:	00 97       	sbiw	r24, 0x00	; 0
 8fc:	79 f7       	brne	.-34     	; 0x8dc <__utoa_common+0x4>
 8fe:	b1 11       	cpse	r27, r1
 900:	b1 93       	st	Z+, r27
 902:	11 92       	st	Z+, r1
 904:	cb 01       	movw	r24, r22
 906:	0c 94 85 04 	jmp	0x90a	; 0x90a <strrev>

0000090a <strrev>:
 90a:	dc 01       	movw	r26, r24
 90c:	fc 01       	movw	r30, r24
 90e:	67 2f       	mov	r22, r23
 910:	71 91       	ld	r23, Z+
 912:	77 23       	and	r23, r23
 914:	e1 f7       	brne	.-8      	; 0x90e <strrev+0x4>
 916:	32 97       	sbiw	r30, 0x02	; 2
 918:	04 c0       	rjmp	.+8      	; 0x922 <strrev+0x18>
 91a:	7c 91       	ld	r23, X
 91c:	6d 93       	st	X+, r22
 91e:	70 83       	st	Z, r23
 920:	62 91       	ld	r22, -Z
 922:	ae 17       	cp	r26, r30
 924:	bf 07       	cpc	r27, r31
 926:	c8 f3       	brcs	.-14     	; 0x91a <strrev+0x10>
 928:	08 95       	ret

0000092a <_exit>:
 92a:	f8 94       	cli

0000092c <__stop_program>:
 92c:	ff cf       	rjmp	.-2      	; 0x92c <__stop_program>
