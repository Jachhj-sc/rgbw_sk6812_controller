
SK6812rgbw driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000206  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000192  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800100  00800100  00000206  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000206  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000238  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  00000278  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c64  00000000  00000000  00000308  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008df  00000000  00000000  00000f6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000595  00000000  00000000  0000184b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000154  00000000  00000000  00001de0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004d1  00000000  00000000  00001f34  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003ef  00000000  00000000  00002405  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  000027f4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 66 00 	jmp	0xcc	; 0xcc <__vector_4>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 81 00 	jmp	0x102	; 0x102 <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e9       	ldi	r30, 0x92	; 146
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a5 30       	cpi	r26, 0x05	; 5
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 af 00 	call	0x15e	; 0x15e <main>
  9e:	0c 94 c7 00 	jmp	0x18e	; 0x18e <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <buttons_init>:

volatile sw_statusflag_t buttonflag = {0};

void buttons_init(void){
//initialize buttons
	DDRB |= (1<<PORTB5);
  a6:	25 9a       	sbi	0x04, 5	; 4
	
	DDRC &= ~(BUT0 | BUT1 | BUT2);
  a8:	87 b1       	in	r24, 0x07	; 7
  aa:	88 7f       	andi	r24, 0xF8	; 248
  ac:	87 b9       	out	0x07, r24	; 7
	//enable pullup
	PORTC |= BUT0 | BUT1 | BUT2;
  ae:	88 b1       	in	r24, 0x08	; 8
  b0:	87 60       	ori	r24, 0x07	; 7
  b2:	88 b9       	out	0x08, r24	; 8
	
	//enable interrupt
	PCICR |= PCIE1;
  b4:	e8 e6       	ldi	r30, 0x68	; 104
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	80 81       	ld	r24, Z
  ba:	81 60       	ori	r24, 0x01	; 1
  bc:	80 83       	st	Z, r24
	PCMSK1 |= (1<<PCINT8) | (1<<PCINT9) | (1<<PCINT10);
  be:	ec e6       	ldi	r30, 0x6C	; 108
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	80 81       	ld	r24, Z
  c4:	87 60       	ori	r24, 0x07	; 7
  c6:	80 83       	st	Z, r24
	sei();
  c8:	78 94       	sei
  ca:	08 95       	ret

000000cc <__vector_4>:
	
}

ISR(PCINT1_vect){//button interrupt, and set flag for button
  cc:	1f 92       	push	r1
  ce:	0f 92       	push	r0
  d0:	0f b6       	in	r0, 0x3f	; 63
  d2:	0f 92       	push	r0
  d4:	11 24       	eor	r1, r1
  d6:	8f 93       	push	r24
	 //check which button was pressed.
	if(!((BUT0_PIN & BUT0) == BUT0)){
  d8:	30 99       	sbic	0x06, 0	; 6
  da:	03 c0       	rjmp	.+6      	; 0xe2 <__vector_4+0x16>
		 buttonflag.button0 = 1;//if Button on PINC0 is pressed
  dc:	81 e0       	ldi	r24, 0x01	; 1
  de:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
	if(!((BUT1_PIN & BUT1) == BUT1)){ 
  e2:	31 99       	sbic	0x06, 1	; 6
  e4:	03 c0       	rjmp	.+6      	; 0xec <__vector_4+0x20>
		buttonflag.button1 = 1;
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
	}
	if(!((BUT2_PIN & BUT2) == BUT2)){ 
  ec:	32 99       	sbic	0x06, 2	; 6
  ee:	03 c0       	rjmp	.+6      	; 0xf6 <__vector_4+0x2a>
		buttonflag.button2 = 1;
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
	}
}
  f6:	8f 91       	pop	r24
  f8:	0f 90       	pop	r0
  fa:	0f be       	out	0x3f, r0	; 63
  fc:	0f 90       	pop	r0
  fe:	1f 90       	pop	r1
 100:	18 95       	reti

00000102 <__vector_14>:
#include <avr/interrupt.h>

uint16_t time_ms = 0; //variable for keeping track of time

//interrupt
ISR(TIMER0_COMPA_vect){
 102:	1f 92       	push	r1
 104:	0f 92       	push	r0
 106:	0f b6       	in	r0, 0x3f	; 63
 108:	0f 92       	push	r0
 10a:	11 24       	eor	r1, r1
 10c:	2f 93       	push	r18
 10e:	8f 93       	push	r24
 110:	9f 93       	push	r25
	if (time_ms > 60000){
 112:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <time_ms>
 116:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <time_ms+0x1>
 11a:	81 36       	cpi	r24, 0x61	; 97
 11c:	2a ee       	ldi	r18, 0xEA	; 234
 11e:	92 07       	cpc	r25, r18
 120:	70 f0       	brcs	.+28     	; 0x13e <__vector_14+0x3c>
 122:	81 e0       	ldi	r24, 0x01	; 1
 124:	90 e0       	ldi	r25, 0x00	; 0
		time_ms = 0;
	}
	
		time_ms++;	
 126:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <time_ms+0x1>
 12a:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <time_ms>
}
 12e:	9f 91       	pop	r25
 130:	8f 91       	pop	r24
 132:	2f 91       	pop	r18
 134:	0f 90       	pop	r0
 136:	0f be       	out	0x3f, r0	; 63
 138:	0f 90       	pop	r0
 13a:	1f 90       	pop	r1
 13c:	18 95       	reti
 13e:	01 96       	adiw	r24, 0x01	; 1
 140:	f2 cf       	rjmp	.-28     	; 0x126 <__vector_14+0x24>

00000142 <init_timer0>:

void init_timer0(void){
	TCCR0B |= (1<<CS01)|(1<<CS00);//set prescaler to /64
 142:	85 b5       	in	r24, 0x25	; 37
 144:	83 60       	ori	r24, 0x03	; 3
 146:	85 bd       	out	0x25, r24	; 37
	OCR0A = 235;
 148:	8b ee       	ldi	r24, 0xEB	; 235
 14a:	87 bd       	out	0x27, r24	; 39
	TIMSK0 |= (1<<OCIE0A);//enable ocr0A match interrupt
 14c:	ee e6       	ldi	r30, 0x6E	; 110
 14e:	f0 e0       	ldi	r31, 0x00	; 0
 150:	80 81       	ld	r24, Z
 152:	82 60       	ori	r24, 0x02	; 2
 154:	80 83       	st	Z, r24
	TCCR0A |= (1<<WGM01);//clear timer on ocr0A match
 156:	84 b5       	in	r24, 0x24	; 36
 158:	82 60       	ori	r24, 0x02	; 2
 15a:	84 bd       	out	0x24, r24	; 36
 15c:	08 95       	ret

0000015e <main>:
	COLOR_PURPLE,     
};

int main(void)
{
	init_timer0();
 15e:	0e 94 a1 00 	call	0x142	; 0x142 <init_timer0>
	//setRGBW_ExBounds(0, 36);
	//setRGBW_ExBounds(12,30);
	//setRGBW_Brightness(255);
	//setRGBW_clear();
	//RGBW_send();
	buttons_init();
 162:	0e 94 53 00 	call	0xa6	; 0xa6 <buttons_init>
	//RGBW_send();
	uint16_t hue = 0;
	static	uint8_t	 i	 = 0;
	static  uint8_t  f   = 0;

	sei();//enable interrupts
 166:	78 94       	sei
 168:	0a c0       	rjmp	.+20     	; 0x17e <main+0x20>
	
	if (buttonflag.button0 == 1){
		PORTB |= (1<<PINB5);
		buttonflag.button0 = 0;
	}else{
		PORTB &= ~(1<<PINB5);
 16a:	2d 98       	cbi	0x05, 5	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 16c:	2f ef       	ldi	r18, 0xFF	; 255
 16e:	80 e7       	ldi	r24, 0x70	; 112
 170:	92 e0       	ldi	r25, 0x02	; 2
 172:	21 50       	subi	r18, 0x01	; 1
 174:	80 40       	sbci	r24, 0x00	; 0
 176:	90 40       	sbci	r25, 0x00	; 0
 178:	e1 f7       	brne	.-8      	; 0x172 <main+0x14>
 17a:	00 c0       	rjmp	.+0      	; 0x17c <main+0x1e>
 17c:	00 00       	nop

// 	if ( !(PINC & (1<<0)) ){
// 		buttonflag.button0 = 1;
// 	}
	
	if (buttonflag.button0 == 1){
 17e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 182:	81 30       	cpi	r24, 0x01	; 1
 184:	91 f7       	brne	.-28     	; 0x16a <main+0xc>
		PORTB |= (1<<PINB5);
 186:	2d 9a       	sbi	0x05, 5	; 5
		buttonflag.button0 = 0;
 188:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 18c:	ef cf       	rjmp	.-34     	; 0x16c <main+0xe>

0000018e <_exit>:
 18e:	f8 94       	cli

00000190 <__stop_program>:
 190:	ff cf       	rjmp	.-2      	; 0x190 <__stop_program>
