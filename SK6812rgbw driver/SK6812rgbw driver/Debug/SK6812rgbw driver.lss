
SK6812rgbw driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  00001c42  00001cd6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001c42  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002f2  00800108  00800108  00001cde  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001cde  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001d10  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001b0  00000000  00000000  00001d50  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000031fb  00000000  00000000  00001f00  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f20  00000000  00000000  000050fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000019e3  00000000  00000000  0000601b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000007d8  00000000  00000000  00007a00  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000953  00000000  00000000  000081d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004925  00000000  00000000  00008b2b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000670  00000000  00000000  0000d450  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__ctors_end>
       4:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
       8:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
       c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      10:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__vector_4>
      14:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      18:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      1c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      20:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      24:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      28:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      2c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      30:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      34:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      38:	0c 94 51 0c 	jmp	0x18a2	; 0x18a2 <__vector_14>
      3c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      40:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      44:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      48:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      4c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      50:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      54:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      58:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      5c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      60:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      64:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      68:	36 0d       	add	r19, r6
      6a:	b8 0d       	add	r27, r8
      6c:	aa 0d       	add	r26, r10
      6e:	a2 0d       	add	r26, r2
      70:	94 0d       	add	r25, r4
      72:	0a 0d       	add	r16, r10
      74:	84 0d       	add	r24, r4
      76:	76 0d       	add	r23, r6
      78:	6a 0d       	add	r22, r10
      7a:	62 0d       	add	r22, r2
      7c:	54 0d       	add	r21, r4

0000007e <__ctors_end>:
      7e:	11 24       	eor	r1, r1
      80:	1f be       	out	0x3f, r1	; 63
      82:	cf ef       	ldi	r28, 0xFF	; 255
      84:	d8 e0       	ldi	r29, 0x08	; 8
      86:	de bf       	out	0x3e, r29	; 62
      88:	cd bf       	out	0x3d, r28	; 61

0000008a <__do_copy_data>:
      8a:	11 e0       	ldi	r17, 0x01	; 1
      8c:	a0 e0       	ldi	r26, 0x00	; 0
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	e2 e4       	ldi	r30, 0x42	; 66
      92:	fc e1       	ldi	r31, 0x1C	; 28
      94:	02 c0       	rjmp	.+4      	; 0x9a <__do_copy_data+0x10>
      96:	05 90       	lpm	r0, Z+
      98:	0d 92       	st	X+, r0
      9a:	a8 30       	cpi	r26, 0x08	; 8
      9c:	b1 07       	cpc	r27, r17
      9e:	d9 f7       	brne	.-10     	; 0x96 <__do_copy_data+0xc>

000000a0 <__do_clear_bss>:
      a0:	23 e0       	ldi	r18, 0x03	; 3
      a2:	a8 e0       	ldi	r26, 0x08	; 8
      a4:	b1 e0       	ldi	r27, 0x01	; 1
      a6:	01 c0       	rjmp	.+2      	; 0xaa <.do_clear_bss_start>

000000a8 <.do_clear_bss_loop>:
      a8:	1d 92       	st	X+, r1

000000aa <.do_clear_bss_start>:
      aa:	aa 3f       	cpi	r26, 0xFA	; 250
      ac:	b2 07       	cpc	r27, r18
      ae:	e1 f7       	brne	.-8      	; 0xa8 <.do_clear_bss_loop>
      b0:	0e 94 ab 0c 	call	0x1956	; 0x1956 <main>
      b4:	0c 94 1f 0e 	jmp	0x1c3e	; 0x1c3e <_exit>

000000b8 <__bad_interrupt>:
      b8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000bc <buttons_init>:

volatile sw_statusflag_t buttonflag = {0};

void buttons_init(void){
//initialize buttons
	DDRB |= (1<<PORTB5);
      bc:	25 9a       	sbi	0x04, 5	; 4
	
	DDRC &= ~(BUT0_MASK | BUT1_MASK | BUT2_MASK);
      be:	87 b1       	in	r24, 0x07	; 7
      c0:	88 7f       	andi	r24, 0xF8	; 248
      c2:	87 b9       	out	0x07, r24	; 7
	//enable pullup
	PORTC |= BUT0_MASK | BUT1_MASK | BUT2_MASK;
      c4:	88 b1       	in	r24, 0x08	; 8
      c6:	87 60       	ori	r24, 0x07	; 7
      c8:	88 b9       	out	0x08, r24	; 8
	
	//enable interrupt
	PCICR |= (1<<PCIE1);
      ca:	e8 e6       	ldi	r30, 0x68	; 104
      cc:	f0 e0       	ldi	r31, 0x00	; 0
      ce:	80 81       	ld	r24, Z
      d0:	82 60       	ori	r24, 0x02	; 2
      d2:	80 83       	st	Z, r24
	
	PCMSK1 |= (1<<PCINT8) | (1<<PCINT9) | (1<<PCINT10);
      d4:	ec e6       	ldi	r30, 0x6C	; 108
      d6:	f0 e0       	ldi	r31, 0x00	; 0
      d8:	80 81       	ld	r24, Z
      da:	87 60       	ori	r24, 0x07	; 7
      dc:	80 83       	st	Z, r24
      de:	08 95       	ret

000000e0 <__vector_4>:
}

ISR(PCINT1_vect){//button interrupt, and set flag for button
      e0:	1f 92       	push	r1
      e2:	0f 92       	push	r0
      e4:	0f b6       	in	r0, 0x3f	; 63
      e6:	0f 92       	push	r0
      e8:	11 24       	eor	r1, r1
      ea:	8f 93       	push	r24
	 //check which button was pressed.
	if(!((BUT0_PIN & BUT0_MASK) == BUT0_MASK)){
      ec:	30 99       	sbic	0x06, 0	; 6
      ee:	03 c0       	rjmp	.+6      	; 0xf6 <__vector_4+0x16>
		 buttonflag.button0 = 1;//if Button on PINC0 is pressed
      f0:	81 e0       	ldi	r24, 0x01	; 1
      f2:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__data_end>
	}
	if(!((BUT1_PIN & BUT1_MASK) == BUT1_MASK)){ 
      f6:	31 99       	sbic	0x06, 1	; 6
      f8:	03 c0       	rjmp	.+6      	; 0x100 <__vector_4+0x20>
		buttonflag.button1 = 1;
      fa:	81 e0       	ldi	r24, 0x01	; 1
      fc:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <__data_end+0x1>
	}
	if(!((BUT2_PIN & BUT2_MASK) == BUT2_MASK)){ 
     100:	32 99       	sbic	0x06, 2	; 6
     102:	03 c0       	rjmp	.+6      	; 0x10a <__vector_4+0x2a>
		buttonflag.button2 = 1;
     104:	81 e0       	ldi	r24, 0x01	; 1
     106:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end+0x2>
	}
}
     10a:	8f 91       	pop	r24
     10c:	0f 90       	pop	r0
     10e:	0f be       	out	0x3f, r0	; 63
     110:	0f 90       	pop	r0
     112:	1f 90       	pop	r1
     114:	18 95       	reti

00000116 <setRGBW_ExBounds>:
			b = hue - 510;      //     b = 0 to 254
			} else {              //   Cyan to Blue-1
			g = 1020 - hue;     //     g = 255 to 1
			b = 255;
		}
		} else if(hue < 1530) { // Blue to Red-1
     116:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <exLow+0x1>
     11a:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <exLow>
     11e:	70 93 03 01 	sts	0x0103, r23	; 0x800103 <exHigh+0x1>
     122:	60 93 02 01 	sts	0x0102, r22	; 0x800102 <exHigh>
     126:	08 95       	ret

00000128 <setRGBW_all>:
     128:	4f 92       	push	r4
     12a:	5f 92       	push	r5
     12c:	6f 92       	push	r6
     12e:	7f 92       	push	r7
     130:	8f 92       	push	r8
     132:	9f 92       	push	r9
     134:	af 92       	push	r10
     136:	bf 92       	push	r11
     138:	cf 92       	push	r12
     13a:	df 92       	push	r13
     13c:	ef 92       	push	r14
     13e:	ff 92       	push	r15
     140:	0f 93       	push	r16
     142:	1f 93       	push	r17
     144:	cf 93       	push	r28
     146:	df 93       	push	r29
     148:	00 d0       	rcall	.+0      	; 0x14a <setRGBW_all+0x22>
     14a:	00 d0       	rcall	.+0      	; 0x14c <setRGBW_all+0x24>
     14c:	00 d0       	rcall	.+0      	; 0x14e <setRGBW_all+0x26>
     14e:	cd b7       	in	r28, 0x3d	; 61
     150:	de b7       	in	r29, 0x3e	; 62
     152:	69 83       	std	Y+1, r22	; 0x01
     154:	7a 83       	std	Y+2, r23	; 0x02
     156:	8b 83       	std	Y+3, r24	; 0x03
     158:	9c 83       	std	Y+4, r25	; 0x04
     15a:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <exLow>
     15e:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <exLow+0x1>
     162:	7e 83       	std	Y+6, r23	; 0x06
     164:	6d 83       	std	Y+5, r22	; 0x05
     166:	00 91 02 01 	lds	r16, 0x0102	; 0x800102 <exHigh>
     16a:	10 91 03 01 	lds	r17, 0x0103	; 0x800103 <exHigh+0x1>
     16e:	c0 90 06 01 	lds	r12, 0x0106	; 0x800106 <brightness>
     172:	d1 2c       	mov	r13, r1
     174:	e1 2c       	mov	r14, r1
     176:	f1 2c       	mov	r15, r1
     178:	89 81       	ldd	r24, Y+1	; 0x01
     17a:	9a 81       	ldd	r25, Y+2	; 0x02
     17c:	ab 81       	ldd	r26, Y+3	; 0x03
     17e:	bc 81       	ldd	r27, Y+4	; 0x04
     180:	2b 2f       	mov	r18, r27
     182:	33 27       	eor	r19, r19
     184:	44 27       	eor	r20, r20
     186:	55 27       	eor	r21, r21
     188:	c7 01       	movw	r24, r14
     18a:	b6 01       	movw	r22, r12
     18c:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <__mulsi3>
     190:	41 2c       	mov	r4, r1
     192:	51 2c       	mov	r5, r1
     194:	32 01       	movw	r6, r4
     196:	4a 94       	dec	r4
     198:	a3 01       	movw	r20, r6
     19a:	92 01       	movw	r18, r4
     19c:	0e 94 dd 0d 	call	0x1bba	; 0x1bba <__udivmodsi4>
     1a0:	b2 2e       	mov	r11, r18
     1a2:	aa 24       	eor	r10, r10
     1a4:	99 24       	eor	r9, r9
     1a6:	88 24       	eor	r8, r8
     1a8:	99 81       	ldd	r25, Y+1	; 0x01
     1aa:	a9 2f       	mov	r26, r25
     1ac:	b0 e0       	ldi	r27, 0x00	; 0
     1ae:	a7 01       	movw	r20, r14
     1b0:	96 01       	movw	r18, r12
     1b2:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <__muluhisi3>
     1b6:	a3 01       	movw	r20, r6
     1b8:	92 01       	movw	r18, r4
     1ba:	0e 94 dd 0d 	call	0x1bba	; 0x1bba <__udivmodsi4>
     1be:	82 2a       	or	r8, r18
     1c0:	93 2a       	or	r9, r19
     1c2:	a4 2a       	or	r10, r20
     1c4:	b5 2a       	or	r11, r21
     1c6:	6b 81       	ldd	r22, Y+3	; 0x03
     1c8:	a6 2f       	mov	r26, r22
     1ca:	b0 e0       	ldi	r27, 0x00	; 0
     1cc:	a7 01       	movw	r20, r14
     1ce:	96 01       	movw	r18, r12
     1d0:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <__muluhisi3>
     1d4:	a3 01       	movw	r20, r6
     1d6:	92 01       	movw	r18, r4
     1d8:	0e 94 dd 0d 	call	0x1bba	; 0x1bba <__udivmodsi4>
     1dc:	d9 01       	movw	r26, r18
     1de:	99 27       	eor	r25, r25
     1e0:	88 27       	eor	r24, r24
     1e2:	88 2a       	or	r8, r24
     1e4:	99 2a       	or	r9, r25
     1e6:	aa 2a       	or	r10, r26
     1e8:	bb 2a       	or	r11, r27
     1ea:	7a 81       	ldd	r23, Y+2	; 0x02
     1ec:	a7 2f       	mov	r26, r23
     1ee:	b0 e0       	ldi	r27, 0x00	; 0
     1f0:	a7 01       	movw	r20, r14
     1f2:	96 01       	movw	r18, r12
     1f4:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <__muluhisi3>
     1f8:	a3 01       	movw	r20, r6
     1fa:	92 01       	movw	r18, r4
     1fc:	0e 94 dd 0d 	call	0x1bba	; 0x1bba <__udivmodsi4>
     200:	b4 2f       	mov	r27, r20
     202:	a3 2f       	mov	r26, r19
     204:	92 2f       	mov	r25, r18
     206:	88 27       	eor	r24, r24
     208:	88 2a       	or	r8, r24
     20a:	99 2a       	or	r9, r25
     20c:	aa 2a       	or	r10, r26
     20e:	bb 2a       	or	r11, r27
     210:	4b 2d       	mov	r20, r11
     212:	3a 2d       	mov	r19, r10
     214:	29 2d       	mov	r18, r9
     216:	e6 e2       	ldi	r30, 0x26	; 38
     218:	f1 e0       	ldi	r31, 0x01	; 1
     21a:	80 e0       	ldi	r24, 0x00	; 0
     21c:	90 e0       	ldi	r25, 0x00	; 0
     21e:	09 c0       	rjmp	.+18     	; 0x232 <setRGBW_all+0x10a>
     220:	11 82       	std	Z+1, r1	; 0x01
     222:	10 82       	st	Z, r1
     224:	12 82       	std	Z+2, r1	; 0x02
     226:	13 82       	std	Z+3, r1	; 0x03
     228:	01 96       	adiw	r24, 0x01	; 1
     22a:	34 96       	adiw	r30, 0x04	; 4
     22c:	84 3b       	cpi	r24, 0xB4	; 180
     22e:	91 05       	cpc	r25, r1
     230:	89 f0       	breq	.+34     	; 0x254 <setRGBW_all+0x12c>
     232:	ad 81       	ldd	r26, Y+5	; 0x05
     234:	be 81       	ldd	r27, Y+6	; 0x06
     236:	8a 17       	cp	r24, r26
     238:	9b 07       	cpc	r25, r27
     23a:	18 f0       	brcs	.+6      	; 0x242 <setRGBW_all+0x11a>
     23c:	80 17       	cp	r24, r16
     23e:	91 07       	cpc	r25, r17
     240:	78 f3       	brcs	.-34     	; 0x220 <setRGBW_all+0xf8>
     242:	41 83       	std	Z+1, r20	; 0x01
     244:	30 83       	st	Z, r19
     246:	22 83       	std	Z+2, r18	; 0x02
     248:	83 82       	std	Z+3, r8	; 0x03
     24a:	01 96       	adiw	r24, 0x01	; 1
     24c:	34 96       	adiw	r30, 0x04	; 4
     24e:	84 3b       	cpi	r24, 0xB4	; 180
     250:	91 05       	cpc	r25, r1
     252:	79 f7       	brne	.-34     	; 0x232 <setRGBW_all+0x10a>
     254:	26 96       	adiw	r28, 0x06	; 6
     256:	0f b6       	in	r0, 0x3f	; 63
     258:	f8 94       	cli
     25a:	de bf       	out	0x3e, r29	; 62
     25c:	0f be       	out	0x3f, r0	; 63
     25e:	cd bf       	out	0x3d, r28	; 61
     260:	df 91       	pop	r29
     262:	cf 91       	pop	r28
     264:	1f 91       	pop	r17
     266:	0f 91       	pop	r16
     268:	ff 90       	pop	r15
     26a:	ef 90       	pop	r14
     26c:	df 90       	pop	r13
     26e:	cf 90       	pop	r12
     270:	bf 90       	pop	r11
     272:	af 90       	pop	r10
     274:	9f 90       	pop	r9
     276:	8f 90       	pop	r8
     278:	7f 90       	pop	r7
     27a:	6f 90       	pop	r6
     27c:	5f 90       	pop	r5
     27e:	4f 90       	pop	r4
     280:	08 95       	ret

00000282 <setRGBW_clear>:
     282:	e6 e2       	ldi	r30, 0x26	; 38
     284:	f1 e0       	ldi	r31, 0x01	; 1
     286:	80 e0       	ldi	r24, 0x00	; 0
     288:	90 e0       	ldi	r25, 0x00	; 0
     28a:	11 82       	std	Z+1, r1	; 0x01
     28c:	10 82       	st	Z, r1
     28e:	12 82       	std	Z+2, r1	; 0x02
     290:	13 82       	std	Z+3, r1	; 0x03
     292:	01 96       	adiw	r24, 0x01	; 1
     294:	34 96       	adiw	r30, 0x04	; 4
     296:	84 3b       	cpi	r24, 0xB4	; 180
     298:	91 05       	cpc	r25, r1
     29a:	b9 f7       	brne	.-18     	; 0x28a <setRGBW_clear+0x8>
     29c:	08 95       	ret

0000029e <setRGBW_Brightness>:
     29e:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <brightness>
     2a2:	08 95       	ret

000002a4 <RGBW_send>:
     2a4:	64 eb       	ldi	r22, 0xB4	; 180
     2a6:	70 e0       	ldi	r23, 0x00	; 0
     2a8:	86 e2       	ldi	r24, 0x26	; 38
     2aa:	91 e0       	ldi	r25, 0x01	; 1
     2ac:	0c 94 7f 0c 	jmp	0x18fe	; 0x18fe <ws2812_setleds_rgbw>

000002b0 <color32>:
	uint8_t  s2 = 255 - sat; // 255 to 0
	uint32_t rgb = (((((((r * s1) >> 8) + s2) * v1) & 0xff00) << 8) | (((((g * s1) >> 8) + s2) * v1) & 0xff00) | ( ((((b * s1) >> 8) + s2) * v1) >> 8));
	return ((rgb << 8)| whiteness);
}

uint32_t color32(uint8_t r, uint8_t g, uint8_t b, uint8_t w){
     2b0:	0f 93       	push	r16
     2b2:	1f 93       	push	r17
     2b4:	96 2f       	mov	r25, r22
     2b6:	34 2f       	mov	r19, r20
	uint32_t color_32 = 0;
	color_32 |= ((uint32_t)r<<8*3)|((uint32_t)g<<8*2)|((uint32_t)b<<8)|(w); //pack the rgbw value in a 32 bit value 
	return color_32;
     2b8:	42 2f       	mov	r20, r18
     2ba:	50 e0       	ldi	r21, 0x00	; 0
     2bc:	60 e0       	ldi	r22, 0x00	; 0
     2be:	70 e0       	ldi	r23, 0x00	; 0
     2c0:	53 2b       	or	r21, r19
     2c2:	69 2b       	or	r22, r25
     2c4:	8a 01       	movw	r16, r20
     2c6:	9b 01       	movw	r18, r22
     2c8:	38 2b       	or	r19, r24
     2ca:	c9 01       	movw	r24, r18
     2cc:	b8 01       	movw	r22, r16
}
     2ce:	1f 91       	pop	r17
     2d0:	0f 91       	pop	r16
     2d2:	08 95       	ret

000002d4 <effect_snakeGrow_nb>:
void effect_snakeGrowHue_b(int growSpd, int hueSpd){
	static uint16_t hue = 0;
	effect_snakeGrow_nb(growSpd, ColorHSV(hue+=hueSpd, 255, 255, 0));
}

void effect_snakeGrow_nb(int growSpd, uint32_t color){
     2d4:	4f 92       	push	r4
     2d6:	5f 92       	push	r5
     2d8:	6f 92       	push	r6
     2da:	7f 92       	push	r7
     2dc:	8f 92       	push	r8
     2de:	9f 92       	push	r9
     2e0:	af 92       	push	r10
     2e2:	bf 92       	push	r11
     2e4:	cf 92       	push	r12
     2e6:	df 92       	push	r13
     2e8:	ef 92       	push	r14
     2ea:	ff 92       	push	r15
     2ec:	cf 93       	push	r28
     2ee:	df 93       	push	r29
     2f0:	6a 01       	movw	r12, r20
     2f2:	7b 01       	movw	r14, r22
	static int len = 1;
	static int f = 0;

	if (len < LEDpixelcount){
     2f4:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     2f8:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     2fc:	24 3b       	cpi	r18, 0xB4	; 180
     2fe:	31 05       	cpc	r19, r1
     300:	94 f4       	brge	.+36     	; 0x326 <effect_snakeGrow_nb+0x52>
		if (f < LEDpixelcount){
     302:	40 91 15 01 	lds	r20, 0x0115	; 0x800115 <f.2044>
     306:	50 91 16 01 	lds	r21, 0x0116	; 0x800116 <f.2044+0x1>
     30a:	44 3b       	cpi	r20, 0xB4	; 180
     30c:	51 05       	cpc	r21, r1
     30e:	04 f1       	brlt	.+64     	; 0x350 <effect_snakeGrow_nb+0x7c>
			effect_snake_nb(len, color);
			f++;
		}
		else{
			len+=growSpd;
     310:	82 0f       	add	r24, r18
     312:	93 1f       	adc	r25, r19
     314:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     318:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			f = 0;
     31c:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <f.2044+0x1>
     320:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <f.2044>
     324:	06 c0       	rjmp	.+12     	; 0x332 <effect_snakeGrow_nb+0x5e>
		}
		
		}else{
		len = 1;
     326:	81 e0       	ldi	r24, 0x01	; 1
     328:	90 e0       	ldi	r25, 0x00	; 0
     32a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     32e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	}

}
     332:	df 91       	pop	r29
     334:	cf 91       	pop	r28
     336:	ff 90       	pop	r15
     338:	ef 90       	pop	r14
     33a:	df 90       	pop	r13
     33c:	cf 90       	pop	r12
     33e:	bf 90       	pop	r11
     340:	af 90       	pop	r10
     342:	9f 90       	pop	r9
     344:	8f 90       	pop	r8
     346:	7f 90       	pop	r7
     348:	6f 90       	pop	r6
     34a:	5f 90       	pop	r5
     34c:	4f 90       	pop	r4
     34e:	08 95       	ret
	static int head = 0;
	static int tail = 0;
	static int8_t state = 0;
	static int prevlen;

	if (state == 0)
     350:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <state.2063>
     354:	81 11       	cpse	r24, r1
     356:	b6 c0       	rjmp	.+364    	; 0x4c4 <__EEPROM_REGION_LENGTH__+0xc4>
	{
		tail = -length;
     358:	88 27       	eor	r24, r24
     35a:	99 27       	eor	r25, r25
     35c:	82 1b       	sub	r24, r18
     35e:	93 0b       	sbc	r25, r19
		prevlen = length;
     360:	30 93 11 01 	sts	0x0111, r19	; 0x800111 <prevlen.2064+0x1>
     364:	20 93 10 01 	sts	0x0110, r18	; 0x800110 <prevlen.2064>
		state++;
     368:	21 e0       	ldi	r18, 0x01	; 1
     36a:	20 93 14 01 	sts	0x0114, r18	; 0x800114 <state.2063>
     36e:	c0 91 0e 01 	lds	r28, 0x010E	; 0x80010e <head.2061>
     372:	d0 91 0f 01 	lds	r29, 0x010F	; 0x80010f <head.2061+0x1>
uint16_t exLow = -1;
uint16_t exHigh = -1;

void setRGBW_pixel(uint16_t pixel, uint32_t color){

	if (pixel < exLow || pixel >= exHigh)
     376:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <exLow>
     37a:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <exLow+0x1>
	}else if(prevlen != length && head == prevlen){//make the snake longer when the snake is as long as the previous length and at start position
		tail = head - length;
		prevlen = length;
	}
	
	if(tail >= 0){
     37e:	97 fd       	sbrc	r25, 7
     380:	0b c0       	rjmp	.+22     	; 0x398 <effect_snakeGrow_nb+0xc4>
void setRGBW_pixel(uint16_t pixel, uint32_t color){

	if (pixel < exLow || pixel >= exHigh)
	{
		calcBrightness(&color, brightness);
		led[pixel].r = (uint8_t)((color>>8*3)	& 0x000000FF);
     382:	fc 01       	movw	r30, r24
     384:	ee 0f       	add	r30, r30
     386:	ff 1f       	adc	r31, r31
     388:	ee 0f       	add	r30, r30
     38a:	ff 1f       	adc	r31, r31
     38c:	ea 5d       	subi	r30, 0xDA	; 218
     38e:	fe 4f       	sbci	r31, 0xFE	; 254
		led[pixel].g = (uint8_t)((color>>8*2)	& 0x000000FF);
		led[pixel].b = (uint8_t)((color>>8*1)	& 0x000000FF);
		led[pixel].w = (uint8_t)( color			& 0x000000FF);
	}else{
		led[pixel].r = 0;
     390:	11 82       	std	Z+1, r1	; 0x01
		led[pixel].g = 0;
     392:	10 82       	st	Z, r1
		led[pixel].b = 0;
     394:	12 82       	std	Z+2, r1	; 0x02
		led[pixel].w = 0;
     396:	13 82       	std	Z+3, r1	; 0x03
	}
	
	if(tail >= 0){
	setRGBW_pixel(tail, 0);
	}
	tail++;
     398:	01 96       	adiw	r24, 0x01	; 1
	if(tail >= LEDpixelcount){//loop for tail
     39a:	84 3b       	cpi	r24, 0xB4	; 180
     39c:	91 05       	cpc	r25, r1
     39e:	0c f0       	brlt	.+2      	; 0x3a2 <effect_snakeGrow_nb+0xce>
     3a0:	8c c0       	rjmp	.+280    	; 0x4ba <__EEPROM_REGION_LENGTH__+0xba>
	}
	
	if(tail >= 0){
	setRGBW_pixel(tail, 0);
	}
	tail++;
     3a2:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <tail.2062+0x1>
     3a6:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <tail.2062>
uint16_t exLow = -1;
uint16_t exHigh = -1;

void setRGBW_pixel(uint16_t pixel, uint32_t color){

	if (pixel < exLow || pixel >= exHigh)
     3aa:	c2 17       	cp	r28, r18
     3ac:	d3 07       	cpc	r29, r19
     3ae:	58 f1       	brcs	.+86     	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
     3b0:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <exHigh>
     3b4:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <exHigh+0x1>
     3b8:	c8 17       	cp	r28, r24
     3ba:	d9 07       	cpc	r29, r25
     3bc:	20 f5       	brcc	.+72     	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
		led[pixel].r = (uint8_t)((color>>8*3)	& 0x000000FF);
		led[pixel].g = (uint8_t)((color>>8*2)	& 0x000000FF);
		led[pixel].b = (uint8_t)((color>>8*1)	& 0x000000FF);
		led[pixel].w = (uint8_t)( color			& 0x000000FF);
	}else{
		led[pixel].r = 0;
     3be:	fe 01       	movw	r30, r28
     3c0:	ee 0f       	add	r30, r30
     3c2:	ff 1f       	adc	r31, r31
     3c4:	ee 0f       	add	r30, r30
     3c6:	ff 1f       	adc	r31, r31
     3c8:	ea 5d       	subi	r30, 0xDA	; 218
     3ca:	fe 4f       	sbci	r31, 0xFE	; 254
     3cc:	11 82       	std	Z+1, r1	; 0x01
		led[pixel].g = 0;
     3ce:	10 82       	st	Z, r1
		led[pixel].b = 0;
     3d0:	12 82       	std	Z+2, r1	; 0x02
		led[pixel].w = 0;
     3d2:	13 82       	std	Z+3, r1	; 0x03
		tail = 0;
	}
	
	setRGBW_pixel(head, color);
	
	head++;
     3d4:	21 96       	adiw	r28, 0x01	; 1
	if(head >= LEDpixelcount){//loop for head
     3d6:	c4 3b       	cpi	r28, 0xB4	; 180
     3d8:	d1 05       	cpc	r29, r1
     3da:	0c f4       	brge	.+2      	; 0x3de <effect_snakeGrow_nb+0x10a>
     3dc:	86 c0       	rjmp	.+268    	; 0x4ea <__EEPROM_REGION_LENGTH__+0xea>
		head = 0;
     3de:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <head.2061+0x1>
     3e2:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <head.2061>

	*color = colorb;//update the color with the new brightness value calculated
}

void RGBW_send(){
		ws2812_setleds_rgbw(led, LEDpixelcount);//send the frame with size of pixelcount to update the strip
     3e6:	64 eb       	ldi	r22, 0xB4	; 180
     3e8:	70 e0       	ldi	r23, 0x00	; 0
     3ea:	86 e2       	ldi	r24, 0x26	; 38
     3ec:	91 e0       	ldi	r25, 0x01	; 1
     3ee:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <ws2812_setleds_rgbw>
	static int f = 0;

	if (len < LEDpixelcount){
		if (f < LEDpixelcount){
			effect_snake_nb(len, color);
			f++;
     3f2:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <f.2044>
     3f6:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <f.2044+0x1>
     3fa:	01 96       	adiw	r24, 0x01	; 1
     3fc:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <f.2044+0x1>
     400:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <f.2044>
     404:	96 cf       	rjmp	.-212    	; 0x332 <effect_snakeGrow_nb+0x5e>

void calcBrightness(uint32_t *color, uint8_t _brightness){
	uint32_t buf = 0;
	uint32_t colorb = 0;

	buf = (((*color>>8*3)	& 0x000000FF) * _brightness) / 255;
     406:	80 90 06 01 	lds	r8, 0x0106	; 0x800106 <brightness>
     40a:	91 2c       	mov	r9, r1
     40c:	a1 2c       	mov	r10, r1
     40e:	b1 2c       	mov	r11, r1

	buf = (((*color>>8*1)	& 0x000000FF) * _brightness) / 255;
	colorb |= (buf<<8*1);

	buf = (( *color			& 0x000000FF) * _brightness) / 255;
	colorb |= (buf);
     410:	2f 2d       	mov	r18, r15
     412:	33 27       	eor	r19, r19
     414:	44 27       	eor	r20, r20
     416:	55 27       	eor	r21, r21
     418:	c5 01       	movw	r24, r10
     41a:	b4 01       	movw	r22, r8
     41c:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <__mulsi3>
     420:	2f ef       	ldi	r18, 0xFF	; 255
     422:	30 e0       	ldi	r19, 0x00	; 0
     424:	40 e0       	ldi	r20, 0x00	; 0
     426:	50 e0       	ldi	r21, 0x00	; 0
     428:	0e 94 dd 0d 	call	0x1bba	; 0x1bba <__udivmodsi4>
     42c:	72 2e       	mov	r7, r18
     42e:	66 24       	eor	r6, r6
     430:	55 24       	eor	r5, r5
     432:	44 24       	eor	r4, r4
     434:	ac 2d       	mov	r26, r12
     436:	b0 e0       	ldi	r27, 0x00	; 0
     438:	a5 01       	movw	r20, r10
     43a:	94 01       	movw	r18, r8
     43c:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <__muluhisi3>
     440:	2f ef       	ldi	r18, 0xFF	; 255
     442:	30 e0       	ldi	r19, 0x00	; 0
     444:	40 e0       	ldi	r20, 0x00	; 0
     446:	50 e0       	ldi	r21, 0x00	; 0
     448:	0e 94 dd 0d 	call	0x1bba	; 0x1bba <__udivmodsi4>
     44c:	42 2a       	or	r4, r18
     44e:	53 2a       	or	r5, r19
     450:	64 2a       	or	r6, r20
     452:	75 2a       	or	r7, r21
     454:	ae 2d       	mov	r26, r14
     456:	b0 e0       	ldi	r27, 0x00	; 0
     458:	a5 01       	movw	r20, r10
     45a:	94 01       	movw	r18, r8
     45c:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <__muluhisi3>
     460:	2f ef       	ldi	r18, 0xFF	; 255
     462:	30 e0       	ldi	r19, 0x00	; 0
     464:	40 e0       	ldi	r20, 0x00	; 0
     466:	50 e0       	ldi	r21, 0x00	; 0
     468:	0e 94 dd 0d 	call	0x1bba	; 0x1bba <__udivmodsi4>
     46c:	d9 01       	movw	r26, r18
     46e:	99 27       	eor	r25, r25
     470:	88 27       	eor	r24, r24
     472:	48 2a       	or	r4, r24
     474:	59 2a       	or	r5, r25
     476:	6a 2a       	or	r6, r26
     478:	7b 2a       	or	r7, r27
     47a:	ad 2d       	mov	r26, r13
     47c:	b0 e0       	ldi	r27, 0x00	; 0
     47e:	a5 01       	movw	r20, r10
     480:	94 01       	movw	r18, r8
     482:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <__muluhisi3>
     486:	2f ef       	ldi	r18, 0xFF	; 255
     488:	30 e0       	ldi	r19, 0x00	; 0
     48a:	40 e0       	ldi	r20, 0x00	; 0
     48c:	50 e0       	ldi	r21, 0x00	; 0
     48e:	0e 94 dd 0d 	call	0x1bba	; 0x1bba <__udivmodsi4>
     492:	b4 2f       	mov	r27, r20
     494:	a3 2f       	mov	r26, r19
     496:	92 2f       	mov	r25, r18
     498:	88 27       	eor	r24, r24
     49a:	48 2a       	or	r4, r24
     49c:	59 2a       	or	r5, r25
     49e:	6a 2a       	or	r6, r26
     4a0:	7b 2a       	or	r7, r27
void setRGBW_pixel(uint16_t pixel, uint32_t color){

	if (pixel < exLow || pixel >= exHigh)
	{
		calcBrightness(&color, brightness);
		led[pixel].r = (uint8_t)((color>>8*3)	& 0x000000FF);
     4a2:	fe 01       	movw	r30, r28
     4a4:	ee 0f       	add	r30, r30
     4a6:	ff 1f       	adc	r31, r31
     4a8:	ee 0f       	add	r30, r30
     4aa:	ff 1f       	adc	r31, r31
     4ac:	ea 5d       	subi	r30, 0xDA	; 218
     4ae:	fe 4f       	sbci	r31, 0xFE	; 254
     4b0:	71 82       	std	Z+1, r7	; 0x01
		led[pixel].g = (uint8_t)((color>>8*2)	& 0x000000FF);
     4b2:	60 82       	st	Z, r6
		led[pixel].b = (uint8_t)((color>>8*1)	& 0x000000FF);
     4b4:	52 82       	std	Z+2, r5	; 0x02
		led[pixel].w = (uint8_t)( color			& 0x000000FF);
     4b6:	43 82       	std	Z+3, r4	; 0x03
     4b8:	8d cf       	rjmp	.-230    	; 0x3d4 <effect_snakeGrow_nb+0x100>
	if(tail >= 0){
	setRGBW_pixel(tail, 0);
	}
	tail++;
	if(tail >= LEDpixelcount){//loop for tail
		tail = 0;
     4ba:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <tail.2062+0x1>
     4be:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <tail.2062>
     4c2:	73 cf       	rjmp	.-282    	; 0x3aa <effect_snakeGrow_nb+0xd6>
	if (state == 0)
	{
		tail = -length;
		prevlen = length;
		state++;
	}else if(prevlen != length && head == prevlen){//make the snake longer when the snake is as long as the previous length and at start position
     4c4:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <prevlen.2064>
     4c8:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <prevlen.2064+0x1>
     4cc:	c0 91 0e 01 	lds	r28, 0x010E	; 0x80010e <head.2061>
     4d0:	d0 91 0f 01 	lds	r29, 0x010F	; 0x80010f <head.2061+0x1>
     4d4:	28 17       	cp	r18, r24
     4d6:	39 07       	cpc	r19, r25
     4d8:	19 f0       	breq	.+6      	; 0x4e0 <__EEPROM_REGION_LENGTH__+0xe0>
     4da:	8c 17       	cp	r24, r28
     4dc:	9d 07       	cpc	r25, r29
     4de:	51 f0       	breq	.+20     	; 0x4f4 <__EEPROM_REGION_LENGTH__+0xf4>
     4e0:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <tail.2062>
     4e4:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <tail.2062+0x1>
     4e8:	46 cf       	rjmp	.-372    	; 0x376 <effect_snakeGrow_nb+0xa2>
		tail = 0;
	}
	
	setRGBW_pixel(head, color);
	
	head++;
     4ea:	d0 93 0f 01 	sts	0x010F, r29	; 0x80010f <head.2061+0x1>
     4ee:	c0 93 0e 01 	sts	0x010E, r28	; 0x80010e <head.2061>
     4f2:	79 cf       	rjmp	.-270    	; 0x3e6 <effect_snakeGrow_nb+0x112>
	{
		tail = -length;
		prevlen = length;
		state++;
	}else if(prevlen != length && head == prevlen){//make the snake longer when the snake is as long as the previous length and at start position
		tail = head - length;
     4f4:	ce 01       	movw	r24, r28
     4f6:	82 1b       	sub	r24, r18
     4f8:	93 0b       	sbc	r25, r19
		prevlen = length;
     4fa:	30 93 11 01 	sts	0x0111, r19	; 0x800111 <prevlen.2064+0x1>
     4fe:	20 93 10 01 	sts	0x0110, r18	; 0x800110 <prevlen.2064>
     502:	39 cf       	rjmp	.-398    	; 0x376 <effect_snakeGrow_nb+0xa2>

00000504 <effect_snakeGrow_b>:
		len = 1;
	}

}

void effect_snakeGrow_b(int growSpd, uint32_t color){
     504:	2f 92       	push	r2
     506:	3f 92       	push	r3
     508:	4f 92       	push	r4
     50a:	5f 92       	push	r5
     50c:	6f 92       	push	r6
     50e:	7f 92       	push	r7
     510:	8f 92       	push	r8
     512:	9f 92       	push	r9
     514:	af 92       	push	r10
     516:	bf 92       	push	r11
     518:	cf 92       	push	r12
     51a:	df 92       	push	r13
     51c:	ef 92       	push	r14
     51e:	ff 92       	push	r15
     520:	0f 93       	push	r16
     522:	1f 93       	push	r17
     524:	cf 93       	push	r28
     526:	df 93       	push	r29
     528:	cd b7       	in	r28, 0x3d	; 61
     52a:	de b7       	in	r29, 0x3e	; 62
     52c:	66 97       	sbiw	r28, 0x16	; 22
     52e:	0f b6       	in	r0, 0x3f	; 63
     530:	f8 94       	cli
     532:	de bf       	out	0x3e, r29	; 62
     534:	0f be       	out	0x3f, r0	; 63
     536:	cd bf       	out	0x3d, r28	; 61
     538:	9c 8b       	std	Y+20, r25	; 0x14
     53a:	8b 8b       	std	Y+19, r24	; 0x13

void calcBrightness(uint32_t *color, uint8_t _brightness){
	uint32_t buf = 0;
	uint32_t colorb = 0;

	buf = (((*color>>8*3)	& 0x000000FF) * _brightness) / 255;
     53c:	87 2f       	mov	r24, r23
     53e:	99 27       	eor	r25, r25
     540:	aa 27       	eor	r26, r26
     542:	bb 27       	eor	r27, r27
     544:	8b 83       	std	Y+3, r24	; 0x03
     546:	9c 83       	std	Y+4, r25	; 0x04
     548:	ad 83       	std	Y+5, r26	; 0x05
     54a:	be 83       	std	Y+6, r27	; 0x06
	colorb |= (buf<<8*3);

	buf = (((*color>>8*2)	& 0x000000FF) * _brightness) / 255;
     54c:	86 2f       	mov	r24, r22
     54e:	90 e0       	ldi	r25, 0x00	; 0
     550:	a0 e0       	ldi	r26, 0x00	; 0
     552:	b0 e0       	ldi	r27, 0x00	; 0
     554:	8f 83       	std	Y+7, r24	; 0x07
     556:	98 87       	std	Y+8, r25	; 0x08
     558:	a9 87       	std	Y+9, r26	; 0x09
     55a:	ba 87       	std	Y+10, r27	; 0x0a
	colorb |= (buf<<8*2);

	buf = (((*color>>8*1)	& 0x000000FF) * _brightness) / 255;
     55c:	85 2f       	mov	r24, r21
     55e:	90 e0       	ldi	r25, 0x00	; 0
     560:	a0 e0       	ldi	r26, 0x00	; 0
     562:	b0 e0       	ldi	r27, 0x00	; 0
     564:	8b 87       	std	Y+11, r24	; 0x0b
     566:	9c 87       	std	Y+12, r25	; 0x0c
     568:	ad 87       	std	Y+13, r26	; 0x0d
     56a:	be 87       	std	Y+14, r27	; 0x0e
     56c:	af ef       	ldi	r26, 0xFF	; 255
     56e:	bf ef       	ldi	r27, 0xFF	; 255
     570:	ba 83       	std	Y+2, r27	; 0x02
     572:	a9 83       	std	Y+1, r26	; 0x01
	}

}

void effect_snakeGrow_b(int growSpd, uint32_t color){
	for(int len = 1; len < LEDpixelcount; len+=growSpd){
     574:	22 24       	eor	r2, r2
     576:	23 94       	inc	r2
     578:	31 2c       	mov	r3, r1

	buf = (((*color>>8*1)	& 0x000000FF) * _brightness) / 255;
	colorb |= (buf<<8*1);

	buf = (( *color			& 0x000000FF) * _brightness) / 255;
	colorb |= (buf);
     57a:	81 2c       	mov	r8, r1
     57c:	91 2c       	mov	r9, r1
     57e:	54 01       	movw	r10, r8
     580:	8a 94       	dec	r8
     582:	db 01       	movw	r26, r22
     584:	ca 01       	movw	r24, r20
     586:	99 27       	eor	r25, r25
     588:	aa 27       	eor	r26, r26
     58a:	bb 27       	eor	r27, r27
     58c:	8f 87       	std	Y+15, r24	; 0x0f
     58e:	98 8b       	std	Y+16, r25	; 0x10
     590:	a9 8b       	std	Y+17, r26	; 0x11
     592:	ba 8b       	std	Y+18, r27	; 0x12
		len = 1;
	}

}

void effect_snakeGrow_b(int growSpd, uint32_t color){
     594:	04 eb       	ldi	r16, 0xB4	; 180
     596:	10 e0       	ldi	r17, 0x00	; 0
     598:	59 c0       	rjmp	.+178    	; 0x64c <effect_snakeGrow_b+0x148>
	static int8_t state = 0;
	static int prevlen;

	if (state == 0)
	{
		tail = -length;
     59a:	89 81       	ldd	r24, Y+1	; 0x01
     59c:	9a 81       	ldd	r25, Y+2	; 0x02
		prevlen = length;
     59e:	30 92 11 01 	sts	0x0111, r3	; 0x800111 <prevlen.2064+0x1>
     5a2:	20 92 10 01 	sts	0x0110, r2	; 0x800110 <prevlen.2064>
		state++;
     5a6:	a1 e0       	ldi	r26, 0x01	; 1
     5a8:	a0 93 14 01 	sts	0x0114, r26	; 0x800114 <state.2063>
     5ac:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <head.2061>
     5b0:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <head.2061+0x1>
     5b4:	3e 8b       	std	Y+22, r19	; 0x16
     5b6:	2d 8b       	std	Y+21, r18	; 0x15
uint16_t exLow = -1;
uint16_t exHigh = -1;

void setRGBW_pixel(uint16_t pixel, uint32_t color){

	if (pixel < exLow || pixel >= exHigh)
     5b8:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <exLow>
     5bc:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <exLow+0x1>
	}else if(prevlen != length && head == prevlen){//make the snake longer when the snake is as long as the previous length and at start position
		tail = head - length;
		prevlen = length;
	}
	
	if(tail >= 0){
     5c0:	97 fd       	sbrc	r25, 7
     5c2:	0b c0       	rjmp	.+22     	; 0x5da <effect_snakeGrow_b+0xd6>
void setRGBW_pixel(uint16_t pixel, uint32_t color){

	if (pixel < exLow || pixel >= exHigh)
	{
		calcBrightness(&color, brightness);
		led[pixel].r = (uint8_t)((color>>8*3)	& 0x000000FF);
     5c4:	fc 01       	movw	r30, r24
     5c6:	ee 0f       	add	r30, r30
     5c8:	ff 1f       	adc	r31, r31
     5ca:	ee 0f       	add	r30, r30
     5cc:	ff 1f       	adc	r31, r31
     5ce:	ea 5d       	subi	r30, 0xDA	; 218
     5d0:	fe 4f       	sbci	r31, 0xFE	; 254
		led[pixel].g = (uint8_t)((color>>8*2)	& 0x000000FF);
		led[pixel].b = (uint8_t)((color>>8*1)	& 0x000000FF);
		led[pixel].w = (uint8_t)( color			& 0x000000FF);
	}else{
		led[pixel].r = 0;
     5d2:	11 82       	std	Z+1, r1	; 0x01
		led[pixel].g = 0;
     5d4:	10 82       	st	Z, r1
		led[pixel].b = 0;
     5d6:	12 82       	std	Z+2, r1	; 0x02
		led[pixel].w = 0;
     5d8:	13 82       	std	Z+3, r1	; 0x03
	}
	
	if(tail >= 0){
	setRGBW_pixel(tail, 0);
	}
	tail++;
     5da:	01 96       	adiw	r24, 0x01	; 1
	if(tail >= LEDpixelcount){//loop for tail
     5dc:	84 3b       	cpi	r24, 0xB4	; 180
     5de:	91 05       	cpc	r25, r1
     5e0:	0c f0       	brlt	.+2      	; 0x5e4 <effect_snakeGrow_b+0xe0>
     5e2:	b5 c0       	rjmp	.+362    	; 0x74e <effect_snakeGrow_b+0x24a>
	}
	
	if(tail >= 0){
	setRGBW_pixel(tail, 0);
	}
	tail++;
     5e4:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <tail.2062+0x1>
     5e8:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <tail.2062>
uint16_t exLow = -1;
uint16_t exHigh = -1;

void setRGBW_pixel(uint16_t pixel, uint32_t color){

	if (pixel < exLow || pixel >= exHigh)
     5ec:	8d 89       	ldd	r24, Y+21	; 0x15
     5ee:	9e 89       	ldd	r25, Y+22	; 0x16
     5f0:	82 17       	cp	r24, r18
     5f2:	93 07       	cpc	r25, r19
     5f4:	08 f4       	brcc	.+2      	; 0x5f8 <effect_snakeGrow_b+0xf4>
     5f6:	46 c0       	rjmp	.+140    	; 0x684 <effect_snakeGrow_b+0x180>
     5f8:	dc 01       	movw	r26, r24
     5fa:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <exHigh>
     5fe:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <exHigh+0x1>
     602:	a8 17       	cp	r26, r24
     604:	b9 07       	cpc	r27, r25
     606:	08 f0       	brcs	.+2      	; 0x60a <effect_snakeGrow_b+0x106>
     608:	3d c0       	rjmp	.+122    	; 0x684 <effect_snakeGrow_b+0x180>
     60a:	fd 01       	movw	r30, r26
		led[pixel].r = (uint8_t)((color>>8*3)	& 0x000000FF);
		led[pixel].g = (uint8_t)((color>>8*2)	& 0x000000FF);
		led[pixel].b = (uint8_t)((color>>8*1)	& 0x000000FF);
		led[pixel].w = (uint8_t)( color			& 0x000000FF);
	}else{
		led[pixel].r = 0;
     60c:	ee 0f       	add	r30, r30
     60e:	ff 1f       	adc	r31, r31
     610:	ee 0f       	add	r30, r30
     612:	ff 1f       	adc	r31, r31
     614:	ea 5d       	subi	r30, 0xDA	; 218
     616:	fe 4f       	sbci	r31, 0xFE	; 254
     618:	11 82       	std	Z+1, r1	; 0x01
		led[pixel].g = 0;
     61a:	10 82       	st	Z, r1
		led[pixel].b = 0;
     61c:	12 82       	std	Z+2, r1	; 0x02
		led[pixel].w = 0;
     61e:	13 82       	std	Z+3, r1	; 0x03
		tail = 0;
	}
	
	setRGBW_pixel(head, color);
	
	head++;
     620:	2d 89       	ldd	r18, Y+21	; 0x15
     622:	3e 89       	ldd	r19, Y+22	; 0x16
     624:	2f 5f       	subi	r18, 0xFF	; 255
     626:	3f 4f       	sbci	r19, 0xFF	; 255
	if(head >= LEDpixelcount){//loop for head
     628:	24 3b       	cpi	r18, 0xB4	; 180
     62a:	31 05       	cpc	r19, r1
     62c:	0c f4       	brge	.+2      	; 0x630 <effect_snakeGrow_b+0x12c>
     62e:	8a c0       	rjmp	.+276    	; 0x744 <effect_snakeGrow_b+0x240>
		head = 0;
     630:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <head.2061+0x1>
     634:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <head.2061>

	*color = colorb;//update the color with the new brightness value calculated
}

void RGBW_send(){
		ws2812_setleds_rgbw(led, LEDpixelcount);//send the frame with size of pixelcount to update the strip
     638:	64 eb       	ldi	r22, 0xB4	; 180
     63a:	70 e0       	ldi	r23, 0x00	; 0
     63c:	86 e2       	ldi	r24, 0x26	; 38
     63e:	91 e0       	ldi	r25, 0x01	; 1
     640:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <ws2812_setleds_rgbw>
     644:	01 50       	subi	r16, 0x01	; 1
     646:	11 09       	sbc	r17, r1

}

void effect_snakeGrow_b(int growSpd, uint32_t color){
	for(int len = 1; len < LEDpixelcount; len+=growSpd){
		for (int f = 0; f < LEDpixelcount; f++){//finish full animation frame
     648:	09 f4       	brne	.+2      	; 0x64c <effect_snakeGrow_b+0x148>
     64a:	99 c0       	rjmp	.+306    	; 0x77e <effect_snakeGrow_b+0x27a>
	static int head = 0;
	static int tail = 0;
	static int8_t state = 0;
	static int prevlen;

	if (state == 0)
     64c:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <state.2063>
     650:	88 23       	and	r24, r24
     652:	09 f4       	brne	.+2      	; 0x656 <effect_snakeGrow_b+0x152>
     654:	a2 cf       	rjmp	.-188    	; 0x59a <effect_snakeGrow_b+0x96>
	{
		tail = -length;
		prevlen = length;
		state++;
	}else if(prevlen != length && head == prevlen){//make the snake longer when the snake is as long as the previous length and at start position
     656:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <prevlen.2064>
     65a:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <prevlen.2064+0x1>
     65e:	82 15       	cp	r24, r2
     660:	93 05       	cpc	r25, r3
     662:	09 f4       	brne	.+2      	; 0x666 <effect_snakeGrow_b+0x162>
     664:	79 c0       	rjmp	.+242    	; 0x758 <effect_snakeGrow_b+0x254>
     666:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <head.2061>
     66a:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <head.2061+0x1>
     66e:	3e 8b       	std	Y+22, r19	; 0x16
     670:	2d 8b       	std	Y+21, r18	; 0x15
     672:	82 17       	cp	r24, r18
     674:	93 07       	cpc	r25, r19
     676:	09 f4       	brne	.+2      	; 0x67a <effect_snakeGrow_b+0x176>
     678:	7a c0       	rjmp	.+244    	; 0x76e <effect_snakeGrow_b+0x26a>
     67a:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <tail.2062>
     67e:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <tail.2062+0x1>
     682:	9a cf       	rjmp	.-204    	; 0x5b8 <effect_snakeGrow_b+0xb4>

void calcBrightness(uint32_t *color, uint8_t _brightness){
	uint32_t buf = 0;
	uint32_t colorb = 0;

	buf = (((*color>>8*3)	& 0x000000FF) * _brightness) / 255;
     684:	c0 90 06 01 	lds	r12, 0x0106	; 0x800106 <brightness>
     688:	d1 2c       	mov	r13, r1
     68a:	e1 2c       	mov	r14, r1
     68c:	f1 2c       	mov	r15, r1

	buf = (((*color>>8*1)	& 0x000000FF) * _brightness) / 255;
	colorb |= (buf<<8*1);

	buf = (( *color			& 0x000000FF) * _brightness) / 255;
	colorb |= (buf);
     68e:	2b 81       	ldd	r18, Y+3	; 0x03
     690:	3c 81       	ldd	r19, Y+4	; 0x04
     692:	4d 81       	ldd	r20, Y+5	; 0x05
     694:	5e 81       	ldd	r21, Y+6	; 0x06
     696:	c7 01       	movw	r24, r14
     698:	b6 01       	movw	r22, r12
     69a:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <__mulsi3>
     69e:	a5 01       	movw	r20, r10
     6a0:	94 01       	movw	r18, r8
     6a2:	0e 94 dd 0d 	call	0x1bba	; 0x1bba <__udivmodsi4>
     6a6:	72 2e       	mov	r7, r18
     6a8:	66 24       	eor	r6, r6
     6aa:	55 24       	eor	r5, r5
     6ac:	44 24       	eor	r4, r4
     6ae:	2f 85       	ldd	r18, Y+15	; 0x0f
     6b0:	38 89       	ldd	r19, Y+16	; 0x10
     6b2:	49 89       	ldd	r20, Y+17	; 0x11
     6b4:	5a 89       	ldd	r21, Y+18	; 0x12
     6b6:	c7 01       	movw	r24, r14
     6b8:	b6 01       	movw	r22, r12
     6ba:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <__mulsi3>
     6be:	a5 01       	movw	r20, r10
     6c0:	94 01       	movw	r18, r8
     6c2:	0e 94 dd 0d 	call	0x1bba	; 0x1bba <__udivmodsi4>
     6c6:	42 2a       	or	r4, r18
     6c8:	53 2a       	or	r5, r19
     6ca:	64 2a       	or	r6, r20
     6cc:	75 2a       	or	r7, r21
     6ce:	a7 01       	movw	r20, r14
     6d0:	96 01       	movw	r18, r12
     6d2:	6f 81       	ldd	r22, Y+7	; 0x07
     6d4:	78 85       	ldd	r23, Y+8	; 0x08
     6d6:	89 85       	ldd	r24, Y+9	; 0x09
     6d8:	9a 85       	ldd	r25, Y+10	; 0x0a
     6da:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <__mulsi3>
     6de:	a5 01       	movw	r20, r10
     6e0:	94 01       	movw	r18, r8
     6e2:	0e 94 dd 0d 	call	0x1bba	; 0x1bba <__udivmodsi4>
     6e6:	d9 01       	movw	r26, r18
     6e8:	99 27       	eor	r25, r25
     6ea:	88 27       	eor	r24, r24
     6ec:	48 2a       	or	r4, r24
     6ee:	59 2a       	or	r5, r25
     6f0:	6a 2a       	or	r6, r26
     6f2:	7b 2a       	or	r7, r27
     6f4:	a7 01       	movw	r20, r14
     6f6:	96 01       	movw	r18, r12
     6f8:	6b 85       	ldd	r22, Y+11	; 0x0b
     6fa:	7c 85       	ldd	r23, Y+12	; 0x0c
     6fc:	8d 85       	ldd	r24, Y+13	; 0x0d
     6fe:	9e 85       	ldd	r25, Y+14	; 0x0e
     700:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <__mulsi3>
     704:	a5 01       	movw	r20, r10
     706:	94 01       	movw	r18, r8
     708:	0e 94 dd 0d 	call	0x1bba	; 0x1bba <__udivmodsi4>
     70c:	b4 2f       	mov	r27, r20
     70e:	a3 2f       	mov	r26, r19
     710:	92 2f       	mov	r25, r18
     712:	88 27       	eor	r24, r24
     714:	48 2a       	or	r4, r24
     716:	59 2a       	or	r5, r25
     718:	6a 2a       	or	r6, r26
     71a:	7b 2a       	or	r7, r27
void setRGBW_pixel(uint16_t pixel, uint32_t color){

	if (pixel < exLow || pixel >= exHigh)
	{
		calcBrightness(&color, brightness);
		led[pixel].r = (uint8_t)((color>>8*3)	& 0x000000FF);
     71c:	ed 89       	ldd	r30, Y+21	; 0x15
     71e:	fe 89       	ldd	r31, Y+22	; 0x16
     720:	ee 0f       	add	r30, r30
     722:	ff 1f       	adc	r31, r31
     724:	ee 0f       	add	r30, r30
     726:	ff 1f       	adc	r31, r31
     728:	ea 5d       	subi	r30, 0xDA	; 218
     72a:	fe 4f       	sbci	r31, 0xFE	; 254
     72c:	71 82       	std	Z+1, r7	; 0x01
		led[pixel].g = (uint8_t)((color>>8*2)	& 0x000000FF);
     72e:	60 82       	st	Z, r6
		led[pixel].b = (uint8_t)((color>>8*1)	& 0x000000FF);
     730:	52 82       	std	Z+2, r5	; 0x02
		led[pixel].w = (uint8_t)( color			& 0x000000FF);
     732:	43 82       	std	Z+3, r4	; 0x03
		tail = 0;
	}
	
	setRGBW_pixel(head, color);
	
	head++;
     734:	2d 89       	ldd	r18, Y+21	; 0x15
     736:	3e 89       	ldd	r19, Y+22	; 0x16
     738:	2f 5f       	subi	r18, 0xFF	; 255
     73a:	3f 4f       	sbci	r19, 0xFF	; 255
	if(head >= LEDpixelcount){//loop for head
     73c:	24 3b       	cpi	r18, 0xB4	; 180
     73e:	31 05       	cpc	r19, r1
     740:	0c f0       	brlt	.+2      	; 0x744 <effect_snakeGrow_b+0x240>
     742:	76 cf       	rjmp	.-276    	; 0x630 <effect_snakeGrow_b+0x12c>
		tail = 0;
	}
	
	setRGBW_pixel(head, color);
	
	head++;
     744:	30 93 0f 01 	sts	0x010F, r19	; 0x80010f <head.2061+0x1>
     748:	20 93 0e 01 	sts	0x010E, r18	; 0x80010e <head.2061>
     74c:	75 cf       	rjmp	.-278    	; 0x638 <effect_snakeGrow_b+0x134>
	if(tail >= 0){
	setRGBW_pixel(tail, 0);
	}
	tail++;
	if(tail >= LEDpixelcount){//loop for tail
		tail = 0;
     74e:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <tail.2062+0x1>
     752:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <tail.2062>
     756:	4a cf       	rjmp	.-364    	; 0x5ec <effect_snakeGrow_b+0xe8>
     758:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <tail.2062>
     75c:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <tail.2062+0x1>
     760:	a0 91 0e 01 	lds	r26, 0x010E	; 0x80010e <head.2061>
     764:	b0 91 0f 01 	lds	r27, 0x010F	; 0x80010f <head.2061+0x1>
     768:	be 8b       	std	Y+22, r27	; 0x16
     76a:	ad 8b       	std	Y+21, r26	; 0x15
     76c:	25 cf       	rjmp	.-438    	; 0x5b8 <effect_snakeGrow_b+0xb4>
     76e:	c9 01       	movw	r24, r18
	{
		tail = -length;
		prevlen = length;
		state++;
	}else if(prevlen != length && head == prevlen){//make the snake longer when the snake is as long as the previous length and at start position
		tail = head - length;
     770:	82 19       	sub	r24, r2
     772:	93 09       	sbc	r25, r3
		prevlen = length;
     774:	30 92 11 01 	sts	0x0111, r3	; 0x800111 <prevlen.2064+0x1>
     778:	20 92 10 01 	sts	0x0110, r2	; 0x800110 <prevlen.2064>
     77c:	1d cf       	rjmp	.-454    	; 0x5b8 <effect_snakeGrow_b+0xb4>
	}

}

void effect_snakeGrow_b(int growSpd, uint32_t color){
	for(int len = 1; len < LEDpixelcount; len+=growSpd){
     77e:	8b 89       	ldd	r24, Y+19	; 0x13
     780:	9c 89       	ldd	r25, Y+20	; 0x14
     782:	28 0e       	add	r2, r24
     784:	39 1e       	adc	r3, r25
     786:	a9 81       	ldd	r26, Y+1	; 0x01
     788:	ba 81       	ldd	r27, Y+2	; 0x02
     78a:	a8 1b       	sub	r26, r24
     78c:	b9 0b       	sbc	r27, r25
     78e:	ba 83       	std	Y+2, r27	; 0x02
     790:	a9 83       	std	Y+1, r26	; 0x01
     792:	b4 eb       	ldi	r27, 0xB4	; 180
     794:	2b 16       	cp	r2, r27
     796:	31 04       	cpc	r3, r1
     798:	0c f4       	brge	.+2      	; 0x79c <effect_snakeGrow_b+0x298>
     79a:	fc ce       	rjmp	.-520    	; 0x594 <effect_snakeGrow_b+0x90>
		for (int f = 0; f < LEDpixelcount; f++){//finish full animation frame
			effect_snake_nb(len, color);
		}
	}
}
     79c:	66 96       	adiw	r28, 0x16	; 22
     79e:	0f b6       	in	r0, 0x3f	; 63
     7a0:	f8 94       	cli
     7a2:	de bf       	out	0x3e, r29	; 62
     7a4:	0f be       	out	0x3f, r0	; 63
     7a6:	cd bf       	out	0x3d, r28	; 61
     7a8:	df 91       	pop	r29
     7aa:	cf 91       	pop	r28
     7ac:	1f 91       	pop	r17
     7ae:	0f 91       	pop	r16
     7b0:	ff 90       	pop	r15
     7b2:	ef 90       	pop	r14
     7b4:	df 90       	pop	r13
     7b6:	cf 90       	pop	r12
     7b8:	bf 90       	pop	r11
     7ba:	af 90       	pop	r10
     7bc:	9f 90       	pop	r9
     7be:	8f 90       	pop	r8
     7c0:	7f 90       	pop	r7
     7c2:	6f 90       	pop	r6
     7c4:	5f 90       	pop	r5
     7c6:	4f 90       	pop	r4
     7c8:	3f 90       	pop	r3
     7ca:	2f 90       	pop	r2
     7cc:	08 95       	ret

000007ce <effect_snake_nb>:

void effect_snake_nb(int length, uint32_t color){ // make a circulating snake 
     7ce:	4f 92       	push	r4
     7d0:	5f 92       	push	r5
     7d2:	6f 92       	push	r6
     7d4:	7f 92       	push	r7
     7d6:	8f 92       	push	r8
     7d8:	9f 92       	push	r9
     7da:	af 92       	push	r10
     7dc:	bf 92       	push	r11
     7de:	cf 92       	push	r12
     7e0:	df 92       	push	r13
     7e2:	ef 92       	push	r14
     7e4:	ff 92       	push	r15
     7e6:	cf 93       	push	r28
     7e8:	df 93       	push	r29
     7ea:	00 d0       	rcall	.+0      	; 0x7ec <effect_snake_nb+0x1e>
     7ec:	00 d0       	rcall	.+0      	; 0x7ee <effect_snake_nb+0x20>
     7ee:	00 d0       	rcall	.+0      	; 0x7f0 <effect_snake_nb+0x22>
     7f0:	cd b7       	in	r28, 0x3d	; 61
     7f2:	de b7       	in	r29, 0x3e	; 62
     7f4:	49 83       	std	Y+1, r20	; 0x01
     7f6:	5a 83       	std	Y+2, r21	; 0x02
     7f8:	6b 83       	std	Y+3, r22	; 0x03
     7fa:	7c 83       	std	Y+4, r23	; 0x04
	static int head = 0;
	static int tail = 0;
	static int8_t state = 0;
	static int prevlen;

	if (state == 0)
     7fc:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <state.2063>
     800:	21 11       	cpse	r18, r1
     802:	cd c0       	rjmp	.+410    	; 0x99e <__stack+0x9f>
	{
		tail = -length;
     804:	22 27       	eor	r18, r18
     806:	33 27       	eor	r19, r19
     808:	28 1b       	sub	r18, r24
     80a:	39 0b       	sbc	r19, r25
		prevlen = length;
     80c:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <prevlen.2064+0x1>
     810:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <prevlen.2064>
		state++;
     814:	81 e0       	ldi	r24, 0x01	; 1
     816:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <state.2063>
     81a:	40 91 0e 01 	lds	r20, 0x010E	; 0x80010e <head.2061>
     81e:	50 91 0f 01 	lds	r21, 0x010F	; 0x80010f <head.2061+0x1>
     822:	5e 83       	std	Y+6, r21	; 0x06
     824:	4d 83       	std	Y+5, r20	; 0x05
uint16_t exLow = -1;
uint16_t exHigh = -1;

void setRGBW_pixel(uint16_t pixel, uint32_t color){

	if (pixel < exLow || pixel >= exHigh)
     826:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <exLow>
     82a:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <exLow+0x1>
	}else if(prevlen != length && head == prevlen){//make the snake longer when the snake is as long as the previous length and at start position
		tail = head - length;
		prevlen = length;
	}
	
	if(tail >= 0){
     82e:	37 fd       	sbrc	r19, 7
     830:	0b c0       	rjmp	.+22     	; 0x848 <__DATA_REGION_LENGTH__+0x48>
void setRGBW_pixel(uint16_t pixel, uint32_t color){

	if (pixel < exLow || pixel >= exHigh)
	{
		calcBrightness(&color, brightness);
		led[pixel].r = (uint8_t)((color>>8*3)	& 0x000000FF);
     832:	f9 01       	movw	r30, r18
     834:	ee 0f       	add	r30, r30
     836:	ff 1f       	adc	r31, r31
     838:	ee 0f       	add	r30, r30
     83a:	ff 1f       	adc	r31, r31
     83c:	ea 5d       	subi	r30, 0xDA	; 218
     83e:	fe 4f       	sbci	r31, 0xFE	; 254
		led[pixel].g = (uint8_t)((color>>8*2)	& 0x000000FF);
		led[pixel].b = (uint8_t)((color>>8*1)	& 0x000000FF);
		led[pixel].w = (uint8_t)( color			& 0x000000FF);
	}else{
		led[pixel].r = 0;
     840:	11 82       	std	Z+1, r1	; 0x01
		led[pixel].g = 0;
     842:	10 82       	st	Z, r1
		led[pixel].b = 0;
     844:	12 82       	std	Z+2, r1	; 0x02
		led[pixel].w = 0;
     846:	13 82       	std	Z+3, r1	; 0x03
	}
	
	if(tail >= 0){
	setRGBW_pixel(tail, 0);
	}
	tail++;
     848:	2f 5f       	subi	r18, 0xFF	; 255
     84a:	3f 4f       	sbci	r19, 0xFF	; 255
	if(tail >= LEDpixelcount){//loop for tail
     84c:	24 3b       	cpi	r18, 0xB4	; 180
     84e:	31 05       	cpc	r19, r1
     850:	0c f0       	brlt	.+2      	; 0x854 <__DATA_REGION_LENGTH__+0x54>
     852:	a0 c0       	rjmp	.+320    	; 0x994 <__stack+0x95>
	}
	
	if(tail >= 0){
	setRGBW_pixel(tail, 0);
	}
	tail++;
     854:	30 93 13 01 	sts	0x0113, r19	; 0x800113 <tail.2062+0x1>
     858:	20 93 12 01 	sts	0x0112, r18	; 0x800112 <tail.2062>
uint16_t exLow = -1;
uint16_t exHigh = -1;

void setRGBW_pixel(uint16_t pixel, uint32_t color){

	if (pixel < exLow || pixel >= exHigh)
     85c:	2d 81       	ldd	r18, Y+5	; 0x05
     85e:	3e 81       	ldd	r19, Y+6	; 0x06
     860:	28 17       	cp	r18, r24
     862:	39 07       	cpc	r19, r25
     864:	98 f0       	brcs	.+38     	; 0x88c <__DATA_REGION_LENGTH__+0x8c>
     866:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <exHigh>
     86a:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <exHigh+0x1>
     86e:	28 17       	cp	r18, r24
     870:	39 07       	cpc	r19, r25
     872:	60 f4       	brcc	.+24     	; 0x88c <__DATA_REGION_LENGTH__+0x8c>
     874:	f9 01       	movw	r30, r18
		led[pixel].r = (uint8_t)((color>>8*3)	& 0x000000FF);
		led[pixel].g = (uint8_t)((color>>8*2)	& 0x000000FF);
		led[pixel].b = (uint8_t)((color>>8*1)	& 0x000000FF);
		led[pixel].w = (uint8_t)( color			& 0x000000FF);
	}else{
		led[pixel].r = 0;
     876:	ee 0f       	add	r30, r30
     878:	ff 1f       	adc	r31, r31
     87a:	ee 0f       	add	r30, r30
     87c:	ff 1f       	adc	r31, r31
     87e:	ea 5d       	subi	r30, 0xDA	; 218
     880:	fe 4f       	sbci	r31, 0xFE	; 254
     882:	11 82       	std	Z+1, r1	; 0x01
		led[pixel].g = 0;
     884:	10 82       	st	Z, r1
		led[pixel].b = 0;
     886:	12 82       	std	Z+2, r1	; 0x02
		led[pixel].w = 0;
     888:	13 82       	std	Z+3, r1	; 0x03
     88a:	5d c0       	rjmp	.+186    	; 0x946 <__stack+0x47>

void calcBrightness(uint32_t *color, uint8_t _brightness){
	uint32_t buf = 0;
	uint32_t colorb = 0;

	buf = (((*color>>8*3)	& 0x000000FF) * _brightness) / 255;
     88c:	c0 90 06 01 	lds	r12, 0x0106	; 0x800106 <brightness>
     890:	d1 2c       	mov	r13, r1
     892:	e1 2c       	mov	r14, r1
     894:	f1 2c       	mov	r15, r1

	buf = (((*color>>8*1)	& 0x000000FF) * _brightness) / 255;
	colorb |= (buf<<8*1);

	buf = (( *color			& 0x000000FF) * _brightness) / 255;
	colorb |= (buf);
     896:	89 81       	ldd	r24, Y+1	; 0x01
     898:	9a 81       	ldd	r25, Y+2	; 0x02
     89a:	ab 81       	ldd	r26, Y+3	; 0x03
     89c:	bc 81       	ldd	r27, Y+4	; 0x04
     89e:	2b 2f       	mov	r18, r27
     8a0:	33 27       	eor	r19, r19
     8a2:	44 27       	eor	r20, r20
     8a4:	55 27       	eor	r21, r21
     8a6:	c7 01       	movw	r24, r14
     8a8:	b6 01       	movw	r22, r12
     8aa:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <__mulsi3>
     8ae:	41 2c       	mov	r4, r1
     8b0:	51 2c       	mov	r5, r1
     8b2:	32 01       	movw	r6, r4
     8b4:	4a 94       	dec	r4
     8b6:	a3 01       	movw	r20, r6
     8b8:	92 01       	movw	r18, r4
     8ba:	0e 94 dd 0d 	call	0x1bba	; 0x1bba <__udivmodsi4>
     8be:	b2 2e       	mov	r11, r18
     8c0:	aa 24       	eor	r10, r10
     8c2:	99 24       	eor	r9, r9
     8c4:	88 24       	eor	r8, r8
     8c6:	99 81       	ldd	r25, Y+1	; 0x01
     8c8:	a9 2f       	mov	r26, r25
     8ca:	b0 e0       	ldi	r27, 0x00	; 0
     8cc:	a7 01       	movw	r20, r14
     8ce:	96 01       	movw	r18, r12
     8d0:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <__muluhisi3>
     8d4:	a3 01       	movw	r20, r6
     8d6:	92 01       	movw	r18, r4
     8d8:	0e 94 dd 0d 	call	0x1bba	; 0x1bba <__udivmodsi4>
     8dc:	82 2a       	or	r8, r18
     8de:	93 2a       	or	r9, r19
     8e0:	a4 2a       	or	r10, r20
     8e2:	b5 2a       	or	r11, r21
     8e4:	2b 81       	ldd	r18, Y+3	; 0x03
     8e6:	a2 2f       	mov	r26, r18
     8e8:	b0 e0       	ldi	r27, 0x00	; 0
     8ea:	a7 01       	movw	r20, r14
     8ec:	96 01       	movw	r18, r12
     8ee:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <__muluhisi3>
     8f2:	a3 01       	movw	r20, r6
     8f4:	92 01       	movw	r18, r4
     8f6:	0e 94 dd 0d 	call	0x1bba	; 0x1bba <__udivmodsi4>
     8fa:	d9 01       	movw	r26, r18
     8fc:	99 27       	eor	r25, r25
     8fe:	88 27       	eor	r24, r24
     900:	88 2a       	or	r8, r24
     902:	99 2a       	or	r9, r25
     904:	aa 2a       	or	r10, r26
     906:	bb 2a       	or	r11, r27
     908:	3a 81       	ldd	r19, Y+2	; 0x02
     90a:	a3 2f       	mov	r26, r19
     90c:	b0 e0       	ldi	r27, 0x00	; 0
     90e:	a7 01       	movw	r20, r14
     910:	96 01       	movw	r18, r12
     912:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <__muluhisi3>
     916:	a3 01       	movw	r20, r6
     918:	92 01       	movw	r18, r4
     91a:	0e 94 dd 0d 	call	0x1bba	; 0x1bba <__udivmodsi4>
     91e:	b4 2f       	mov	r27, r20
     920:	a3 2f       	mov	r26, r19
     922:	92 2f       	mov	r25, r18
     924:	88 27       	eor	r24, r24
     926:	88 2a       	or	r8, r24
     928:	99 2a       	or	r9, r25
     92a:	aa 2a       	or	r10, r26
     92c:	bb 2a       	or	r11, r27
void setRGBW_pixel(uint16_t pixel, uint32_t color){

	if (pixel < exLow || pixel >= exHigh)
	{
		calcBrightness(&color, brightness);
		led[pixel].r = (uint8_t)((color>>8*3)	& 0x000000FF);
     92e:	ed 81       	ldd	r30, Y+5	; 0x05
     930:	fe 81       	ldd	r31, Y+6	; 0x06
     932:	ee 0f       	add	r30, r30
     934:	ff 1f       	adc	r31, r31
     936:	ee 0f       	add	r30, r30
     938:	ff 1f       	adc	r31, r31
     93a:	ea 5d       	subi	r30, 0xDA	; 218
     93c:	fe 4f       	sbci	r31, 0xFE	; 254
     93e:	b1 82       	std	Z+1, r11	; 0x01
		led[pixel].g = (uint8_t)((color>>8*2)	& 0x000000FF);
     940:	a0 82       	st	Z, r10
		led[pixel].b = (uint8_t)((color>>8*1)	& 0x000000FF);
     942:	92 82       	std	Z+2, r9	; 0x02
		led[pixel].w = (uint8_t)( color			& 0x000000FF);
     944:	83 82       	std	Z+3, r8	; 0x03
		tail = 0;
	}
	
	setRGBW_pixel(head, color);
	
	head++;
     946:	4d 81       	ldd	r20, Y+5	; 0x05
     948:	5e 81       	ldd	r21, Y+6	; 0x06
     94a:	4f 5f       	subi	r20, 0xFF	; 255
     94c:	5f 4f       	sbci	r21, 0xFF	; 255
     94e:	5a 83       	std	Y+2, r21	; 0x02
     950:	49 83       	std	Y+1, r20	; 0x01
	if(head >= LEDpixelcount){//loop for head
     952:	44 3b       	cpi	r20, 0xB4	; 180
     954:	51 05       	cpc	r21, r1
     956:	c4 f1       	brlt	.+112    	; 0x9c8 <__stack+0xc9>
		head = 0;
     958:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <head.2061+0x1>
     95c:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <head.2061>

	*color = colorb;//update the color with the new brightness value calculated
}

void RGBW_send(){
		ws2812_setleds_rgbw(led, LEDpixelcount);//send the frame with size of pixelcount to update the strip
     960:	64 eb       	ldi	r22, 0xB4	; 180
     962:	70 e0       	ldi	r23, 0x00	; 0
     964:	86 e2       	ldi	r24, 0x26	; 38
     966:	91 e0       	ldi	r25, 0x01	; 1
		head = 0;
	}


	RGBW_send();
}
     968:	26 96       	adiw	r28, 0x06	; 6
     96a:	0f b6       	in	r0, 0x3f	; 63
     96c:	f8 94       	cli
     96e:	de bf       	out	0x3e, r29	; 62
     970:	0f be       	out	0x3f, r0	; 63
     972:	cd bf       	out	0x3d, r28	; 61
     974:	df 91       	pop	r29
     976:	cf 91       	pop	r28
     978:	ff 90       	pop	r15
     97a:	ef 90       	pop	r14
     97c:	df 90       	pop	r13
     97e:	cf 90       	pop	r12
     980:	bf 90       	pop	r11
     982:	af 90       	pop	r10
     984:	9f 90       	pop	r9
     986:	8f 90       	pop	r8
     988:	7f 90       	pop	r7
     98a:	6f 90       	pop	r6
     98c:	5f 90       	pop	r5
     98e:	4f 90       	pop	r4

	*color = colorb;//update the color with the new brightness value calculated
}

void RGBW_send(){
		ws2812_setleds_rgbw(led, LEDpixelcount);//send the frame with size of pixelcount to update the strip
     990:	0c 94 7f 0c 	jmp	0x18fe	; 0x18fe <ws2812_setleds_rgbw>
	if(tail >= 0){
	setRGBW_pixel(tail, 0);
	}
	tail++;
	if(tail >= LEDpixelcount){//loop for tail
		tail = 0;
     994:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <tail.2062+0x1>
     998:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <tail.2062>
     99c:	5f cf       	rjmp	.-322    	; 0x85c <__DATA_REGION_LENGTH__+0x5c>
	if (state == 0)
	{
		tail = -length;
		prevlen = length;
		state++;
	}else if(prevlen != length && head == prevlen){//make the snake longer when the snake is as long as the previous length and at start position
     99e:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <prevlen.2064>
     9a2:	30 91 11 01 	lds	r19, 0x0111	; 0x800111 <prevlen.2064+0x1>
     9a6:	82 17       	cp	r24, r18
     9a8:	93 07       	cpc	r25, r19
     9aa:	99 f0       	breq	.+38     	; 0x9d2 <__stack+0xd3>
     9ac:	a0 91 0e 01 	lds	r26, 0x010E	; 0x80010e <head.2061>
     9b0:	b0 91 0f 01 	lds	r27, 0x010F	; 0x80010f <head.2061+0x1>
     9b4:	be 83       	std	Y+6, r27	; 0x06
     9b6:	ad 83       	std	Y+5, r26	; 0x05
     9b8:	2a 17       	cp	r18, r26
     9ba:	3b 07       	cpc	r19, r27
     9bc:	a9 f0       	breq	.+42     	; 0x9e8 <__stack+0xe9>
     9be:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <tail.2062>
     9c2:	30 91 13 01 	lds	r19, 0x0113	; 0x800113 <tail.2062+0x1>
     9c6:	2f cf       	rjmp	.-418    	; 0x826 <__DATA_REGION_LENGTH__+0x26>
		tail = 0;
	}
	
	setRGBW_pixel(head, color);
	
	head++;
     9c8:	50 93 0f 01 	sts	0x010F, r21	; 0x80010f <head.2061+0x1>
     9cc:	40 93 0e 01 	sts	0x010E, r20	; 0x80010e <head.2061>
     9d0:	c7 cf       	rjmp	.-114    	; 0x960 <__stack+0x61>
     9d2:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <head.2061>
     9d6:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <head.2061+0x1>
     9da:	9e 83       	std	Y+6, r25	; 0x06
     9dc:	8d 83       	std	Y+5, r24	; 0x05
     9de:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <tail.2062>
     9e2:	30 91 13 01 	lds	r19, 0x0113	; 0x800113 <tail.2062+0x1>
     9e6:	1f cf       	rjmp	.-450    	; 0x826 <__DATA_REGION_LENGTH__+0x26>
     9e8:	9d 01       	movw	r18, r26
	{
		tail = -length;
		prevlen = length;
		state++;
	}else if(prevlen != length && head == prevlen){//make the snake longer when the snake is as long as the previous length and at start position
		tail = head - length;
     9ea:	28 1b       	sub	r18, r24
     9ec:	39 0b       	sbc	r19, r25
		prevlen = length;
     9ee:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <prevlen.2064+0x1>
     9f2:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <prevlen.2064>
     9f6:	17 cf       	rjmp	.-466    	; 0x826 <__DATA_REGION_LENGTH__+0x26>

000009f8 <effect_snakeGrowHue_nb>:
	uint32_t color_32 = 0;
	color_32 |= ((uint32_t)r<<8*3)|((uint32_t)g<<8*2)|((uint32_t)b<<8)|(w); //pack the rgbw value in a 32 bit value 
	return color_32;
}

void effect_snakeGrowHue_nb(int growSpd, int hueSpd){
     9f8:	fc 01       	movw	r30, r24
	static uint16_t hue = 0;
	effect_snakeGrow_nb(growSpd, ColorHSV(hue+=hueSpd, 255, 255, 0));
     9fa:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <hue.2033>
     9fe:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <hue.2033+0x1>
     a02:	9b 01       	movw	r18, r22
     a04:	28 0f       	add	r18, r24
     a06:	39 1f       	adc	r19, r25
     a08:	30 93 1a 01 	sts	0x011A, r19	; 0x80011a <hue.2033+0x1>
     a0c:	20 93 19 01 	sts	0x0119, r18	; 0x800119 <hue.2033>
	// midpoint, not start, of pure cyan). The 8-bit RGB hexcone (256 values
	// each for red, green, blue) really only allows for 1530 distinct hues
	// (not 1536, more on that below), but the full unsigned 16-bit type was
	// chosen for hue so that one's code can easily handle a contiguous color
	// wheel by allowing hue to roll over in either direction.
	hue = (hue * 1530L + 32768) / 65536;
     a10:	aa ef       	ldi	r26, 0xFA	; 250
     a12:	b5 e0       	ldi	r27, 0x05	; 5
     a14:	0e 94 05 0e 	call	0x1c0a	; 0x1c0a <__umulhisi3>
     a18:	dc 01       	movw	r26, r24
     a1a:	cb 01       	movw	r24, r22
     a1c:	90 58       	subi	r25, 0x80	; 128
     a1e:	af 4f       	sbci	r26, 0xFF	; 255
     a20:	bf 4f       	sbci	r27, 0xFF	; 255
     a22:	cd 01       	movw	r24, r26
     a24:	bb 27       	eor	r27, r27
     a26:	97 fd       	sbrc	r25, 7
     a28:	b0 95       	com	r27
     a2a:	ab 2f       	mov	r26, r27
	// Pure green to not-quite-pure-cyan is:     0, 255, 0 to   0, 255, 254
	// and so forth. Hence, 1530 distinct hues (0 to 1529), and hence why
	// the constants below are not the multiples of 256 you might expect.

	// Convert hue to R,G,B (nested ifs faster than divide+mod+switch):
	if(hue < 510) {         // Red to Green-1
     a2c:	8e 3f       	cpi	r24, 0xFE	; 254
     a2e:	41 e0       	ldi	r20, 0x01	; 1
     a30:	94 07       	cpc	r25, r20
     a32:	48 f5       	brcc	.+82     	; 0xa86 <effect_snakeGrowHue_nb+0x8e>
		b = 0;
		if(hue < 255) {       //   Red to Yellow-1
     a34:	8f 3f       	cpi	r24, 0xFF	; 255
     a36:	91 05       	cpc	r25, r1
     a38:	08 f4       	brcc	.+2      	; 0xa3c <effect_snakeGrowHue_nb+0x44>
     a3a:	5a c0       	rjmp	.+180    	; 0xaf0 <effect_snakeGrowHue_nb+0xf8>
     a3c:	2e ef       	ldi	r18, 0xFE	; 254
     a3e:	42 2f       	mov	r20, r18
     a40:	48 1b       	sub	r20, r24
     a42:	50 e0       	ldi	r21, 0x00	; 0
     a44:	60 e0       	ldi	r22, 0x00	; 0
     a46:	70 e0       	ldi	r23, 0x00	; 0
     a48:	74 2f       	mov	r23, r20
     a4a:	66 27       	eor	r22, r22
     a4c:	55 27       	eor	r21, r21
     a4e:	44 27       	eor	r20, r20
     a50:	6f 6f       	ori	r22, 0xFF	; 255

void effect_snakeGrow_nb(int growSpd, uint32_t color){
	static int len = 1;
	static int f = 0;

	if (len < LEDpixelcount){
     a52:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     a56:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     a5a:	84 3b       	cpi	r24, 0xB4	; 180
     a5c:	91 05       	cpc	r25, r1
     a5e:	64 f5       	brge	.+88     	; 0xab8 <effect_snakeGrowHue_nb+0xc0>
		if (f < LEDpixelcount){
     a60:	20 91 15 01 	lds	r18, 0x0115	; 0x800115 <f.2044>
     a64:	30 91 16 01 	lds	r19, 0x0116	; 0x800116 <f.2044+0x1>
     a68:	24 3b       	cpi	r18, 0xB4	; 180
     a6a:	31 05       	cpc	r19, r1
     a6c:	0c f4       	brge	.+2      	; 0xa70 <effect_snakeGrowHue_nb+0x78>
     a6e:	69 c0       	rjmp	.+210    	; 0xb42 <effect_snakeGrowHue_nb+0x14a>
			effect_snake_nb(len, color);
			f++;
		}
		else{
			len+=growSpd;
     a70:	8e 0f       	add	r24, r30
     a72:	9f 1f       	adc	r25, r31
     a74:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     a78:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			f = 0;
     a7c:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <f.2044+0x1>
     a80:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <f.2044>
     a84:	08 95       	ret
			g = hue;            //     g = 0 to 254
			} else {              //   Yellow to Green-1
			r = 510 - hue;      //     r = 255 to 1
			g = 255;
		}
		} else if(hue < 1020) { // Green to Blue-1
     a86:	8c 3f       	cpi	r24, 0xFC	; 252
     a88:	43 e0       	ldi	r20, 0x03	; 3
     a8a:	94 07       	cpc	r25, r20
     a8c:	e0 f4       	brcc	.+56     	; 0xac6 <effect_snakeGrowHue_nb+0xce>
		r = 0;
		if(hue <  765) {      //   Green to Cyan-1
     a8e:	8d 3f       	cpi	r24, 0xFD	; 253
     a90:	42 e0       	ldi	r20, 0x02	; 2
     a92:	94 07       	cpc	r25, r20
     a94:	f0 f5       	brcc	.+124    	; 0xb12 <effect_snakeGrowHue_nb+0x11a>
     a96:	42 e0       	ldi	r20, 0x02	; 2
     a98:	48 0f       	add	r20, r24
     a9a:	50 e0       	ldi	r21, 0x00	; 0
     a9c:	60 e0       	ldi	r22, 0x00	; 0
     a9e:	70 e0       	ldi	r23, 0x00	; 0
     aa0:	5f 6f       	ori	r21, 0xFF	; 255
     aa2:	76 2f       	mov	r23, r22
     aa4:	65 2f       	mov	r22, r21
     aa6:	54 2f       	mov	r21, r20
     aa8:	44 27       	eor	r20, r20

void effect_snakeGrow_nb(int growSpd, uint32_t color){
	static int len = 1;
	static int f = 0;

	if (len < LEDpixelcount){
     aaa:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     aae:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     ab2:	84 3b       	cpi	r24, 0xB4	; 180
     ab4:	91 05       	cpc	r25, r1
     ab6:	a4 f2       	brlt	.-88     	; 0xa60 <effect_snakeGrowHue_nb+0x68>
			len+=growSpd;
			f = 0;
		}
		
		}else{
		len = 1;
     ab8:	81 e0       	ldi	r24, 0x01	; 1
     aba:	90 e0       	ldi	r25, 0x00	; 0
     abc:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     ac0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     ac4:	08 95       	ret
			b = hue - 510;      //     b = 0 to 254
			} else {              //   Cyan to Blue-1
			g = 1020 - hue;     //     g = 255 to 1
			b = 255;
		}
		} else if(hue < 1530) { // Blue to Red-1
     ac6:	8a 3f       	cpi	r24, 0xFA	; 250
     ac8:	45 e0       	ldi	r20, 0x05	; 5
     aca:	94 07       	cpc	r25, r20
     acc:	a9 f1       	breq	.+106    	; 0xb38 <effect_snakeGrowHue_nb+0x140>
		g = 0;
		if(hue < 1275) {      //   Blue to Magenta-1
     ace:	8b 3f       	cpi	r24, 0xFB	; 251
     ad0:	44 e0       	ldi	r20, 0x04	; 4
     ad2:	94 07       	cpc	r25, r20
     ad4:	08 f4       	brcc	.+2      	; 0xad8 <effect_snakeGrowHue_nb+0xe0>
     ad6:	41 c0       	rjmp	.+130    	; 0xb5a <effect_snakeGrowHue_nb+0x162>
     ad8:	2a ef       	ldi	r18, 0xFA	; 250
     ada:	42 2f       	mov	r20, r18
     adc:	48 1b       	sub	r20, r24
     ade:	50 e0       	ldi	r21, 0x00	; 0
     ae0:	60 e0       	ldi	r22, 0x00	; 0
     ae2:	70 e0       	ldi	r23, 0x00	; 0
     ae4:	6f 6f       	ori	r22, 0xFF	; 255
     ae6:	76 2f       	mov	r23, r22
     ae8:	65 2f       	mov	r22, r21
     aea:	54 2f       	mov	r21, r20
     aec:	44 27       	eor	r20, r20
     aee:	b1 cf       	rjmp	.-158    	; 0xa52 <effect_snakeGrowHue_nb+0x5a>
     af0:	48 2f       	mov	r20, r24
     af2:	50 e0       	ldi	r21, 0x00	; 0
     af4:	60 e0       	ldi	r22, 0x00	; 0
     af6:	70 e0       	ldi	r23, 0x00	; 0
     af8:	76 2f       	mov	r23, r22
     afa:	65 2f       	mov	r22, r21
     afc:	54 2f       	mov	r21, r20
     afe:	44 27       	eor	r20, r20
     b00:	44 27       	eor	r20, r20
     b02:	66 27       	eor	r22, r22
     b04:	77 27       	eor	r23, r23
     b06:	6f 6f       	ori	r22, 0xFF	; 255
     b08:	76 2f       	mov	r23, r22
     b0a:	65 2f       	mov	r22, r21
     b0c:	54 2f       	mov	r21, r20
     b0e:	44 27       	eor	r20, r20
     b10:	a0 cf       	rjmp	.-192    	; 0xa52 <effect_snakeGrowHue_nb+0x5a>
     b12:	2c ef       	ldi	r18, 0xFC	; 252
     b14:	42 2f       	mov	r20, r18
     b16:	48 1b       	sub	r20, r24
     b18:	50 e0       	ldi	r21, 0x00	; 0
     b1a:	60 e0       	ldi	r22, 0x00	; 0
     b1c:	70 e0       	ldi	r23, 0x00	; 0
     b1e:	76 2f       	mov	r23, r22
     b20:	65 2f       	mov	r22, r21
     b22:	54 2f       	mov	r21, r20
     b24:	44 27       	eor	r20, r20
     b26:	44 27       	eor	r20, r20
     b28:	66 27       	eor	r22, r22
     b2a:	77 27       	eor	r23, r23
     b2c:	4f 6f       	ori	r20, 0xFF	; 255
     b2e:	76 2f       	mov	r23, r22
     b30:	65 2f       	mov	r22, r21
     b32:	54 2f       	mov	r21, r20
     b34:	44 27       	eor	r20, r20
     b36:	8d cf       	rjmp	.-230    	; 0xa52 <effect_snakeGrowHue_nb+0x5a>
			b = hue - 510;      //     b = 0 to 254
			} else {              //   Cyan to Blue-1
			g = 1020 - hue;     //     g = 255 to 1
			b = 255;
		}
		} else if(hue < 1530) { // Blue to Red-1
     b38:	40 e0       	ldi	r20, 0x00	; 0
     b3a:	50 e0       	ldi	r21, 0x00	; 0
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	7f ef       	ldi	r23, 0xFF	; 255
     b40:	88 cf       	rjmp	.-240    	; 0xa52 <effect_snakeGrowHue_nb+0x5a>
	static int len = 1;
	static int f = 0;

	if (len < LEDpixelcount){
		if (f < LEDpixelcount){
			effect_snake_nb(len, color);
     b42:	0e 94 e7 03 	call	0x7ce	; 0x7ce <effect_snake_nb>
			f++;
     b46:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <f.2044>
     b4a:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <f.2044+0x1>
     b4e:	01 96       	adiw	r24, 0x01	; 1
     b50:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <f.2044+0x1>
     b54:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <f.2044>
     b58:	08 95       	ret
     b5a:	44 e0       	ldi	r20, 0x04	; 4
     b5c:	48 0f       	add	r20, r24
     b5e:	50 e0       	ldi	r21, 0x00	; 0
     b60:	60 e0       	ldi	r22, 0x00	; 0
     b62:	70 e0       	ldi	r23, 0x00	; 0
     b64:	74 2f       	mov	r23, r20
     b66:	66 27       	eor	r22, r22
     b68:	55 27       	eor	r21, r21
     b6a:	44 27       	eor	r20, r20
     b6c:	5f 6f       	ori	r21, 0xFF	; 255
     b6e:	71 cf       	rjmp	.-286    	; 0xa52 <effect_snakeGrowHue_nb+0x5a>

00000b70 <effect_snakeGrowHue_b>:
void effect_snakeGrowHue_nb(int growSpd, int hueSpd){
	static uint16_t hue = 0;
	effect_snakeGrow_nb(growSpd, ColorHSV(hue+=hueSpd, 255, 255, 0));
}

void effect_snakeGrowHue_b(int growSpd, int hueSpd){
     b70:	fc 01       	movw	r30, r24
	static uint16_t hue = 0;
	effect_snakeGrow_nb(growSpd, ColorHSV(hue+=hueSpd, 255, 255, 0));
     b72:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <hue.2038>
     b76:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <hue.2038+0x1>
     b7a:	9b 01       	movw	r18, r22
     b7c:	28 0f       	add	r18, r24
     b7e:	39 1f       	adc	r19, r25
     b80:	30 93 18 01 	sts	0x0118, r19	; 0x800118 <hue.2038+0x1>
     b84:	20 93 17 01 	sts	0x0117, r18	; 0x800117 <hue.2038>
	// midpoint, not start, of pure cyan). The 8-bit RGB hexcone (256 values
	// each for red, green, blue) really only allows for 1530 distinct hues
	// (not 1536, more on that below), but the full unsigned 16-bit type was
	// chosen for hue so that one's code can easily handle a contiguous color
	// wheel by allowing hue to roll over in either direction.
	hue = (hue * 1530L + 32768) / 65536;
     b88:	aa ef       	ldi	r26, 0xFA	; 250
     b8a:	b5 e0       	ldi	r27, 0x05	; 5
     b8c:	0e 94 05 0e 	call	0x1c0a	; 0x1c0a <__umulhisi3>
     b90:	dc 01       	movw	r26, r24
     b92:	cb 01       	movw	r24, r22
     b94:	90 58       	subi	r25, 0x80	; 128
     b96:	af 4f       	sbci	r26, 0xFF	; 255
     b98:	bf 4f       	sbci	r27, 0xFF	; 255
     b9a:	cd 01       	movw	r24, r26
     b9c:	bb 27       	eor	r27, r27
     b9e:	97 fd       	sbrc	r25, 7
     ba0:	b0 95       	com	r27
     ba2:	ab 2f       	mov	r26, r27
	// Pure green to not-quite-pure-cyan is:     0, 255, 0 to   0, 255, 254
	// and so forth. Hence, 1530 distinct hues (0 to 1529), and hence why
	// the constants below are not the multiples of 256 you might expect.

	// Convert hue to R,G,B (nested ifs faster than divide+mod+switch):
	if(hue < 510) {         // Red to Green-1
     ba4:	8e 3f       	cpi	r24, 0xFE	; 254
     ba6:	41 e0       	ldi	r20, 0x01	; 1
     ba8:	94 07       	cpc	r25, r20
     baa:	48 f5       	brcc	.+82     	; 0xbfe <effect_snakeGrowHue_b+0x8e>
		b = 0;
		if(hue < 255) {       //   Red to Yellow-1
     bac:	8f 3f       	cpi	r24, 0xFF	; 255
     bae:	91 05       	cpc	r25, r1
     bb0:	08 f4       	brcc	.+2      	; 0xbb4 <effect_snakeGrowHue_b+0x44>
     bb2:	5a c0       	rjmp	.+180    	; 0xc68 <effect_snakeGrowHue_b+0xf8>
     bb4:	2e ef       	ldi	r18, 0xFE	; 254
     bb6:	42 2f       	mov	r20, r18
     bb8:	48 1b       	sub	r20, r24
     bba:	50 e0       	ldi	r21, 0x00	; 0
     bbc:	60 e0       	ldi	r22, 0x00	; 0
     bbe:	70 e0       	ldi	r23, 0x00	; 0
     bc0:	74 2f       	mov	r23, r20
     bc2:	66 27       	eor	r22, r22
     bc4:	55 27       	eor	r21, r21
     bc6:	44 27       	eor	r20, r20
     bc8:	6f 6f       	ori	r22, 0xFF	; 255

void effect_snakeGrow_nb(int growSpd, uint32_t color){
	static int len = 1;
	static int f = 0;

	if (len < LEDpixelcount){
     bca:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     bce:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     bd2:	84 3b       	cpi	r24, 0xB4	; 180
     bd4:	91 05       	cpc	r25, r1
     bd6:	64 f5       	brge	.+88     	; 0xc30 <effect_snakeGrowHue_b+0xc0>
		if (f < LEDpixelcount){
     bd8:	20 91 15 01 	lds	r18, 0x0115	; 0x800115 <f.2044>
     bdc:	30 91 16 01 	lds	r19, 0x0116	; 0x800116 <f.2044+0x1>
     be0:	24 3b       	cpi	r18, 0xB4	; 180
     be2:	31 05       	cpc	r19, r1
     be4:	0c f4       	brge	.+2      	; 0xbe8 <effect_snakeGrowHue_b+0x78>
     be6:	69 c0       	rjmp	.+210    	; 0xcba <effect_snakeGrowHue_b+0x14a>
			effect_snake_nb(len, color);
			f++;
		}
		else{
			len+=growSpd;
     be8:	8e 0f       	add	r24, r30
     bea:	9f 1f       	adc	r25, r31
     bec:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     bf0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			f = 0;
     bf4:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <f.2044+0x1>
     bf8:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <f.2044>
     bfc:	08 95       	ret
			g = hue;            //     g = 0 to 254
			} else {              //   Yellow to Green-1
			r = 510 - hue;      //     r = 255 to 1
			g = 255;
		}
		} else if(hue < 1020) { // Green to Blue-1
     bfe:	8c 3f       	cpi	r24, 0xFC	; 252
     c00:	43 e0       	ldi	r20, 0x03	; 3
     c02:	94 07       	cpc	r25, r20
     c04:	e0 f4       	brcc	.+56     	; 0xc3e <effect_snakeGrowHue_b+0xce>
		r = 0;
		if(hue <  765) {      //   Green to Cyan-1
     c06:	8d 3f       	cpi	r24, 0xFD	; 253
     c08:	42 e0       	ldi	r20, 0x02	; 2
     c0a:	94 07       	cpc	r25, r20
     c0c:	f0 f5       	brcc	.+124    	; 0xc8a <effect_snakeGrowHue_b+0x11a>
     c0e:	42 e0       	ldi	r20, 0x02	; 2
     c10:	48 0f       	add	r20, r24
     c12:	50 e0       	ldi	r21, 0x00	; 0
     c14:	60 e0       	ldi	r22, 0x00	; 0
     c16:	70 e0       	ldi	r23, 0x00	; 0
     c18:	5f 6f       	ori	r21, 0xFF	; 255
     c1a:	76 2f       	mov	r23, r22
     c1c:	65 2f       	mov	r22, r21
     c1e:	54 2f       	mov	r21, r20
     c20:	44 27       	eor	r20, r20

void effect_snakeGrow_nb(int growSpd, uint32_t color){
	static int len = 1;
	static int f = 0;

	if (len < LEDpixelcount){
     c22:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     c26:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     c2a:	84 3b       	cpi	r24, 0xB4	; 180
     c2c:	91 05       	cpc	r25, r1
     c2e:	a4 f2       	brlt	.-88     	; 0xbd8 <effect_snakeGrowHue_b+0x68>
			len+=growSpd;
			f = 0;
		}
		
		}else{
		len = 1;
     c30:	81 e0       	ldi	r24, 0x01	; 1
     c32:	90 e0       	ldi	r25, 0x00	; 0
     c34:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     c38:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     c3c:	08 95       	ret
			b = hue - 510;      //     b = 0 to 254
			} else {              //   Cyan to Blue-1
			g = 1020 - hue;     //     g = 255 to 1
			b = 255;
		}
		} else if(hue < 1530) { // Blue to Red-1
     c3e:	8a 3f       	cpi	r24, 0xFA	; 250
     c40:	45 e0       	ldi	r20, 0x05	; 5
     c42:	94 07       	cpc	r25, r20
     c44:	a9 f1       	breq	.+106    	; 0xcb0 <effect_snakeGrowHue_b+0x140>
		g = 0;
		if(hue < 1275) {      //   Blue to Magenta-1
     c46:	8b 3f       	cpi	r24, 0xFB	; 251
     c48:	44 e0       	ldi	r20, 0x04	; 4
     c4a:	94 07       	cpc	r25, r20
     c4c:	08 f4       	brcc	.+2      	; 0xc50 <effect_snakeGrowHue_b+0xe0>
     c4e:	41 c0       	rjmp	.+130    	; 0xcd2 <effect_snakeGrowHue_b+0x162>
     c50:	2a ef       	ldi	r18, 0xFA	; 250
     c52:	42 2f       	mov	r20, r18
     c54:	48 1b       	sub	r20, r24
     c56:	50 e0       	ldi	r21, 0x00	; 0
     c58:	60 e0       	ldi	r22, 0x00	; 0
     c5a:	70 e0       	ldi	r23, 0x00	; 0
     c5c:	6f 6f       	ori	r22, 0xFF	; 255
     c5e:	76 2f       	mov	r23, r22
     c60:	65 2f       	mov	r22, r21
     c62:	54 2f       	mov	r21, r20
     c64:	44 27       	eor	r20, r20
     c66:	b1 cf       	rjmp	.-158    	; 0xbca <effect_snakeGrowHue_b+0x5a>
     c68:	48 2f       	mov	r20, r24
     c6a:	50 e0       	ldi	r21, 0x00	; 0
     c6c:	60 e0       	ldi	r22, 0x00	; 0
     c6e:	70 e0       	ldi	r23, 0x00	; 0
     c70:	76 2f       	mov	r23, r22
     c72:	65 2f       	mov	r22, r21
     c74:	54 2f       	mov	r21, r20
     c76:	44 27       	eor	r20, r20
     c78:	44 27       	eor	r20, r20
     c7a:	66 27       	eor	r22, r22
     c7c:	77 27       	eor	r23, r23
     c7e:	6f 6f       	ori	r22, 0xFF	; 255
     c80:	76 2f       	mov	r23, r22
     c82:	65 2f       	mov	r22, r21
     c84:	54 2f       	mov	r21, r20
     c86:	44 27       	eor	r20, r20
     c88:	a0 cf       	rjmp	.-192    	; 0xbca <effect_snakeGrowHue_b+0x5a>
     c8a:	2c ef       	ldi	r18, 0xFC	; 252
     c8c:	42 2f       	mov	r20, r18
     c8e:	48 1b       	sub	r20, r24
     c90:	50 e0       	ldi	r21, 0x00	; 0
     c92:	60 e0       	ldi	r22, 0x00	; 0
     c94:	70 e0       	ldi	r23, 0x00	; 0
     c96:	76 2f       	mov	r23, r22
     c98:	65 2f       	mov	r22, r21
     c9a:	54 2f       	mov	r21, r20
     c9c:	44 27       	eor	r20, r20
     c9e:	44 27       	eor	r20, r20
     ca0:	66 27       	eor	r22, r22
     ca2:	77 27       	eor	r23, r23
     ca4:	4f 6f       	ori	r20, 0xFF	; 255
     ca6:	76 2f       	mov	r23, r22
     ca8:	65 2f       	mov	r22, r21
     caa:	54 2f       	mov	r21, r20
     cac:	44 27       	eor	r20, r20
     cae:	8d cf       	rjmp	.-230    	; 0xbca <effect_snakeGrowHue_b+0x5a>
			b = hue - 510;      //     b = 0 to 254
			} else {              //   Cyan to Blue-1
			g = 1020 - hue;     //     g = 255 to 1
			b = 255;
		}
		} else if(hue < 1530) { // Blue to Red-1
     cb0:	40 e0       	ldi	r20, 0x00	; 0
     cb2:	50 e0       	ldi	r21, 0x00	; 0
     cb4:	60 e0       	ldi	r22, 0x00	; 0
     cb6:	7f ef       	ldi	r23, 0xFF	; 255
     cb8:	88 cf       	rjmp	.-240    	; 0xbca <effect_snakeGrowHue_b+0x5a>
	static int len = 1;
	static int f = 0;

	if (len < LEDpixelcount){
		if (f < LEDpixelcount){
			effect_snake_nb(len, color);
     cba:	0e 94 e7 03 	call	0x7ce	; 0x7ce <effect_snake_nb>
			f++;
     cbe:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <f.2044>
     cc2:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <f.2044+0x1>
     cc6:	01 96       	adiw	r24, 0x01	; 1
     cc8:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <f.2044+0x1>
     ccc:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <f.2044>
     cd0:	08 95       	ret
     cd2:	44 e0       	ldi	r20, 0x04	; 4
     cd4:	48 0f       	add	r20, r24
     cd6:	50 e0       	ldi	r21, 0x00	; 0
     cd8:	60 e0       	ldi	r22, 0x00	; 0
     cda:	70 e0       	ldi	r23, 0x00	; 0
     cdc:	74 2f       	mov	r23, r20
     cde:	66 27       	eor	r22, r22
     ce0:	55 27       	eor	r21, r21
     ce2:	44 27       	eor	r20, r20
     ce4:	5f 6f       	ori	r21, 0xFF	; 255
     ce6:	71 cf       	rjmp	.-286    	; 0xbca <effect_snakeGrowHue_b+0x5a>

00000ce8 <effect_snakeBounce_b>:


	RGBW_send();
}

void effect_snakeBounce_b(int length, uint32_t color){ // make a bouncing snake
     ce8:	2f 92       	push	r2
     cea:	3f 92       	push	r3
     cec:	4f 92       	push	r4
     cee:	5f 92       	push	r5
     cf0:	6f 92       	push	r6
     cf2:	7f 92       	push	r7
     cf4:	8f 92       	push	r8
     cf6:	9f 92       	push	r9
     cf8:	af 92       	push	r10
     cfa:	bf 92       	push	r11
     cfc:	cf 92       	push	r12
     cfe:	df 92       	push	r13
     d00:	ef 92       	push	r14
     d02:	ff 92       	push	r15
     d04:	0f 93       	push	r16
     d06:	1f 93       	push	r17
     d08:	cf 93       	push	r28
     d0a:	df 93       	push	r29
     d0c:	cd b7       	in	r28, 0x3d	; 61
     d0e:	de b7       	in	r29, 0x3e	; 62
     d10:	68 97       	sbiw	r28, 0x18	; 24
     d12:	0f b6       	in	r0, 0x3f	; 63
     d14:	f8 94       	cli
     d16:	de bf       	out	0x3e, r29	; 62
     d18:	0f be       	out	0x3f, r0	; 63
     d1a:	cd bf       	out	0x3d, r28	; 61
     d1c:	9a 83       	std	Y+2, r25	; 0x02
     d1e:	89 83       	std	Y+1, r24	; 0x01
     d20:	4f 87       	std	Y+15, r20	; 0x0f
     d22:	58 8b       	std	Y+16, r21	; 0x10
     d24:	69 8b       	std	Y+17, r22	; 0x11
     d26:	7a 8b       	std	Y+18, r23	; 0x12

void calcBrightness(uint32_t *color, uint8_t _brightness){
	uint32_t buf = 0;
	uint32_t colorb = 0;

	buf = (((*color>>8*3)	& 0x000000FF) * _brightness) / 255;
     d28:	87 2f       	mov	r24, r23
     d2a:	99 27       	eor	r25, r25
     d2c:	aa 27       	eor	r26, r26
     d2e:	bb 27       	eor	r27, r27
     d30:	8b 83       	std	Y+3, r24	; 0x03
     d32:	9c 83       	std	Y+4, r25	; 0x04
     d34:	ad 83       	std	Y+5, r26	; 0x05
     d36:	be 83       	std	Y+6, r27	; 0x06
	colorb |= (buf<<8*3);

	buf = (((*color>>8*2)	& 0x000000FF) * _brightness) / 255;
     d38:	99 89       	ldd	r25, Y+17	; 0x11
     d3a:	89 2f       	mov	r24, r25
     d3c:	90 e0       	ldi	r25, 0x00	; 0
     d3e:	a0 e0       	ldi	r26, 0x00	; 0
     d40:	b0 e0       	ldi	r27, 0x00	; 0
     d42:	8f 83       	std	Y+7, r24	; 0x07
     d44:	98 87       	std	Y+8, r25	; 0x08
     d46:	a9 87       	std	Y+9, r26	; 0x09
     d48:	ba 87       	std	Y+10, r27	; 0x0a
	colorb |= (buf<<8*2);

	buf = (((*color>>8*1)	& 0x000000FF) * _brightness) / 255;
     d4a:	98 89       	ldd	r25, Y+16	; 0x10
     d4c:	89 2f       	mov	r24, r25
     d4e:	90 e0       	ldi	r25, 0x00	; 0
     d50:	a0 e0       	ldi	r26, 0x00	; 0
     d52:	b0 e0       	ldi	r27, 0x00	; 0
     d54:	8b 87       	std	Y+11, r24	; 0x0b
     d56:	9c 87       	std	Y+12, r25	; 0x0c
     d58:	ad 87       	std	Y+13, r26	; 0x0d
     d5a:	be 87       	std	Y+14, r27	; 0x0e
     d5c:	a6 e2       	ldi	r26, 0x26	; 38
     d5e:	b1 e0       	ldi	r27, 0x01	; 1
     d60:	b8 8f       	std	Y+24, r27	; 0x18
     d62:	af 8b       	std	Y+23, r26	; 0x17
	RGBW_send();
}

void effect_snakeBounce_b(int length, uint32_t color){ // make a bouncing snake
		int tail = 0;
		for(int i = 0; i < LEDpixelcount; i++){
     d64:	21 2c       	mov	r2, r1
     d66:	31 2c       	mov	r3, r1

	buf = (((*color>>8*1)	& 0x000000FF) * _brightness) / 255;
	colorb |= (buf<<8*1);

	buf = (( *color			& 0x000000FF) * _brightness) / 255;
	colorb |= (buf);
     d68:	81 2c       	mov	r8, r1
     d6a:	91 2c       	mov	r9, r1
     d6c:	54 01       	movw	r10, r8
     d6e:	8a 94       	dec	r8
     d70:	db 01       	movw	r26, r22
     d72:	ca 01       	movw	r24, r20
     d74:	99 27       	eor	r25, r25
     d76:	aa 27       	eor	r26, r26
     d78:	bb 27       	eor	r27, r27
     d7a:	8b 8b       	std	Y+19, r24	; 0x13
     d7c:	9c 8b       	std	Y+20, r25	; 0x14
     d7e:	ad 8b       	std	Y+21, r26	; 0x15
     d80:	be 8b       	std	Y+22, r27	; 0x16
     d82:	2b c0       	rjmp	.+86     	; 0xdda <effect_snakeBounce_b+0xf2>
		led[pixel].r = (uint8_t)((color>>8*3)	& 0x000000FF);
		led[pixel].g = (uint8_t)((color>>8*2)	& 0x000000FF);
		led[pixel].b = (uint8_t)((color>>8*1)	& 0x000000FF);
		led[pixel].w = (uint8_t)( color			& 0x000000FF);
	}else{
		led[pixel].r = 0;
     d84:	ef 89       	ldd	r30, Y+23	; 0x17
     d86:	f8 8d       	ldd	r31, Y+24	; 0x18
     d88:	11 82       	std	Z+1, r1	; 0x01
		led[pixel].g = 0;
     d8a:	10 82       	st	Z, r1
		led[pixel].b = 0;
     d8c:	12 82       	std	Z+2, r1	; 0x02
		led[pixel].w = 0;
     d8e:	13 82       	std	Z+3, r1	; 0x03
			setRGBW_pixel(i, color);
			tail = i - length;
			if (tail < 0){
				tail = 0;
			}
			setRGBW_pixel(tail, 0);
     d90:	c1 01       	movw	r24, r2
     d92:	29 81       	ldd	r18, Y+1	; 0x01
     d94:	3a 81       	ldd	r19, Y+2	; 0x02
     d96:	82 1b       	sub	r24, r18
     d98:	93 0b       	sbc	r25, r19
     d9a:	97 fd       	sbrc	r25, 7
     d9c:	8a c0       	rjmp	.+276    	; 0xeb2 <effect_snakeBounce_b+0x1ca>
		led[pixel].r = (uint8_t)((color>>8*3)	& 0x000000FF);
		led[pixel].g = (uint8_t)((color>>8*2)	& 0x000000FF);
		led[pixel].b = (uint8_t)((color>>8*1)	& 0x000000FF);
		led[pixel].w = (uint8_t)( color			& 0x000000FF);
	}else{
		led[pixel].r = 0;
     d9e:	88 0f       	add	r24, r24
     da0:	99 1f       	adc	r25, r25
     da2:	88 0f       	add	r24, r24
     da4:	99 1f       	adc	r25, r25
     da6:	fc 01       	movw	r30, r24
     da8:	ea 5d       	subi	r30, 0xDA	; 218
     daa:	fe 4f       	sbci	r31, 0xFE	; 254
     dac:	11 82       	std	Z+1, r1	; 0x01
		led[pixel].g = 0;
     dae:	10 82       	st	Z, r1
		led[pixel].b = 0;
     db0:	12 82       	std	Z+2, r1	; 0x02
		led[pixel].w = 0;
     db2:	13 82       	std	Z+3, r1	; 0x03

	*color = colorb;//update the color with the new brightness value calculated
}

void RGBW_send(){
		ws2812_setleds_rgbw(led, LEDpixelcount);//send the frame with size of pixelcount to update the strip
     db4:	64 eb       	ldi	r22, 0xB4	; 180
     db6:	70 e0       	ldi	r23, 0x00	; 0
     db8:	86 e2       	ldi	r24, 0x26	; 38
     dba:	91 e0       	ldi	r25, 0x01	; 1
     dbc:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <ws2812_setleds_rgbw>
	RGBW_send();
}

void effect_snakeBounce_b(int length, uint32_t color){ // make a bouncing snake
		int tail = 0;
		for(int i = 0; i < LEDpixelcount; i++){
     dc0:	3f ef       	ldi	r19, 0xFF	; 255
     dc2:	23 1a       	sub	r2, r19
     dc4:	33 0a       	sbc	r3, r19
     dc6:	8f 89       	ldd	r24, Y+23	; 0x17
     dc8:	98 8d       	ldd	r25, Y+24	; 0x18
     dca:	04 96       	adiw	r24, 0x04	; 4
     dcc:	98 8f       	std	Y+24, r25	; 0x18
     dce:	8f 8b       	std	Y+23, r24	; 0x17
     dd0:	94 eb       	ldi	r25, 0xB4	; 180
     dd2:	29 16       	cp	r2, r25
     dd4:	31 04       	cpc	r3, r1
     dd6:	09 f4       	brne	.+2      	; 0xdda <effect_snakeBounce_b+0xf2>
     dd8:	6f c0       	rjmp	.+222    	; 0xeb8 <effect_snakeBounce_b+0x1d0>
uint16_t exLow = -1;
uint16_t exHigh = -1;

void setRGBW_pixel(uint16_t pixel, uint32_t color){

	if (pixel < exLow || pixel >= exHigh)
     dda:	00 91 04 01 	lds	r16, 0x0104	; 0x800104 <exLow>
     dde:	10 91 05 01 	lds	r17, 0x0105	; 0x800105 <exLow+0x1>
     de2:	20 16       	cp	r2, r16
     de4:	31 06       	cpc	r3, r17
     de6:	38 f0       	brcs	.+14     	; 0xdf6 <effect_snakeBounce_b+0x10e>
     de8:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <exHigh>
     dec:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <exHigh+0x1>
     df0:	28 16       	cp	r2, r24
     df2:	39 06       	cpc	r3, r25
     df4:	38 f2       	brcs	.-114    	; 0xd84 <effect_snakeBounce_b+0x9c>

void calcBrightness(uint32_t *color, uint8_t _brightness){
	uint32_t buf = 0;
	uint32_t colorb = 0;

	buf = (((*color>>8*3)	& 0x000000FF) * _brightness) / 255;
     df6:	c0 90 06 01 	lds	r12, 0x0106	; 0x800106 <brightness>
     dfa:	d1 2c       	mov	r13, r1
     dfc:	e1 2c       	mov	r14, r1
     dfe:	f1 2c       	mov	r15, r1

	buf = (((*color>>8*1)	& 0x000000FF) * _brightness) / 255;
	colorb |= (buf<<8*1);

	buf = (( *color			& 0x000000FF) * _brightness) / 255;
	colorb |= (buf);
     e00:	2b 81       	ldd	r18, Y+3	; 0x03
     e02:	3c 81       	ldd	r19, Y+4	; 0x04
     e04:	4d 81       	ldd	r20, Y+5	; 0x05
     e06:	5e 81       	ldd	r21, Y+6	; 0x06
     e08:	c7 01       	movw	r24, r14
     e0a:	b6 01       	movw	r22, r12
     e0c:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <__mulsi3>
     e10:	a5 01       	movw	r20, r10
     e12:	94 01       	movw	r18, r8
     e14:	0e 94 dd 0d 	call	0x1bba	; 0x1bba <__udivmodsi4>
     e18:	72 2e       	mov	r7, r18
     e1a:	66 24       	eor	r6, r6
     e1c:	55 24       	eor	r5, r5
     e1e:	44 24       	eor	r4, r4
     e20:	2b 89       	ldd	r18, Y+19	; 0x13
     e22:	3c 89       	ldd	r19, Y+20	; 0x14
     e24:	4d 89       	ldd	r20, Y+21	; 0x15
     e26:	5e 89       	ldd	r21, Y+22	; 0x16
     e28:	c7 01       	movw	r24, r14
     e2a:	b6 01       	movw	r22, r12
     e2c:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <__mulsi3>
     e30:	a5 01       	movw	r20, r10
     e32:	94 01       	movw	r18, r8
     e34:	0e 94 dd 0d 	call	0x1bba	; 0x1bba <__udivmodsi4>
     e38:	42 2a       	or	r4, r18
     e3a:	53 2a       	or	r5, r19
     e3c:	64 2a       	or	r6, r20
     e3e:	75 2a       	or	r7, r21
     e40:	a7 01       	movw	r20, r14
     e42:	96 01       	movw	r18, r12
     e44:	6f 81       	ldd	r22, Y+7	; 0x07
     e46:	78 85       	ldd	r23, Y+8	; 0x08
     e48:	89 85       	ldd	r24, Y+9	; 0x09
     e4a:	9a 85       	ldd	r25, Y+10	; 0x0a
     e4c:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <__mulsi3>
     e50:	a5 01       	movw	r20, r10
     e52:	94 01       	movw	r18, r8
     e54:	0e 94 dd 0d 	call	0x1bba	; 0x1bba <__udivmodsi4>
     e58:	d9 01       	movw	r26, r18
     e5a:	99 27       	eor	r25, r25
     e5c:	88 27       	eor	r24, r24
     e5e:	48 2a       	or	r4, r24
     e60:	59 2a       	or	r5, r25
     e62:	6a 2a       	or	r6, r26
     e64:	7b 2a       	or	r7, r27
     e66:	a7 01       	movw	r20, r14
     e68:	96 01       	movw	r18, r12
     e6a:	6b 85       	ldd	r22, Y+11	; 0x0b
     e6c:	7c 85       	ldd	r23, Y+12	; 0x0c
     e6e:	8d 85       	ldd	r24, Y+13	; 0x0d
     e70:	9e 85       	ldd	r25, Y+14	; 0x0e
     e72:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <__mulsi3>
     e76:	a5 01       	movw	r20, r10
     e78:	94 01       	movw	r18, r8
     e7a:	0e 94 dd 0d 	call	0x1bba	; 0x1bba <__udivmodsi4>
     e7e:	b4 2f       	mov	r27, r20
     e80:	a3 2f       	mov	r26, r19
     e82:	92 2f       	mov	r25, r18
     e84:	88 27       	eor	r24, r24
     e86:	48 2a       	or	r4, r24
     e88:	59 2a       	or	r5, r25
     e8a:	6a 2a       	or	r6, r26
     e8c:	7b 2a       	or	r7, r27
void setRGBW_pixel(uint16_t pixel, uint32_t color){

	if (pixel < exLow || pixel >= exHigh)
	{
		calcBrightness(&color, brightness);
		led[pixel].r = (uint8_t)((color>>8*3)	& 0x000000FF);
     e8e:	af 89       	ldd	r26, Y+23	; 0x17
     e90:	b8 8d       	ldd	r27, Y+24	; 0x18
     e92:	11 96       	adiw	r26, 0x01	; 1
     e94:	7c 92       	st	X, r7
     e96:	11 97       	sbiw	r26, 0x01	; 1
		led[pixel].g = (uint8_t)((color>>8*2)	& 0x000000FF);
     e98:	6c 92       	st	X, r6
		led[pixel].b = (uint8_t)((color>>8*1)	& 0x000000FF);
     e9a:	12 96       	adiw	r26, 0x02	; 2
     e9c:	5c 92       	st	X, r5
     e9e:	12 97       	sbiw	r26, 0x02	; 2
		led[pixel].w = (uint8_t)( color			& 0x000000FF);
     ea0:	13 96       	adiw	r26, 0x03	; 3
     ea2:	4c 92       	st	X, r4
			setRGBW_pixel(i, color);
			tail = i - length;
			if (tail < 0){
				tail = 0;
			}
			setRGBW_pixel(tail, 0);
     ea4:	c1 01       	movw	r24, r2
     ea6:	29 81       	ldd	r18, Y+1	; 0x01
     ea8:	3a 81       	ldd	r19, Y+2	; 0x02
     eaa:	82 1b       	sub	r24, r18
     eac:	93 0b       	sbc	r25, r19
     eae:	97 ff       	sbrs	r25, 7
     eb0:	76 cf       	rjmp	.-276    	; 0xd9e <effect_snakeBounce_b+0xb6>
     eb2:	80 e0       	ldi	r24, 0x00	; 0
     eb4:	90 e0       	ldi	r25, 0x00	; 0
     eb6:	73 cf       	rjmp	.-282    	; 0xd9e <effect_snakeBounce_b+0xb6>
     eb8:	f2 ef       	ldi	r31, 0xF2	; 242
     eba:	2f 2e       	mov	r2, r31
     ebc:	f3 e0       	ldi	r31, 0x03	; 3
     ebe:	3f 2e       	mov	r3, r31
	RGBW_send();
}

void effect_snakeBounce_b(int length, uint32_t color){ // make a bouncing snake
		int tail = 0;
		for(int i = 0; i < LEDpixelcount; i++){
     ec0:	a3 eb       	ldi	r26, 0xB3	; 179
     ec2:	b0 e0       	ldi	r27, 0x00	; 0
     ec4:	bc 8b       	std	Y+20, r27	; 0x14
     ec6:	ab 8b       	std	Y+19, r26	; 0x13

	buf = (((*color>>8*1)	& 0x000000FF) * _brightness) / 255;
	colorb |= (buf<<8*1);

	buf = (( *color			& 0x000000FF) * _brightness) / 255;
	colorb |= (buf);
     ec8:	81 2c       	mov	r8, r1
     eca:	91 2c       	mov	r9, r1
     ecc:	54 01       	movw	r10, r8
     ece:	8a 94       	dec	r8
     ed0:	8f 85       	ldd	r24, Y+15	; 0x0f
     ed2:	98 89       	ldd	r25, Y+16	; 0x10
     ed4:	a9 89       	ldd	r26, Y+17	; 0x11
     ed6:	ba 89       	ldd	r27, Y+18	; 0x12
     ed8:	99 27       	eor	r25, r25
     eda:	aa 27       	eor	r26, r26
     edc:	bb 27       	eor	r27, r27
     ede:	8f 87       	std	Y+15, r24	; 0x0f
     ee0:	98 8b       	std	Y+16, r25	; 0x10
     ee2:	a9 8b       	std	Y+17, r26	; 0x11
     ee4:	ba 8b       	std	Y+18, r27	; 0x12
     ee6:	34 c0       	rjmp	.+104    	; 0xf50 <effect_snakeBounce_b+0x268>
		led[pixel].r = (uint8_t)((color>>8*3)	& 0x000000FF);
		led[pixel].g = (uint8_t)((color>>8*2)	& 0x000000FF);
		led[pixel].b = (uint8_t)((color>>8*1)	& 0x000000FF);
		led[pixel].w = (uint8_t)( color			& 0x000000FF);
	}else{
		led[pixel].r = 0;
     ee8:	d1 01       	movw	r26, r2
     eea:	11 96       	adiw	r26, 0x01	; 1
     eec:	1c 92       	st	X, r1
     eee:	11 97       	sbiw	r26, 0x01	; 1
		led[pixel].g = 0;
     ef0:	1c 92       	st	X, r1
		led[pixel].b = 0;
     ef2:	12 96       	adiw	r26, 0x02	; 2
     ef4:	1c 92       	st	X, r1
     ef6:	12 97       	sbiw	r26, 0x02	; 2
		led[pixel].w = 0;
     ef8:	13 96       	adiw	r26, 0x03	; 3
     efa:	1c 92       	st	X, r1
			setRGBW_pixel(i, color);
			tail = i + length;
			if (tail > LEDpixelcount-1){
				tail = LEDpixelcount-1;
			}
			setRGBW_pixel(tail, 0);
     efc:	89 81       	ldd	r24, Y+1	; 0x01
     efe:	9a 81       	ldd	r25, Y+2	; 0x02
     f00:	eb 89       	ldd	r30, Y+19	; 0x13
     f02:	fc 89       	ldd	r31, Y+20	; 0x14
     f04:	8e 0f       	add	r24, r30
     f06:	9f 1f       	adc	r25, r31
     f08:	84 3b       	cpi	r24, 0xB4	; 180
     f0a:	91 05       	cpc	r25, r1
     f0c:	14 f0       	brlt	.+4      	; 0xf12 <effect_snakeBounce_b+0x22a>
     f0e:	83 eb       	ldi	r24, 0xB3	; 179
     f10:	90 e0       	ldi	r25, 0x00	; 0
		led[pixel].r = (uint8_t)((color>>8*3)	& 0x000000FF);
		led[pixel].g = (uint8_t)((color>>8*2)	& 0x000000FF);
		led[pixel].b = (uint8_t)((color>>8*1)	& 0x000000FF);
		led[pixel].w = (uint8_t)( color			& 0x000000FF);
	}else{
		led[pixel].r = 0;
     f12:	88 0f       	add	r24, r24
     f14:	99 1f       	adc	r25, r25
     f16:	88 0f       	add	r24, r24
     f18:	99 1f       	adc	r25, r25
     f1a:	fc 01       	movw	r30, r24
     f1c:	ea 5d       	subi	r30, 0xDA	; 218
     f1e:	fe 4f       	sbci	r31, 0xFE	; 254
     f20:	11 82       	std	Z+1, r1	; 0x01
		led[pixel].g = 0;
     f22:	10 82       	st	Z, r1
		led[pixel].b = 0;
     f24:	12 82       	std	Z+2, r1	; 0x02
		led[pixel].w = 0;
     f26:	13 82       	std	Z+3, r1	; 0x03

	*color = colorb;//update the color with the new brightness value calculated
}

void RGBW_send(){
		ws2812_setleds_rgbw(led, LEDpixelcount);//send the frame with size of pixelcount to update the strip
     f28:	64 eb       	ldi	r22, 0xB4	; 180
     f2a:	70 e0       	ldi	r23, 0x00	; 0
     f2c:	86 e2       	ldi	r24, 0x26	; 38
     f2e:	91 e0       	ldi	r25, 0x01	; 1
     f30:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <ws2812_setleds_rgbw>
				tail = 0;
			}
			setRGBW_pixel(tail, 0);
			RGBW_send();
		}
		for(int i = LEDpixelcount-1; i >= 0; i--){
     f34:	2b 89       	ldd	r18, Y+19	; 0x13
     f36:	3c 89       	ldd	r19, Y+20	; 0x14
     f38:	21 50       	subi	r18, 0x01	; 1
     f3a:	31 09       	sbc	r19, r1
     f3c:	3c 8b       	std	Y+20, r19	; 0x14
     f3e:	2b 8b       	std	Y+19, r18	; 0x13
     f40:	34 e0       	ldi	r19, 0x04	; 4
     f42:	23 1a       	sub	r2, r19
     f44:	31 08       	sbc	r3, r1
     f46:	8b 89       	ldd	r24, Y+19	; 0x13
     f48:	9c 89       	ldd	r25, Y+20	; 0x14
     f4a:	01 96       	adiw	r24, 0x01	; 1
     f4c:	09 f4       	brne	.+2      	; 0xf50 <effect_snakeBounce_b+0x268>
     f4e:	63 c0       	rjmp	.+198    	; 0x1016 <effect_snakeBounce_b+0x32e>
uint16_t exLow = -1;
uint16_t exHigh = -1;

void setRGBW_pixel(uint16_t pixel, uint32_t color){

	if (pixel < exLow || pixel >= exHigh)
     f50:	00 91 04 01 	lds	r16, 0x0104	; 0x800104 <exLow>
     f54:	10 91 05 01 	lds	r17, 0x0105	; 0x800105 <exLow+0x1>
     f58:	ab 89       	ldd	r26, Y+19	; 0x13
     f5a:	bc 89       	ldd	r27, Y+20	; 0x14
     f5c:	a0 17       	cp	r26, r16
     f5e:	b1 07       	cpc	r27, r17
     f60:	40 f0       	brcs	.+16     	; 0xf72 <effect_snakeBounce_b+0x28a>
     f62:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <exHigh>
     f66:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <exHigh+0x1>
     f6a:	a8 17       	cp	r26, r24
     f6c:	b9 07       	cpc	r27, r25
     f6e:	08 f4       	brcc	.+2      	; 0xf72 <effect_snakeBounce_b+0x28a>
     f70:	bb cf       	rjmp	.-138    	; 0xee8 <effect_snakeBounce_b+0x200>

void calcBrightness(uint32_t *color, uint8_t _brightness){
	uint32_t buf = 0;
	uint32_t colorb = 0;

	buf = (((*color>>8*3)	& 0x000000FF) * _brightness) / 255;
     f72:	c0 90 06 01 	lds	r12, 0x0106	; 0x800106 <brightness>
     f76:	d1 2c       	mov	r13, r1
     f78:	e1 2c       	mov	r14, r1
     f7a:	f1 2c       	mov	r15, r1

	buf = (((*color>>8*1)	& 0x000000FF) * _brightness) / 255;
	colorb |= (buf<<8*1);

	buf = (( *color			& 0x000000FF) * _brightness) / 255;
	colorb |= (buf);
     f7c:	2b 81       	ldd	r18, Y+3	; 0x03
     f7e:	3c 81       	ldd	r19, Y+4	; 0x04
     f80:	4d 81       	ldd	r20, Y+5	; 0x05
     f82:	5e 81       	ldd	r21, Y+6	; 0x06
     f84:	c7 01       	movw	r24, r14
     f86:	b6 01       	movw	r22, r12
     f88:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <__mulsi3>
     f8c:	a5 01       	movw	r20, r10
     f8e:	94 01       	movw	r18, r8
     f90:	0e 94 dd 0d 	call	0x1bba	; 0x1bba <__udivmodsi4>
     f94:	72 2e       	mov	r7, r18
     f96:	66 24       	eor	r6, r6
     f98:	55 24       	eor	r5, r5
     f9a:	44 24       	eor	r4, r4
     f9c:	2f 85       	ldd	r18, Y+15	; 0x0f
     f9e:	38 89       	ldd	r19, Y+16	; 0x10
     fa0:	49 89       	ldd	r20, Y+17	; 0x11
     fa2:	5a 89       	ldd	r21, Y+18	; 0x12
     fa4:	c7 01       	movw	r24, r14
     fa6:	b6 01       	movw	r22, r12
     fa8:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <__mulsi3>
     fac:	a5 01       	movw	r20, r10
     fae:	94 01       	movw	r18, r8
     fb0:	0e 94 dd 0d 	call	0x1bba	; 0x1bba <__udivmodsi4>
     fb4:	42 2a       	or	r4, r18
     fb6:	53 2a       	or	r5, r19
     fb8:	64 2a       	or	r6, r20
     fba:	75 2a       	or	r7, r21
     fbc:	2f 81       	ldd	r18, Y+7	; 0x07
     fbe:	38 85       	ldd	r19, Y+8	; 0x08
     fc0:	49 85       	ldd	r20, Y+9	; 0x09
     fc2:	5a 85       	ldd	r21, Y+10	; 0x0a
     fc4:	c7 01       	movw	r24, r14
     fc6:	b6 01       	movw	r22, r12
     fc8:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <__mulsi3>
     fcc:	a5 01       	movw	r20, r10
     fce:	94 01       	movw	r18, r8
     fd0:	0e 94 dd 0d 	call	0x1bba	; 0x1bba <__udivmodsi4>
     fd4:	d9 01       	movw	r26, r18
     fd6:	99 27       	eor	r25, r25
     fd8:	88 27       	eor	r24, r24
     fda:	48 2a       	or	r4, r24
     fdc:	59 2a       	or	r5, r25
     fde:	6a 2a       	or	r6, r26
     fe0:	7b 2a       	or	r7, r27
     fe2:	2b 85       	ldd	r18, Y+11	; 0x0b
     fe4:	3c 85       	ldd	r19, Y+12	; 0x0c
     fe6:	4d 85       	ldd	r20, Y+13	; 0x0d
     fe8:	5e 85       	ldd	r21, Y+14	; 0x0e
     fea:	c7 01       	movw	r24, r14
     fec:	b6 01       	movw	r22, r12
     fee:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <__mulsi3>
     ff2:	a5 01       	movw	r20, r10
     ff4:	94 01       	movw	r18, r8
     ff6:	0e 94 dd 0d 	call	0x1bba	; 0x1bba <__udivmodsi4>
     ffa:	b4 2f       	mov	r27, r20
     ffc:	a3 2f       	mov	r26, r19
     ffe:	92 2f       	mov	r25, r18
    1000:	88 27       	eor	r24, r24
    1002:	48 2a       	or	r4, r24
    1004:	59 2a       	or	r5, r25
    1006:	6a 2a       	or	r6, r26
    1008:	7b 2a       	or	r7, r27
void setRGBW_pixel(uint16_t pixel, uint32_t color){

	if (pixel < exLow || pixel >= exHigh)
	{
		calcBrightness(&color, brightness);
		led[pixel].r = (uint8_t)((color>>8*3)	& 0x000000FF);
    100a:	f1 01       	movw	r30, r2
    100c:	71 82       	std	Z+1, r7	; 0x01
		led[pixel].g = (uint8_t)((color>>8*2)	& 0x000000FF);
    100e:	60 82       	st	Z, r6
		led[pixel].b = (uint8_t)((color>>8*1)	& 0x000000FF);
    1010:	52 82       	std	Z+2, r5	; 0x02
		led[pixel].w = (uint8_t)( color			& 0x000000FF);
    1012:	43 82       	std	Z+3, r4	; 0x03
    1014:	73 cf       	rjmp	.-282    	; 0xefc <effect_snakeBounce_b+0x214>
				tail = LEDpixelcount-1;
			}
			setRGBW_pixel(tail, 0);
			RGBW_send();
		}
}
    1016:	68 96       	adiw	r28, 0x18	; 24
    1018:	0f b6       	in	r0, 0x3f	; 63
    101a:	f8 94       	cli
    101c:	de bf       	out	0x3e, r29	; 62
    101e:	0f be       	out	0x3f, r0	; 63
    1020:	cd bf       	out	0x3d, r28	; 61
    1022:	df 91       	pop	r29
    1024:	cf 91       	pop	r28
    1026:	1f 91       	pop	r17
    1028:	0f 91       	pop	r16
    102a:	ff 90       	pop	r15
    102c:	ef 90       	pop	r14
    102e:	df 90       	pop	r13
    1030:	cf 90       	pop	r12
    1032:	bf 90       	pop	r11
    1034:	af 90       	pop	r10
    1036:	9f 90       	pop	r9
    1038:	8f 90       	pop	r8
    103a:	7f 90       	pop	r7
    103c:	6f 90       	pop	r6
    103e:	5f 90       	pop	r5
    1040:	4f 90       	pop	r4
    1042:	3f 90       	pop	r3
    1044:	2f 90       	pop	r2
    1046:	08 95       	ret

00001048 <effect_snakeBounce_nb>:

void effect_snakeBounce_nb(int length, uint32_t color){ // make a bouncing snake
    1048:	2f 92       	push	r2
    104a:	3f 92       	push	r3
    104c:	4f 92       	push	r4
    104e:	5f 92       	push	r5
    1050:	6f 92       	push	r6
    1052:	7f 92       	push	r7
    1054:	8f 92       	push	r8
    1056:	9f 92       	push	r9
    1058:	af 92       	push	r10
    105a:	bf 92       	push	r11
    105c:	cf 92       	push	r12
    105e:	df 92       	push	r13
    1060:	ef 92       	push	r14
    1062:	ff 92       	push	r15
    1064:	0f 93       	push	r16
    1066:	1f 93       	push	r17
    1068:	cf 93       	push	r28
    106a:	df 93       	push	r29
    106c:	00 d0       	rcall	.+0      	; 0x106e <effect_snakeBounce_nb+0x26>
    106e:	00 d0       	rcall	.+0      	; 0x1070 <effect_snakeBounce_nb+0x28>
    1070:	cd b7       	in	r28, 0x3d	; 61
    1072:	de b7       	in	r29, 0x3e	; 62
    1074:	1c 01       	movw	r2, r24
    1076:	6a 01       	movw	r12, r20
    1078:	7b 01       	movw	r14, r22
	int tail = 0;
	static int i = 0;
	static _Bool reverse = 0;
	
	if (i<LEDpixelcount && !reverse){
    107a:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <i.2083>
    107e:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <i.2083+0x1>
    1082:	3c 83       	std	Y+4, r19	; 0x04
    1084:	2b 83       	std	Y+3, r18	; 0x03
    1086:	89 01       	movw	r16, r18
    1088:	24 3b       	cpi	r18, 0xB4	; 180
    108a:	31 05       	cpc	r19, r1
    108c:	34 f5       	brge	.+76     	; 0x10da <effect_snakeBounce_nb+0x92>
    108e:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <reverse.2084>
    1092:	88 23       	and	r24, r24
    1094:	09 f4       	brne	.+2      	; 0x1098 <effect_snakeBounce_nb+0x50>
    1096:	7a c0       	rjmp	.+244    	; 0x118c <effect_snakeBounce_nb+0x144>
		}
		setRGBW_pixel(tail, 0);
		RGBW_send();
		i++;
	}else{
		reverse = 1;	
    1098:	81 e0       	ldi	r24, 0x01	; 1
    109a:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <reverse.2084>
	}
	 
	if (i > 0 && reverse){
    109e:	8b 81       	ldd	r24, Y+3	; 0x03
    10a0:	9c 81       	ldd	r25, Y+4	; 0x04
    10a2:	18 16       	cp	r1, r24
    10a4:	19 06       	cpc	r1, r25
    10a6:	e4 f0       	brlt	.+56     	; 0x10e0 <effect_snakeBounce_nb+0x98>
		setRGBW_pixel(tail, 0);
		RGBW_send();
		
		i--;
	}else{
		reverse = 0;
    10a8:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <reverse.2084>
	}

}
    10ac:	0f 90       	pop	r0
    10ae:	0f 90       	pop	r0
    10b0:	0f 90       	pop	r0
    10b2:	0f 90       	pop	r0
    10b4:	df 91       	pop	r29
    10b6:	cf 91       	pop	r28
    10b8:	1f 91       	pop	r17
    10ba:	0f 91       	pop	r16
    10bc:	ff 90       	pop	r15
    10be:	ef 90       	pop	r14
    10c0:	df 90       	pop	r13
    10c2:	cf 90       	pop	r12
    10c4:	bf 90       	pop	r11
    10c6:	af 90       	pop	r10
    10c8:	9f 90       	pop	r9
    10ca:	8f 90       	pop	r8
    10cc:	7f 90       	pop	r7
    10ce:	6f 90       	pop	r6
    10d0:	5f 90       	pop	r5
    10d2:	4f 90       	pop	r4
    10d4:	3f 90       	pop	r3
    10d6:	2f 90       	pop	r2
    10d8:	08 95       	ret
		}
		setRGBW_pixel(tail, 0);
		RGBW_send();
		i++;
	}else{
		reverse = 1;	
    10da:	81 e0       	ldi	r24, 0x01	; 1
    10dc:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <reverse.2084>
uint16_t exLow = -1;
uint16_t exHigh = -1;

void setRGBW_pixel(uint16_t pixel, uint32_t color){

	if (pixel < exLow || pixel >= exHigh)
    10e0:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <exLow>
    10e4:	f0 91 05 01 	lds	r31, 0x0105	; 0x800105 <exLow+0x1>
    10e8:	fa 83       	std	Y+2, r31	; 0x02
    10ea:	e9 83       	std	Y+1, r30	; 0x01
    10ec:	0e 17       	cp	r16, r30
    10ee:	1f 07       	cpc	r17, r31
    10f0:	08 f4       	brcc	.+2      	; 0x10f4 <effect_snakeBounce_nb+0xac>
    10f2:	a6 c0       	rjmp	.+332    	; 0x1240 <effect_snakeBounce_nb+0x1f8>
    10f4:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <exHigh>
    10f8:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <exHigh+0x1>
    10fc:	08 17       	cp	r16, r24
    10fe:	19 07       	cpc	r17, r25
    1100:	08 f0       	brcs	.+2      	; 0x1104 <effect_snakeBounce_nb+0xbc>
    1102:	9e c0       	rjmp	.+316    	; 0x1240 <effect_snakeBounce_nb+0x1f8>
		led[pixel].r = (uint8_t)((color>>8*3)	& 0x000000FF);
		led[pixel].g = (uint8_t)((color>>8*2)	& 0x000000FF);
		led[pixel].b = (uint8_t)((color>>8*1)	& 0x000000FF);
		led[pixel].w = (uint8_t)( color			& 0x000000FF);
	}else{
		led[pixel].r = 0;
    1104:	00 0f       	add	r16, r16
    1106:	11 1f       	adc	r17, r17
    1108:	00 0f       	add	r16, r16
    110a:	11 1f       	adc	r17, r17
    110c:	f8 01       	movw	r30, r16
    110e:	ea 5d       	subi	r30, 0xDA	; 218
    1110:	fe 4f       	sbci	r31, 0xFE	; 254
    1112:	11 82       	std	Z+1, r1	; 0x01
		led[pixel].g = 0;
    1114:	10 82       	st	Z, r1
		led[pixel].b = 0;
    1116:	12 82       	std	Z+2, r1	; 0x02
		led[pixel].w = 0;
    1118:	13 82       	std	Z+3, r1	; 0x03
		reverse = 1;	
	}
	 
	if (i > 0 && reverse){
		setRGBW_pixel(i, color);
		tail = i + length;
    111a:	2b 81       	ldd	r18, Y+3	; 0x03
    111c:	3c 81       	ldd	r19, Y+4	; 0x04
    111e:	22 0d       	add	r18, r2
    1120:	33 1d       	adc	r19, r3
    1122:	3c 83       	std	Y+4, r19	; 0x04
    1124:	2b 83       	std	Y+3, r18	; 0x03
		if (tail > LEDpixelcount-1){
			tail = LEDpixelcount-1;
		}
		setRGBW_pixel(tail, 0);
    1126:	24 3b       	cpi	r18, 0xB4	; 180
    1128:	31 05       	cpc	r19, r1
    112a:	24 f0       	brlt	.+8      	; 0x1134 <effect_snakeBounce_nb+0xec>
    112c:	83 eb       	ldi	r24, 0xB3	; 179
    112e:	90 e0       	ldi	r25, 0x00	; 0
    1130:	9c 83       	std	Y+4, r25	; 0x04
    1132:	8b 83       	std	Y+3, r24	; 0x03
uint16_t exLow = -1;
uint16_t exHigh = -1;

void setRGBW_pixel(uint16_t pixel, uint32_t color){

	if (pixel < exLow || pixel >= exHigh)
    1134:	eb 81       	ldd	r30, Y+3	; 0x03
    1136:	fc 81       	ldd	r31, Y+4	; 0x04
    1138:	29 81       	ldd	r18, Y+1	; 0x01
    113a:	3a 81       	ldd	r19, Y+2	; 0x02
    113c:	e2 17       	cp	r30, r18
    113e:	f3 07       	cpc	r31, r19
    1140:	08 f4       	brcc	.+2      	; 0x1144 <effect_snakeBounce_nb+0xfc>
    1142:	d8 c0       	rjmp	.+432    	; 0x12f4 <effect_snakeBounce_nb+0x2ac>
    1144:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <exHigh>
    1148:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <exHigh+0x1>
    114c:	e8 17       	cp	r30, r24
    114e:	f9 07       	cpc	r31, r25
    1150:	08 f0       	brcs	.+2      	; 0x1154 <effect_snakeBounce_nb+0x10c>
    1152:	d0 c0       	rjmp	.+416    	; 0x12f4 <effect_snakeBounce_nb+0x2ac>
    1154:	9f 01       	movw	r18, r30
		led[pixel].r = (uint8_t)((color>>8*3)	& 0x000000FF);
		led[pixel].g = (uint8_t)((color>>8*2)	& 0x000000FF);
		led[pixel].b = (uint8_t)((color>>8*1)	& 0x000000FF);
		led[pixel].w = (uint8_t)( color			& 0x000000FF);
	}else{
		led[pixel].r = 0;
    1156:	22 0f       	add	r18, r18
    1158:	33 1f       	adc	r19, r19
    115a:	22 0f       	add	r18, r18
    115c:	33 1f       	adc	r19, r19
    115e:	2a 5d       	subi	r18, 0xDA	; 218
    1160:	3e 4f       	sbci	r19, 0xFE	; 254
    1162:	f9 01       	movw	r30, r18
    1164:	11 82       	std	Z+1, r1	; 0x01
		led[pixel].g = 0;
    1166:	10 82       	st	Z, r1
		led[pixel].b = 0;
    1168:	12 82       	std	Z+2, r1	; 0x02
		led[pixel].w = 0;
    116a:	13 82       	std	Z+3, r1	; 0x03

	*color = colorb;//update the color with the new brightness value calculated
}

void RGBW_send(){
		ws2812_setleds_rgbw(led, LEDpixelcount);//send the frame with size of pixelcount to update the strip
    116c:	64 eb       	ldi	r22, 0xB4	; 180
    116e:	70 e0       	ldi	r23, 0x00	; 0
    1170:	86 e2       	ldi	r24, 0x26	; 38
    1172:	91 e0       	ldi	r25, 0x01	; 1
    1174:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <ws2812_setleds_rgbw>
			tail = LEDpixelcount-1;
		}
		setRGBW_pixel(tail, 0);
		RGBW_send();
		
		i--;
    1178:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <i.2083>
    117c:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <i.2083+0x1>
    1180:	01 97       	sbiw	r24, 0x01	; 1
    1182:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <i.2083+0x1>
    1186:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <i.2083>
    118a:	90 cf       	rjmp	.-224    	; 0x10ac <effect_snakeBounce_nb+0x64>
uint16_t exLow = -1;
uint16_t exHigh = -1;

void setRGBW_pixel(uint16_t pixel, uint32_t color){

	if (pixel < exLow || pixel >= exHigh)
    118c:	00 91 04 01 	lds	r16, 0x0104	; 0x800104 <exLow>
    1190:	10 91 05 01 	lds	r17, 0x0105	; 0x800105 <exLow+0x1>
    1194:	20 17       	cp	r18, r16
    1196:	31 07       	cpc	r19, r17
    1198:	08 f4       	brcc	.+2      	; 0x119c <effect_snakeBounce_nb+0x154>
    119a:	bd c0       	rjmp	.+378    	; 0x1316 <effect_snakeBounce_nb+0x2ce>
    119c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <exHigh>
    11a0:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <exHigh+0x1>
    11a4:	28 17       	cp	r18, r24
    11a6:	39 07       	cpc	r19, r25
    11a8:	08 f0       	brcs	.+2      	; 0x11ac <effect_snakeBounce_nb+0x164>
    11aa:	b5 c0       	rjmp	.+362    	; 0x1316 <effect_snakeBounce_nb+0x2ce>
    11ac:	f9 01       	movw	r30, r18
		led[pixel].r = (uint8_t)((color>>8*3)	& 0x000000FF);
		led[pixel].g = (uint8_t)((color>>8*2)	& 0x000000FF);
		led[pixel].b = (uint8_t)((color>>8*1)	& 0x000000FF);
		led[pixel].w = (uint8_t)( color			& 0x000000FF);
	}else{
		led[pixel].r = 0;
    11ae:	ee 0f       	add	r30, r30
    11b0:	ff 1f       	adc	r31, r31
    11b2:	ee 0f       	add	r30, r30
    11b4:	ff 1f       	adc	r31, r31
    11b6:	ea 5d       	subi	r30, 0xDA	; 218
    11b8:	fe 4f       	sbci	r31, 0xFE	; 254
    11ba:	11 82       	std	Z+1, r1	; 0x01
		led[pixel].g = 0;
    11bc:	10 82       	st	Z, r1
		led[pixel].b = 0;
    11be:	12 82       	std	Z+2, r1	; 0x02
		led[pixel].w = 0;
    11c0:	13 82       	std	Z+3, r1	; 0x03
		setRGBW_pixel(i, color);
		tail = i - length;
		if (tail < 0){
			tail = 0;
		}
		setRGBW_pixel(tail, 0);
    11c2:	8b 81       	ldd	r24, Y+3	; 0x03
    11c4:	9c 81       	ldd	r25, Y+4	; 0x04
    11c6:	82 19       	sub	r24, r2
    11c8:	93 09       	sbc	r25, r3
    11ca:	9a 83       	std	Y+2, r25	; 0x02
    11cc:	89 83       	std	Y+1, r24	; 0x01
    11ce:	97 fd       	sbrc	r25, 7
    11d0:	fd c0       	rjmp	.+506    	; 0x13cc <effect_snakeBounce_nb+0x384>
uint16_t exLow = -1;
uint16_t exHigh = -1;

void setRGBW_pixel(uint16_t pixel, uint32_t color){

	if (pixel < exLow || pixel >= exHigh)
    11d2:	e9 81       	ldd	r30, Y+1	; 0x01
    11d4:	fa 81       	ldd	r31, Y+2	; 0x02
    11d6:	e0 17       	cp	r30, r16
    11d8:	f1 07       	cpc	r31, r17
    11da:	08 f4       	brcc	.+2      	; 0x11de <effect_snakeBounce_nb+0x196>
    11dc:	99 c0       	rjmp	.+306    	; 0x1310 <effect_snakeBounce_nb+0x2c8>
    11de:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <exHigh>
    11e2:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <exHigh+0x1>
    11e6:	e8 17       	cp	r30, r24
    11e8:	f9 07       	cpc	r31, r25
    11ea:	08 f0       	brcs	.+2      	; 0x11ee <effect_snakeBounce_nb+0x1a6>
    11ec:	91 c0       	rjmp	.+290    	; 0x1310 <effect_snakeBounce_nb+0x2c8>
    11ee:	9f 01       	movw	r18, r30
		led[pixel].r = (uint8_t)((color>>8*3)	& 0x000000FF);
		led[pixel].g = (uint8_t)((color>>8*2)	& 0x000000FF);
		led[pixel].b = (uint8_t)((color>>8*1)	& 0x000000FF);
		led[pixel].w = (uint8_t)( color			& 0x000000FF);
	}else{
		led[pixel].r = 0;
    11f0:	22 0f       	add	r18, r18
    11f2:	33 1f       	adc	r19, r19
    11f4:	22 0f       	add	r18, r18
    11f6:	33 1f       	adc	r19, r19
    11f8:	2a 5d       	subi	r18, 0xDA	; 218
    11fa:	3e 4f       	sbci	r19, 0xFE	; 254
    11fc:	f9 01       	movw	r30, r18
    11fe:	11 82       	std	Z+1, r1	; 0x01
		led[pixel].g = 0;
    1200:	10 82       	st	Z, r1
		led[pixel].b = 0;
    1202:	12 82       	std	Z+2, r1	; 0x02
		led[pixel].w = 0;
    1204:	13 82       	std	Z+3, r1	; 0x03

	*color = colorb;//update the color with the new brightness value calculated
}

void RGBW_send(){
		ws2812_setleds_rgbw(led, LEDpixelcount);//send the frame with size of pixelcount to update the strip
    1206:	64 eb       	ldi	r22, 0xB4	; 180
    1208:	70 e0       	ldi	r23, 0x00	; 0
    120a:	86 e2       	ldi	r24, 0x26	; 38
    120c:	91 e0       	ldi	r25, 0x01	; 1
    120e:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <ws2812_setleds_rgbw>
		if (tail < 0){
			tail = 0;
		}
		setRGBW_pixel(tail, 0);
		RGBW_send();
		i++;
    1212:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <i.2083>
    1216:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <i.2083+0x1>
    121a:	89 01       	movw	r16, r18
    121c:	0f 5f       	subi	r16, 0xFF	; 255
    121e:	1f 4f       	sbci	r17, 0xFF	; 255
    1220:	1c 83       	std	Y+4, r17	; 0x04
    1222:	0b 83       	std	Y+3, r16	; 0x03
    1224:	10 93 0d 01 	sts	0x010D, r17	; 0x80010d <i.2083+0x1>
    1228:	00 93 0c 01 	sts	0x010C, r16	; 0x80010c <i.2083>
	}else{
		reverse = 1;	
	}
	 
	if (i > 0 && reverse){
    122c:	10 16       	cp	r1, r16
    122e:	11 06       	cpc	r1, r17
    1230:	0c f0       	brlt	.+2      	; 0x1234 <effect_snakeBounce_nb+0x1ec>
    1232:	3a cf       	rjmp	.-396    	; 0x10a8 <effect_snakeBounce_nb+0x60>
    1234:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <reverse.2084>
    1238:	88 23       	and	r24, r24
    123a:	09 f4       	brne	.+2      	; 0x123e <effect_snakeBounce_nb+0x1f6>
    123c:	35 cf       	rjmp	.-406    	; 0x10a8 <effect_snakeBounce_nb+0x60>
    123e:	50 cf       	rjmp	.-352    	; 0x10e0 <effect_snakeBounce_nb+0x98>

void calcBrightness(uint32_t *color, uint8_t _brightness){
	uint32_t buf = 0;
	uint32_t colorb = 0;

	buf = (((*color>>8*3)	& 0x000000FF) * _brightness) / 255;
    1240:	80 90 06 01 	lds	r8, 0x0106	; 0x800106 <brightness>
    1244:	91 2c       	mov	r9, r1
    1246:	a1 2c       	mov	r10, r1
    1248:	b1 2c       	mov	r11, r1

	buf = (((*color>>8*1)	& 0x000000FF) * _brightness) / 255;
	colorb |= (buf<<8*1);

	buf = (( *color			& 0x000000FF) * _brightness) / 255;
	colorb |= (buf);
    124a:	2f 2d       	mov	r18, r15
    124c:	33 27       	eor	r19, r19
    124e:	44 27       	eor	r20, r20
    1250:	55 27       	eor	r21, r21
    1252:	c5 01       	movw	r24, r10
    1254:	b4 01       	movw	r22, r8
    1256:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <__mulsi3>
    125a:	2f ef       	ldi	r18, 0xFF	; 255
    125c:	30 e0       	ldi	r19, 0x00	; 0
    125e:	40 e0       	ldi	r20, 0x00	; 0
    1260:	50 e0       	ldi	r21, 0x00	; 0
    1262:	0e 94 dd 0d 	call	0x1bba	; 0x1bba <__udivmodsi4>
    1266:	72 2e       	mov	r7, r18
    1268:	66 24       	eor	r6, r6
    126a:	55 24       	eor	r5, r5
    126c:	44 24       	eor	r4, r4
    126e:	ac 2d       	mov	r26, r12
    1270:	b0 e0       	ldi	r27, 0x00	; 0
    1272:	a5 01       	movw	r20, r10
    1274:	94 01       	movw	r18, r8
    1276:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <__muluhisi3>
    127a:	2f ef       	ldi	r18, 0xFF	; 255
    127c:	30 e0       	ldi	r19, 0x00	; 0
    127e:	40 e0       	ldi	r20, 0x00	; 0
    1280:	50 e0       	ldi	r21, 0x00	; 0
    1282:	0e 94 dd 0d 	call	0x1bba	; 0x1bba <__udivmodsi4>
    1286:	42 2a       	or	r4, r18
    1288:	53 2a       	or	r5, r19
    128a:	64 2a       	or	r6, r20
    128c:	75 2a       	or	r7, r21
    128e:	ae 2d       	mov	r26, r14
    1290:	b0 e0       	ldi	r27, 0x00	; 0
    1292:	a5 01       	movw	r20, r10
    1294:	94 01       	movw	r18, r8
    1296:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <__muluhisi3>
    129a:	2f ef       	ldi	r18, 0xFF	; 255
    129c:	30 e0       	ldi	r19, 0x00	; 0
    129e:	40 e0       	ldi	r20, 0x00	; 0
    12a0:	50 e0       	ldi	r21, 0x00	; 0
    12a2:	0e 94 dd 0d 	call	0x1bba	; 0x1bba <__udivmodsi4>
    12a6:	d9 01       	movw	r26, r18
    12a8:	99 27       	eor	r25, r25
    12aa:	88 27       	eor	r24, r24
    12ac:	48 2a       	or	r4, r24
    12ae:	59 2a       	or	r5, r25
    12b0:	6a 2a       	or	r6, r26
    12b2:	7b 2a       	or	r7, r27
    12b4:	ad 2d       	mov	r26, r13
    12b6:	b0 e0       	ldi	r27, 0x00	; 0
    12b8:	a5 01       	movw	r20, r10
    12ba:	94 01       	movw	r18, r8
    12bc:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <__muluhisi3>
    12c0:	2f ef       	ldi	r18, 0xFF	; 255
    12c2:	30 e0       	ldi	r19, 0x00	; 0
    12c4:	40 e0       	ldi	r20, 0x00	; 0
    12c6:	50 e0       	ldi	r21, 0x00	; 0
    12c8:	0e 94 dd 0d 	call	0x1bba	; 0x1bba <__udivmodsi4>
    12cc:	b4 2f       	mov	r27, r20
    12ce:	a3 2f       	mov	r26, r19
    12d0:	92 2f       	mov	r25, r18
    12d2:	88 27       	eor	r24, r24
    12d4:	48 2a       	or	r4, r24
    12d6:	59 2a       	or	r5, r25
    12d8:	6a 2a       	or	r6, r26
    12da:	7b 2a       	or	r7, r27
void setRGBW_pixel(uint16_t pixel, uint32_t color){

	if (pixel < exLow || pixel >= exHigh)
	{
		calcBrightness(&color, brightness);
		led[pixel].r = (uint8_t)((color>>8*3)	& 0x000000FF);
    12dc:	00 0f       	add	r16, r16
    12de:	11 1f       	adc	r17, r17
    12e0:	00 0f       	add	r16, r16
    12e2:	11 1f       	adc	r17, r17
    12e4:	f8 01       	movw	r30, r16
    12e6:	ea 5d       	subi	r30, 0xDA	; 218
    12e8:	fe 4f       	sbci	r31, 0xFE	; 254
    12ea:	71 82       	std	Z+1, r7	; 0x01
		led[pixel].g = (uint8_t)((color>>8*2)	& 0x000000FF);
    12ec:	60 82       	st	Z, r6
		led[pixel].b = (uint8_t)((color>>8*1)	& 0x000000FF);
    12ee:	52 82       	std	Z+2, r5	; 0x02
		led[pixel].w = (uint8_t)( color			& 0x000000FF);
    12f0:	43 82       	std	Z+3, r4	; 0x03
    12f2:	13 cf       	rjmp	.-474    	; 0x111a <effect_snakeBounce_nb+0xd2>
void setRGBW_pixel(uint16_t pixel, uint32_t color){

	if (pixel < exLow || pixel >= exHigh)
	{
		calcBrightness(&color, brightness);
		led[pixel].r = (uint8_t)((color>>8*3)	& 0x000000FF);
    12f4:	8b 81       	ldd	r24, Y+3	; 0x03
    12f6:	9c 81       	ldd	r25, Y+4	; 0x04
    12f8:	88 0f       	add	r24, r24
    12fa:	99 1f       	adc	r25, r25
    12fc:	88 0f       	add	r24, r24
    12fe:	99 1f       	adc	r25, r25
    1300:	8a 5d       	subi	r24, 0xDA	; 218
    1302:	9e 4f       	sbci	r25, 0xFE	; 254
    1304:	fc 01       	movw	r30, r24
    1306:	11 82       	std	Z+1, r1	; 0x01
		led[pixel].g = (uint8_t)((color>>8*2)	& 0x000000FF);
    1308:	10 82       	st	Z, r1
		led[pixel].b = (uint8_t)((color>>8*1)	& 0x000000FF);
    130a:	12 82       	std	Z+2, r1	; 0x02
		led[pixel].w = (uint8_t)( color			& 0x000000FF);
    130c:	13 82       	std	Z+3, r1	; 0x03
    130e:	2e cf       	rjmp	.-420    	; 0x116c <effect_snakeBounce_nb+0x124>
void setRGBW_pixel(uint16_t pixel, uint32_t color){

	if (pixel < exLow || pixel >= exHigh)
	{
		calcBrightness(&color, brightness);
		led[pixel].r = (uint8_t)((color>>8*3)	& 0x000000FF);
    1310:	29 81       	ldd	r18, Y+1	; 0x01
    1312:	3a 81       	ldd	r19, Y+2	; 0x02
    1314:	6d cf       	rjmp	.-294    	; 0x11f0 <effect_snakeBounce_nb+0x1a8>

void calcBrightness(uint32_t *color, uint8_t _brightness){
	uint32_t buf = 0;
	uint32_t colorb = 0;

	buf = (((*color>>8*3)	& 0x000000FF) * _brightness) / 255;
    1316:	80 90 06 01 	lds	r8, 0x0106	; 0x800106 <brightness>
    131a:	91 2c       	mov	r9, r1
    131c:	a1 2c       	mov	r10, r1
    131e:	b1 2c       	mov	r11, r1

	buf = (((*color>>8*1)	& 0x000000FF) * _brightness) / 255;
	colorb |= (buf<<8*1);

	buf = (( *color			& 0x000000FF) * _brightness) / 255;
	colorb |= (buf);
    1320:	2f 2d       	mov	r18, r15
    1322:	33 27       	eor	r19, r19
    1324:	44 27       	eor	r20, r20
    1326:	55 27       	eor	r21, r21
    1328:	c5 01       	movw	r24, r10
    132a:	b4 01       	movw	r22, r8
    132c:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <__mulsi3>
    1330:	2f ef       	ldi	r18, 0xFF	; 255
    1332:	30 e0       	ldi	r19, 0x00	; 0
    1334:	40 e0       	ldi	r20, 0x00	; 0
    1336:	50 e0       	ldi	r21, 0x00	; 0
    1338:	0e 94 dd 0d 	call	0x1bba	; 0x1bba <__udivmodsi4>
    133c:	72 2e       	mov	r7, r18
    133e:	66 24       	eor	r6, r6
    1340:	55 24       	eor	r5, r5
    1342:	44 24       	eor	r4, r4
    1344:	ac 2d       	mov	r26, r12
    1346:	b0 e0       	ldi	r27, 0x00	; 0
    1348:	a5 01       	movw	r20, r10
    134a:	94 01       	movw	r18, r8
    134c:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <__muluhisi3>
    1350:	2f ef       	ldi	r18, 0xFF	; 255
    1352:	30 e0       	ldi	r19, 0x00	; 0
    1354:	40 e0       	ldi	r20, 0x00	; 0
    1356:	50 e0       	ldi	r21, 0x00	; 0
    1358:	0e 94 dd 0d 	call	0x1bba	; 0x1bba <__udivmodsi4>
    135c:	42 2a       	or	r4, r18
    135e:	53 2a       	or	r5, r19
    1360:	64 2a       	or	r6, r20
    1362:	75 2a       	or	r7, r21
    1364:	ae 2d       	mov	r26, r14
    1366:	b0 e0       	ldi	r27, 0x00	; 0
    1368:	a5 01       	movw	r20, r10
    136a:	94 01       	movw	r18, r8
    136c:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <__muluhisi3>
    1370:	2f ef       	ldi	r18, 0xFF	; 255
    1372:	30 e0       	ldi	r19, 0x00	; 0
    1374:	40 e0       	ldi	r20, 0x00	; 0
    1376:	50 e0       	ldi	r21, 0x00	; 0
    1378:	0e 94 dd 0d 	call	0x1bba	; 0x1bba <__udivmodsi4>
    137c:	d9 01       	movw	r26, r18
    137e:	99 27       	eor	r25, r25
    1380:	88 27       	eor	r24, r24
    1382:	48 2a       	or	r4, r24
    1384:	59 2a       	or	r5, r25
    1386:	6a 2a       	or	r6, r26
    1388:	7b 2a       	or	r7, r27
    138a:	ad 2d       	mov	r26, r13
    138c:	b0 e0       	ldi	r27, 0x00	; 0
    138e:	a5 01       	movw	r20, r10
    1390:	94 01       	movw	r18, r8
    1392:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <__muluhisi3>
    1396:	2f ef       	ldi	r18, 0xFF	; 255
    1398:	30 e0       	ldi	r19, 0x00	; 0
    139a:	40 e0       	ldi	r20, 0x00	; 0
    139c:	50 e0       	ldi	r21, 0x00	; 0
    139e:	0e 94 dd 0d 	call	0x1bba	; 0x1bba <__udivmodsi4>
    13a2:	b4 2f       	mov	r27, r20
    13a4:	a3 2f       	mov	r26, r19
    13a6:	92 2f       	mov	r25, r18
    13a8:	88 27       	eor	r24, r24
    13aa:	48 2a       	or	r4, r24
    13ac:	59 2a       	or	r5, r25
    13ae:	6a 2a       	or	r6, r26
    13b0:	7b 2a       	or	r7, r27
void setRGBW_pixel(uint16_t pixel, uint32_t color){

	if (pixel < exLow || pixel >= exHigh)
	{
		calcBrightness(&color, brightness);
		led[pixel].r = (uint8_t)((color>>8*3)	& 0x000000FF);
    13b2:	eb 81       	ldd	r30, Y+3	; 0x03
    13b4:	fc 81       	ldd	r31, Y+4	; 0x04
    13b6:	ee 0f       	add	r30, r30
    13b8:	ff 1f       	adc	r31, r31
    13ba:	ee 0f       	add	r30, r30
    13bc:	ff 1f       	adc	r31, r31
    13be:	ea 5d       	subi	r30, 0xDA	; 218
    13c0:	fe 4f       	sbci	r31, 0xFE	; 254
    13c2:	71 82       	std	Z+1, r7	; 0x01
		led[pixel].g = (uint8_t)((color>>8*2)	& 0x000000FF);
    13c4:	60 82       	st	Z, r6
		led[pixel].b = (uint8_t)((color>>8*1)	& 0x000000FF);
    13c6:	52 82       	std	Z+2, r5	; 0x02
		led[pixel].w = (uint8_t)( color			& 0x000000FF);
    13c8:	43 82       	std	Z+3, r4	; 0x03
    13ca:	fb ce       	rjmp	.-522    	; 0x11c2 <effect_snakeBounce_nb+0x17a>
		setRGBW_pixel(i, color);
		tail = i - length;
		if (tail < 0){
			tail = 0;
		}
		setRGBW_pixel(tail, 0);
    13cc:	1a 82       	std	Y+2, r1	; 0x02
    13ce:	19 82       	std	Y+1, r1	; 0x01
    13d0:	00 cf       	rjmp	.-512    	; 0x11d2 <effect_snakeBounce_nb+0x18a>

000013d2 <effect_chase_b>:
	}else{
		reverse = 0;
	}

}
void effect_chase_b(uint32_t color){
    13d2:	2f 92       	push	r2
    13d4:	3f 92       	push	r3
    13d6:	4f 92       	push	r4
    13d8:	5f 92       	push	r5
    13da:	6f 92       	push	r6
    13dc:	7f 92       	push	r7
    13de:	8f 92       	push	r8
    13e0:	9f 92       	push	r9
    13e2:	af 92       	push	r10
    13e4:	bf 92       	push	r11
    13e6:	cf 92       	push	r12
    13e8:	df 92       	push	r13
    13ea:	ef 92       	push	r14
    13ec:	ff 92       	push	r15
    13ee:	0f 93       	push	r16
    13f0:	1f 93       	push	r17
    13f2:	cf 93       	push	r28
    13f4:	df 93       	push	r29
    13f6:	cd b7       	in	r28, 0x3d	; 61
    13f8:	de b7       	in	r29, 0x3e	; 62
    13fa:	62 97       	sbiw	r28, 0x12	; 18
    13fc:	0f b6       	in	r0, 0x3f	; 63
    13fe:	f8 94       	cli
    1400:	de bf       	out	0x3e, r29	; 62
    1402:	0f be       	out	0x3f, r0	; 63
    1404:	cd bf       	out	0x3d, r28	; 61

void calcBrightness(uint32_t *color, uint8_t _brightness){
	uint32_t buf = 0;
	uint32_t colorb = 0;

	buf = (((*color>>8*3)	& 0x000000FF) * _brightness) / 255;
    1406:	29 2f       	mov	r18, r25
    1408:	33 27       	eor	r19, r19
    140a:	44 27       	eor	r20, r20
    140c:	55 27       	eor	r21, r21
    140e:	29 83       	std	Y+1, r18	; 0x01
    1410:	3a 83       	std	Y+2, r19	; 0x02
    1412:	4b 83       	std	Y+3, r20	; 0x03
    1414:	5c 83       	std	Y+4, r21	; 0x04
	colorb |= (buf<<8*3);

	buf = (((*color>>8*2)	& 0x000000FF) * _brightness) / 255;
    1416:	28 2f       	mov	r18, r24
    1418:	30 e0       	ldi	r19, 0x00	; 0
    141a:	40 e0       	ldi	r20, 0x00	; 0
    141c:	50 e0       	ldi	r21, 0x00	; 0
    141e:	2d 83       	std	Y+5, r18	; 0x05
    1420:	3e 83       	std	Y+6, r19	; 0x06
    1422:	4f 83       	std	Y+7, r20	; 0x07
    1424:	58 87       	std	Y+8, r21	; 0x08
	colorb |= (buf<<8*2);

	buf = (((*color>>8*1)	& 0x000000FF) * _brightness) / 255;
    1426:	27 2f       	mov	r18, r23
    1428:	30 e0       	ldi	r19, 0x00	; 0
    142a:	40 e0       	ldi	r20, 0x00	; 0
    142c:	50 e0       	ldi	r21, 0x00	; 0
    142e:	29 87       	std	Y+9, r18	; 0x09
    1430:	3a 87       	std	Y+10, r19	; 0x0a
    1432:	4b 87       	std	Y+11, r20	; 0x0b
    1434:	5c 87       	std	Y+12, r21	; 0x0c
    1436:	46 e2       	ldi	r20, 0x26	; 38
    1438:	51 e0       	ldi	r21, 0x01	; 1
    143a:	5a 8b       	std	Y+18, r21	; 0x12
    143c:	49 8b       	std	Y+17, r20	; 0x11
    143e:	8a 01       	movw	r16, r20
		reverse = 0;
	}

}
void effect_chase_b(uint32_t color){
	for(int i = 0; i <= LEDpixelcount; i++){
    1440:	21 2c       	mov	r2, r1
    1442:	31 2c       	mov	r3, r1

	buf = (((*color>>8*1)	& 0x000000FF) * _brightness) / 255;
	colorb |= (buf<<8*1);

	buf = (( *color			& 0x000000FF) * _brightness) / 255;
	colorb |= (buf);
    1444:	81 2c       	mov	r8, r1
    1446:	91 2c       	mov	r9, r1
    1448:	54 01       	movw	r10, r8
    144a:	8a 94       	dec	r8
    144c:	9b 01       	movw	r18, r22
    144e:	ac 01       	movw	r20, r24
    1450:	33 27       	eor	r19, r19
    1452:	44 27       	eor	r20, r20
    1454:	55 27       	eor	r21, r21
    1456:	2d 87       	std	Y+13, r18	; 0x0d
    1458:	3e 87       	std	Y+14, r19	; 0x0e
    145a:	4f 87       	std	Y+15, r20	; 0x0f
    145c:	58 8b       	std	Y+16, r21	; 0x10
    145e:	15 c0       	rjmp	.+42     	; 0x148a <effect_chase_b+0xb8>
		led[pixel].r = (uint8_t)((color>>8*3)	& 0x000000FF);
		led[pixel].g = (uint8_t)((color>>8*2)	& 0x000000FF);
		led[pixel].b = (uint8_t)((color>>8*1)	& 0x000000FF);
		led[pixel].w = (uint8_t)( color			& 0x000000FF);
	}else{
		led[pixel].r = 0;
    1460:	f8 01       	movw	r30, r16
    1462:	11 82       	std	Z+1, r1	; 0x01
		led[pixel].g = 0;
    1464:	10 82       	st	Z, r1
		led[pixel].b = 0;
    1466:	12 82       	std	Z+2, r1	; 0x02
		led[pixel].w = 0;
    1468:	13 82       	std	Z+3, r1	; 0x03

	*color = colorb;//update the color with the new brightness value calculated
}

void RGBW_send(){
		ws2812_setleds_rgbw(led, LEDpixelcount);//send the frame with size of pixelcount to update the strip
    146a:	64 eb       	ldi	r22, 0xB4	; 180
    146c:	70 e0       	ldi	r23, 0x00	; 0
    146e:	86 e2       	ldi	r24, 0x26	; 38
    1470:	91 e0       	ldi	r25, 0x01	; 1
    1472:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <ws2812_setleds_rgbw>
		reverse = 0;
	}

}
void effect_chase_b(uint32_t color){
	for(int i = 0; i <= LEDpixelcount; i++){
    1476:	ff ef       	ldi	r31, 0xFF	; 255
    1478:	2f 1a       	sub	r2, r31
    147a:	3f 0a       	sbc	r3, r31
    147c:	0c 5f       	subi	r16, 0xFC	; 252
    147e:	1f 4f       	sbci	r17, 0xFF	; 255
    1480:	25 eb       	ldi	r18, 0xB5	; 181
    1482:	22 16       	cp	r2, r18
    1484:	31 04       	cpc	r3, r1
    1486:	09 f4       	brne	.+2      	; 0x148a <effect_chase_b+0xb8>
    1488:	60 c0       	rjmp	.+192    	; 0x154a <effect_chase_b+0x178>
uint16_t exLow = -1;
uint16_t exHigh = -1;

void setRGBW_pixel(uint16_t pixel, uint32_t color){

	if (pixel < exLow || pixel >= exHigh)
    148a:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <exLow>
    148e:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <exLow+0x1>
    1492:	28 16       	cp	r2, r24
    1494:	39 06       	cpc	r3, r25
    1496:	38 f0       	brcs	.+14     	; 0x14a6 <effect_chase_b+0xd4>
    1498:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <exHigh>
    149c:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <exHigh+0x1>
    14a0:	28 16       	cp	r2, r24
    14a2:	39 06       	cpc	r3, r25
    14a4:	e8 f2       	brcs	.-70     	; 0x1460 <effect_chase_b+0x8e>

void calcBrightness(uint32_t *color, uint8_t _brightness){
	uint32_t buf = 0;
	uint32_t colorb = 0;

	buf = (((*color>>8*3)	& 0x000000FF) * _brightness) / 255;
    14a6:	c0 90 06 01 	lds	r12, 0x0106	; 0x800106 <brightness>
    14aa:	d1 2c       	mov	r13, r1
    14ac:	e1 2c       	mov	r14, r1
    14ae:	f1 2c       	mov	r15, r1

	buf = (((*color>>8*1)	& 0x000000FF) * _brightness) / 255;
	colorb |= (buf<<8*1);

	buf = (( *color			& 0x000000FF) * _brightness) / 255;
	colorb |= (buf);
    14b0:	29 81       	ldd	r18, Y+1	; 0x01
    14b2:	3a 81       	ldd	r19, Y+2	; 0x02
    14b4:	4b 81       	ldd	r20, Y+3	; 0x03
    14b6:	5c 81       	ldd	r21, Y+4	; 0x04
    14b8:	c7 01       	movw	r24, r14
    14ba:	b6 01       	movw	r22, r12
    14bc:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <__mulsi3>
    14c0:	a5 01       	movw	r20, r10
    14c2:	94 01       	movw	r18, r8
    14c4:	0e 94 dd 0d 	call	0x1bba	; 0x1bba <__udivmodsi4>
    14c8:	72 2e       	mov	r7, r18
    14ca:	66 24       	eor	r6, r6
    14cc:	55 24       	eor	r5, r5
    14ce:	44 24       	eor	r4, r4
    14d0:	2d 85       	ldd	r18, Y+13	; 0x0d
    14d2:	3e 85       	ldd	r19, Y+14	; 0x0e
    14d4:	4f 85       	ldd	r20, Y+15	; 0x0f
    14d6:	58 89       	ldd	r21, Y+16	; 0x10
    14d8:	c7 01       	movw	r24, r14
    14da:	b6 01       	movw	r22, r12
    14dc:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <__mulsi3>
    14e0:	a5 01       	movw	r20, r10
    14e2:	94 01       	movw	r18, r8
    14e4:	0e 94 dd 0d 	call	0x1bba	; 0x1bba <__udivmodsi4>
    14e8:	42 2a       	or	r4, r18
    14ea:	53 2a       	or	r5, r19
    14ec:	64 2a       	or	r6, r20
    14ee:	75 2a       	or	r7, r21
    14f0:	a7 01       	movw	r20, r14
    14f2:	96 01       	movw	r18, r12
    14f4:	6d 81       	ldd	r22, Y+5	; 0x05
    14f6:	7e 81       	ldd	r23, Y+6	; 0x06
    14f8:	8f 81       	ldd	r24, Y+7	; 0x07
    14fa:	98 85       	ldd	r25, Y+8	; 0x08
    14fc:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <__mulsi3>
    1500:	a5 01       	movw	r20, r10
    1502:	94 01       	movw	r18, r8
    1504:	0e 94 dd 0d 	call	0x1bba	; 0x1bba <__udivmodsi4>
    1508:	d9 01       	movw	r26, r18
    150a:	99 27       	eor	r25, r25
    150c:	88 27       	eor	r24, r24
    150e:	48 2a       	or	r4, r24
    1510:	59 2a       	or	r5, r25
    1512:	6a 2a       	or	r6, r26
    1514:	7b 2a       	or	r7, r27
    1516:	a7 01       	movw	r20, r14
    1518:	96 01       	movw	r18, r12
    151a:	69 85       	ldd	r22, Y+9	; 0x09
    151c:	7a 85       	ldd	r23, Y+10	; 0x0a
    151e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1520:	9c 85       	ldd	r25, Y+12	; 0x0c
    1522:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <__mulsi3>
    1526:	a5 01       	movw	r20, r10
    1528:	94 01       	movw	r18, r8
    152a:	0e 94 dd 0d 	call	0x1bba	; 0x1bba <__udivmodsi4>
    152e:	b4 2f       	mov	r27, r20
    1530:	a3 2f       	mov	r26, r19
    1532:	92 2f       	mov	r25, r18
    1534:	88 27       	eor	r24, r24
    1536:	48 2a       	or	r4, r24
    1538:	59 2a       	or	r5, r25
    153a:	6a 2a       	or	r6, r26
    153c:	7b 2a       	or	r7, r27
void setRGBW_pixel(uint16_t pixel, uint32_t color){

	if (pixel < exLow || pixel >= exHigh)
	{
		calcBrightness(&color, brightness);
		led[pixel].r = (uint8_t)((color>>8*3)	& 0x000000FF);
    153e:	f8 01       	movw	r30, r16
    1540:	71 82       	std	Z+1, r7	; 0x01
		led[pixel].g = (uint8_t)((color>>8*2)	& 0x000000FF);
    1542:	60 82       	st	Z, r6
		led[pixel].b = (uint8_t)((color>>8*1)	& 0x000000FF);
    1544:	52 82       	std	Z+2, r5	; 0x02
		led[pixel].w = (uint8_t)( color			& 0x000000FF);
    1546:	43 82       	std	Z+3, r4	; 0x03
    1548:	90 cf       	rjmp	.-224    	; 0x146a <effect_chase_b+0x98>
    154a:	00 e0       	ldi	r16, 0x00	; 0
    154c:	10 e0       	ldi	r17, 0x00	; 0
void setRGBW_pixel(uint16_t pixel, uint32_t color){

	if (pixel < exLow || pixel >= exHigh)
	{
		calcBrightness(&color, brightness);
		led[pixel].r = (uint8_t)((color>>8*3)	& 0x000000FF);
    154e:	e9 89       	ldd	r30, Y+17	; 0x11
    1550:	fa 89       	ldd	r31, Y+18	; 0x12
		led[pixel].g = (uint8_t)((color>>8*2)	& 0x000000FF);
		led[pixel].b = (uint8_t)((color>>8*1)	& 0x000000FF);
		led[pixel].w = (uint8_t)( color			& 0x000000FF);
	}else{
		led[pixel].r = 0;
    1552:	11 82       	std	Z+1, r1	; 0x01
		led[pixel].g = 0;
    1554:	10 82       	st	Z, r1
		led[pixel].b = 0;
    1556:	12 82       	std	Z+2, r1	; 0x02
		led[pixel].w = 0;
    1558:	13 82       	std	Z+3, r1	; 0x03

	*color = colorb;//update the color with the new brightness value calculated
}

void RGBW_send(){
		ws2812_setleds_rgbw(led, LEDpixelcount);//send the frame with size of pixelcount to update the strip
    155a:	64 eb       	ldi	r22, 0xB4	; 180
    155c:	70 e0       	ldi	r23, 0x00	; 0
    155e:	86 e2       	ldi	r24, 0x26	; 38
    1560:	91 e0       	ldi	r25, 0x01	; 1
    1562:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <ws2812_setleds_rgbw>
void effect_chase_b(uint32_t color){
	for(int i = 0; i <= LEDpixelcount; i++){
		setRGBW_pixel(i, color);
		RGBW_send();
	}
	for(int i = 0; i <= LEDpixelcount; i++){
    1566:	0f 5f       	subi	r16, 0xFF	; 255
    1568:	1f 4f       	sbci	r17, 0xFF	; 255
    156a:	29 89       	ldd	r18, Y+17	; 0x11
    156c:	3a 89       	ldd	r19, Y+18	; 0x12
    156e:	2c 5f       	subi	r18, 0xFC	; 252
    1570:	3f 4f       	sbci	r19, 0xFF	; 255
    1572:	3a 8b       	std	Y+18, r19	; 0x12
    1574:	29 8b       	std	Y+17, r18	; 0x11
    1576:	05 3b       	cpi	r16, 0xB5	; 181
    1578:	11 05       	cpc	r17, r1
    157a:	49 f7       	brne	.-46     	; 0x154e <effect_chase_b+0x17c>
		setRGBW_pixel(i, 0);
		RGBW_send();
	}
}
    157c:	62 96       	adiw	r28, 0x12	; 18
    157e:	0f b6       	in	r0, 0x3f	; 63
    1580:	f8 94       	cli
    1582:	de bf       	out	0x3e, r29	; 62
    1584:	0f be       	out	0x3f, r0	; 63
    1586:	cd bf       	out	0x3d, r28	; 61
    1588:	df 91       	pop	r29
    158a:	cf 91       	pop	r28
    158c:	1f 91       	pop	r17
    158e:	0f 91       	pop	r16
    1590:	ff 90       	pop	r15
    1592:	ef 90       	pop	r14
    1594:	df 90       	pop	r13
    1596:	cf 90       	pop	r12
    1598:	bf 90       	pop	r11
    159a:	af 90       	pop	r10
    159c:	9f 90       	pop	r9
    159e:	8f 90       	pop	r8
    15a0:	7f 90       	pop	r7
    15a2:	6f 90       	pop	r6
    15a4:	5f 90       	pop	r5
    15a6:	4f 90       	pop	r4
    15a8:	3f 90       	pop	r3
    15aa:	2f 90       	pop	r2
    15ac:	08 95       	ret

000015ae <effect_pulse_b>:
@param maxBrightness The top pulse brightness, 0-255;
		The brightness the led(s) will go to when at the top of the pulse cylce.

*/

void effect_pulse_b(int delay, int maxBrightness, uint32_t color){
    15ae:	2f 92       	push	r2
    15b0:	3f 92       	push	r3
    15b2:	4f 92       	push	r4
    15b4:	5f 92       	push	r5
    15b6:	6f 92       	push	r6
    15b8:	7f 92       	push	r7
    15ba:	8f 92       	push	r8
    15bc:	9f 92       	push	r9
    15be:	af 92       	push	r10
    15c0:	bf 92       	push	r11
    15c2:	cf 92       	push	r12
    15c4:	df 92       	push	r13
    15c6:	ef 92       	push	r14
    15c8:	ff 92       	push	r15
    15ca:	0f 93       	push	r16
    15cc:	1f 93       	push	r17
    15ce:	cf 93       	push	r28
    15d0:	df 93       	push	r29
    15d2:	cd b7       	in	r28, 0x3d	; 61
    15d4:	de b7       	in	r29, 0x3e	; 62
    15d6:	64 97       	sbiw	r28, 0x14	; 20
    15d8:	0f b6       	in	r0, 0x3f	; 63
    15da:	f8 94       	cli
    15dc:	de bf       	out	0x3e, r29	; 62
    15de:	0f be       	out	0x3f, r0	; 63
    15e0:	cd bf       	out	0x3d, r28	; 61
    15e2:	1b 01       	movw	r2, r22

	for(int i = 0; i < maxBrightness; i++){//ramp up loop
    15e4:	16 16       	cp	r1, r22
    15e6:	17 06       	cpc	r1, r23
    15e8:	0c f0       	brlt	.+2      	; 0x15ec <effect_pulse_b+0x3e>
    15ea:	42 c1       	rjmp	.+644    	; 0x1870 <effect_pulse_b+0x2c2>

void calcBrightness(uint32_t *color, uint8_t _brightness){
	uint32_t buf = 0;
	uint32_t colorb = 0;

	buf = (((*color>>8*3)	& 0x000000FF) * _brightness) / 255;
    15ec:	65 2f       	mov	r22, r21
    15ee:	77 27       	eor	r23, r23
    15f0:	88 27       	eor	r24, r24
    15f2:	99 27       	eor	r25, r25
    15f4:	6b 83       	std	Y+3, r22	; 0x03
    15f6:	7c 83       	std	Y+4, r23	; 0x04
    15f8:	8d 83       	std	Y+5, r24	; 0x05
    15fa:	9e 83       	std	Y+6, r25	; 0x06
	colorb |= (buf<<8*3);

	buf = (((*color>>8*2)	& 0x000000FF) * _brightness) / 255;
    15fc:	84 2f       	mov	r24, r20
    15fe:	90 e0       	ldi	r25, 0x00	; 0
    1600:	a0 e0       	ldi	r26, 0x00	; 0
    1602:	b0 e0       	ldi	r27, 0x00	; 0
    1604:	8f 83       	std	Y+7, r24	; 0x07
    1606:	98 87       	std	Y+8, r25	; 0x08
    1608:	a9 87       	std	Y+9, r26	; 0x09
    160a:	ba 87       	std	Y+10, r27	; 0x0a
	colorb |= (buf<<8*2);

	buf = (((*color>>8*1)	& 0x000000FF) * _brightness) / 255;
    160c:	63 2f       	mov	r22, r19
    160e:	70 e0       	ldi	r23, 0x00	; 0
    1610:	80 e0       	ldi	r24, 0x00	; 0
    1612:	90 e0       	ldi	r25, 0x00	; 0
    1614:	6b 87       	std	Y+11, r22	; 0x0b
    1616:	7c 87       	std	Y+12, r23	; 0x0c
    1618:	8d 87       	std	Y+13, r24	; 0x0d
    161a:	9e 87       	std	Y+14, r25	; 0x0e
    161c:	1a 82       	std	Y+2, r1	; 0x02
    161e:	19 82       	std	Y+1, r1	; 0x01
    1620:	da 01       	movw	r26, r20
    1622:	c9 01       	movw	r24, r18
    1624:	99 27       	eor	r25, r25
    1626:	aa 27       	eor	r26, r26
    1628:	bb 27       	eor	r27, r27
    162a:	8f 87       	std	Y+15, r24	; 0x0f
    162c:	98 8b       	std	Y+16, r25	; 0x10
    162e:	a9 8b       	std	Y+17, r26	; 0x11
    1630:	ba 8b       	std	Y+18, r27	; 0x12
	colorb |= (buf<<8*1);

	buf = (( *color			& 0x000000FF) * _brightness) / 255;
	colorb |= (buf);
    1632:	81 2c       	mov	r8, r1
    1634:	91 2c       	mov	r9, r1
    1636:	54 01       	movw	r10, r8
    1638:	8a 94       	dec	r8
void setRGBW_clear(){
	setRGBW_all(0);
}

void setRGBW_Brightness(uint8_t bright){
	brightness = bright;
    163a:	99 81       	ldd	r25, Y+1	; 0x01
    163c:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <brightness>
    1640:	a0 91 04 01 	lds	r26, 0x0104	; 0x800104 <exLow>
    1644:	b0 91 05 01 	lds	r27, 0x0105	; 0x800105 <exLow+0x1>
    1648:	bc 8b       	std	Y+20, r27	; 0x14
    164a:	ab 8b       	std	Y+19, r26	; 0x13
uint16_t exLow = -1;
uint16_t exHigh = -1;

void setRGBW_pixel(uint16_t pixel, uint32_t color){

	if (pixel < exLow || pixel >= exHigh)
    164c:	00 91 02 01 	lds	r16, 0x0102	; 0x800102 <exHigh>
    1650:	10 91 03 01 	lds	r17, 0x0103	; 0x800103 <exHigh+0x1>

void calcBrightness(uint32_t *color, uint8_t _brightness){
	uint32_t buf = 0;
	uint32_t colorb = 0;

	buf = (((*color>>8*3)	& 0x000000FF) * _brightness) / 255;
    1654:	c9 2e       	mov	r12, r25
    1656:	d1 2c       	mov	r13, r1
    1658:	e1 2c       	mov	r14, r1
    165a:	f1 2c       	mov	r15, r1

	buf = (((*color>>8*1)	& 0x000000FF) * _brightness) / 255;
	colorb |= (buf<<8*1);

	buf = (( *color			& 0x000000FF) * _brightness) / 255;
	colorb |= (buf);
    165c:	2b 81       	ldd	r18, Y+3	; 0x03
    165e:	3c 81       	ldd	r19, Y+4	; 0x04
    1660:	4d 81       	ldd	r20, Y+5	; 0x05
    1662:	5e 81       	ldd	r21, Y+6	; 0x06
    1664:	c7 01       	movw	r24, r14
    1666:	b6 01       	movw	r22, r12
    1668:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <__mulsi3>
    166c:	a5 01       	movw	r20, r10
    166e:	94 01       	movw	r18, r8
    1670:	0e 94 dd 0d 	call	0x1bba	; 0x1bba <__udivmodsi4>
    1674:	72 2e       	mov	r7, r18
    1676:	66 24       	eor	r6, r6
    1678:	55 24       	eor	r5, r5
    167a:	44 24       	eor	r4, r4
    167c:	a7 01       	movw	r20, r14
    167e:	96 01       	movw	r18, r12
    1680:	6f 85       	ldd	r22, Y+15	; 0x0f
    1682:	78 89       	ldd	r23, Y+16	; 0x10
    1684:	89 89       	ldd	r24, Y+17	; 0x11
    1686:	9a 89       	ldd	r25, Y+18	; 0x12
    1688:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <__mulsi3>
    168c:	a5 01       	movw	r20, r10
    168e:	94 01       	movw	r18, r8
    1690:	0e 94 dd 0d 	call	0x1bba	; 0x1bba <__udivmodsi4>
    1694:	42 2a       	or	r4, r18
    1696:	53 2a       	or	r5, r19
    1698:	64 2a       	or	r6, r20
    169a:	75 2a       	or	r7, r21
    169c:	a7 01       	movw	r20, r14
    169e:	96 01       	movw	r18, r12
    16a0:	6f 81       	ldd	r22, Y+7	; 0x07
    16a2:	78 85       	ldd	r23, Y+8	; 0x08
    16a4:	89 85       	ldd	r24, Y+9	; 0x09
    16a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    16a8:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <__mulsi3>
    16ac:	a5 01       	movw	r20, r10
    16ae:	94 01       	movw	r18, r8
    16b0:	0e 94 dd 0d 	call	0x1bba	; 0x1bba <__udivmodsi4>
    16b4:	d9 01       	movw	r26, r18
    16b6:	99 27       	eor	r25, r25
    16b8:	88 27       	eor	r24, r24
    16ba:	48 2a       	or	r4, r24
    16bc:	59 2a       	or	r5, r25
    16be:	6a 2a       	or	r6, r26
    16c0:	7b 2a       	or	r7, r27
    16c2:	a7 01       	movw	r20, r14
    16c4:	96 01       	movw	r18, r12
    16c6:	6b 85       	ldd	r22, Y+11	; 0x0b
    16c8:	7c 85       	ldd	r23, Y+12	; 0x0c
    16ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    16cc:	9e 85       	ldd	r25, Y+14	; 0x0e
    16ce:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <__mulsi3>
    16d2:	a5 01       	movw	r20, r10
    16d4:	94 01       	movw	r18, r8
    16d6:	0e 94 dd 0d 	call	0x1bba	; 0x1bba <__udivmodsi4>
    16da:	b4 2f       	mov	r27, r20
    16dc:	a3 2f       	mov	r26, r19
    16de:	92 2f       	mov	r25, r18
    16e0:	88 27       	eor	r24, r24
    16e2:	48 2a       	or	r4, r24
    16e4:	59 2a       	or	r5, r25
    16e6:	6a 2a       	or	r6, r26
    16e8:	7b 2a       	or	r7, r27

	if (pixel < exLow || pixel >= exHigh)
	{
		calcBrightness(&color, brightness);
		led[pixel].r = (uint8_t)((color>>8*3)	& 0x000000FF);
		led[pixel].g = (uint8_t)((color>>8*2)	& 0x000000FF);
    16ea:	a3 01       	movw	r20, r6
		led[pixel].b = (uint8_t)((color>>8*1)	& 0x000000FF);
    16ec:	35 2d       	mov	r19, r5
		led[pixel].w = (uint8_t)( color			& 0x000000FF);
    16ee:	e6 e2       	ldi	r30, 0x26	; 38
    16f0:	f1 e0       	ldi	r31, 0x01	; 1
	exLow = low;
	exHigh = high;
}

void setRGBW_all(uint32_t color){
	for (int i = 0; i < LEDpixelcount; i++)
    16f2:	80 e0       	ldi	r24, 0x00	; 0
    16f4:	90 e0       	ldi	r25, 0x00	; 0
    16f6:	09 c0       	rjmp	.+18     	; 0x170a <effect_pulse_b+0x15c>
		led[pixel].r = (uint8_t)((color>>8*3)	& 0x000000FF);
		led[pixel].g = (uint8_t)((color>>8*2)	& 0x000000FF);
		led[pixel].b = (uint8_t)((color>>8*1)	& 0x000000FF);
		led[pixel].w = (uint8_t)( color			& 0x000000FF);
	}else{
		led[pixel].r = 0;
    16f8:	11 82       	std	Z+1, r1	; 0x01
		led[pixel].g = 0;
    16fa:	10 82       	st	Z, r1
		led[pixel].b = 0;
    16fc:	12 82       	std	Z+2, r1	; 0x02
		led[pixel].w = 0;
    16fe:	13 82       	std	Z+3, r1	; 0x03
	exLow = low;
	exHigh = high;
}

void setRGBW_all(uint32_t color){
	for (int i = 0; i < LEDpixelcount; i++)
    1700:	01 96       	adiw	r24, 0x01	; 1
    1702:	34 96       	adiw	r30, 0x04	; 4
    1704:	84 3b       	cpi	r24, 0xB4	; 180
    1706:	91 05       	cpc	r25, r1
    1708:	89 f0       	breq	.+34     	; 0x172c <effect_pulse_b+0x17e>
uint16_t exLow = -1;
uint16_t exHigh = -1;

void setRGBW_pixel(uint16_t pixel, uint32_t color){

	if (pixel < exLow || pixel >= exHigh)
    170a:	6b 89       	ldd	r22, Y+19	; 0x13
    170c:	7c 89       	ldd	r23, Y+20	; 0x14
    170e:	86 17       	cp	r24, r22
    1710:	97 07       	cpc	r25, r23
    1712:	18 f0       	brcs	.+6      	; 0x171a <effect_pulse_b+0x16c>
    1714:	80 17       	cp	r24, r16
    1716:	91 07       	cpc	r25, r17
    1718:	78 f3       	brcs	.-34     	; 0x16f8 <effect_pulse_b+0x14a>
	{
		calcBrightness(&color, brightness);
		led[pixel].r = (uint8_t)((color>>8*3)	& 0x000000FF);
    171a:	51 83       	std	Z+1, r21	; 0x01
		led[pixel].g = (uint8_t)((color>>8*2)	& 0x000000FF);
    171c:	40 83       	st	Z, r20
		led[pixel].b = (uint8_t)((color>>8*1)	& 0x000000FF);
    171e:	32 83       	std	Z+2, r19	; 0x02
		led[pixel].w = (uint8_t)( color			& 0x000000FF);
    1720:	43 82       	std	Z+3, r4	; 0x03
	exLow = low;
	exHigh = high;
}

void setRGBW_all(uint32_t color){
	for (int i = 0; i < LEDpixelcount; i++)
    1722:	01 96       	adiw	r24, 0x01	; 1
    1724:	34 96       	adiw	r30, 0x04	; 4
    1726:	84 3b       	cpi	r24, 0xB4	; 180
    1728:	91 05       	cpc	r25, r1
    172a:	79 f7       	brne	.-34     	; 0x170a <effect_pulse_b+0x15c>

	*color = colorb;//update the color with the new brightness value calculated
}

void RGBW_send(){
		ws2812_setleds_rgbw(led, LEDpixelcount);//send the frame with size of pixelcount to update the strip
    172c:	64 eb       	ldi	r22, 0xB4	; 180
    172e:	70 e0       	ldi	r23, 0x00	; 0
    1730:	86 e2       	ldi	r24, 0x26	; 38
    1732:	91 e0       	ldi	r25, 0x01	; 1
    1734:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <ws2812_setleds_rgbw>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1738:	8f e9       	ldi	r24, 0x9F	; 159
    173a:	9f e0       	ldi	r25, 0x0F	; 15
    173c:	01 97       	sbiw	r24, 0x01	; 1
    173e:	f1 f7       	brne	.-4      	; 0x173c <effect_pulse_b+0x18e>
    1740:	00 c0       	rjmp	.+0      	; 0x1742 <effect_pulse_b+0x194>
    1742:	00 00       	nop

*/

void effect_pulse_b(int delay, int maxBrightness, uint32_t color){

	for(int i = 0; i < maxBrightness; i++){//ramp up loop
    1744:	a9 81       	ldd	r26, Y+1	; 0x01
    1746:	ba 81       	ldd	r27, Y+2	; 0x02
    1748:	11 96       	adiw	r26, 0x01	; 1
    174a:	ba 83       	std	Y+2, r27	; 0x02
    174c:	a9 83       	std	Y+1, r26	; 0x01
    174e:	2a 16       	cp	r2, r26
    1750:	3b 06       	cpc	r3, r27
    1752:	09 f0       	breq	.+2      	; 0x1756 <effect_pulse_b+0x1a8>
    1754:	72 cf       	rjmp	.-284    	; 0x163a <effect_pulse_b+0x8c>

	buf = (((*color>>8*1)	& 0x000000FF) * _brightness) / 255;
	colorb |= (buf<<8*1);

	buf = (( *color			& 0x000000FF) * _brightness) / 255;
	colorb |= (buf);
    1756:	81 2c       	mov	r8, r1
    1758:	91 2c       	mov	r9, r1
    175a:	54 01       	movw	r10, r8
    175c:	8a 94       	dec	r8
void setRGBW_clear(){
	setRGBW_all(0);
}

void setRGBW_Brightness(uint8_t bright){
	brightness = bright;
    175e:	20 92 06 01 	sts	0x0106, r2	; 0x800106 <brightness>
    1762:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <exLow>
    1766:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <exLow+0x1>
    176a:	7a 83       	std	Y+2, r23	; 0x02
    176c:	69 83       	std	Y+1, r22	; 0x01
uint16_t exLow = -1;
uint16_t exHigh = -1;

void setRGBW_pixel(uint16_t pixel, uint32_t color){

	if (pixel < exLow || pixel >= exHigh)
    176e:	00 91 02 01 	lds	r16, 0x0102	; 0x800102 <exHigh>
    1772:	10 91 03 01 	lds	r17, 0x0103	; 0x800103 <exHigh+0x1>

void calcBrightness(uint32_t *color, uint8_t _brightness){
	uint32_t buf = 0;
	uint32_t colorb = 0;

	buf = (((*color>>8*3)	& 0x000000FF) * _brightness) / 255;
    1776:	c2 2c       	mov	r12, r2
    1778:	d1 2c       	mov	r13, r1
    177a:	e1 2c       	mov	r14, r1
    177c:	f1 2c       	mov	r15, r1

	buf = (((*color>>8*1)	& 0x000000FF) * _brightness) / 255;
	colorb |= (buf<<8*1);

	buf = (( *color			& 0x000000FF) * _brightness) / 255;
	colorb |= (buf);
    177e:	2b 81       	ldd	r18, Y+3	; 0x03
    1780:	3c 81       	ldd	r19, Y+4	; 0x04
    1782:	4d 81       	ldd	r20, Y+5	; 0x05
    1784:	5e 81       	ldd	r21, Y+6	; 0x06
    1786:	c7 01       	movw	r24, r14
    1788:	b6 01       	movw	r22, r12
    178a:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <__mulsi3>
    178e:	a5 01       	movw	r20, r10
    1790:	94 01       	movw	r18, r8
    1792:	0e 94 dd 0d 	call	0x1bba	; 0x1bba <__udivmodsi4>
    1796:	72 2e       	mov	r7, r18
    1798:	66 24       	eor	r6, r6
    179a:	55 24       	eor	r5, r5
    179c:	44 24       	eor	r4, r4
    179e:	2f 85       	ldd	r18, Y+15	; 0x0f
    17a0:	38 89       	ldd	r19, Y+16	; 0x10
    17a2:	49 89       	ldd	r20, Y+17	; 0x11
    17a4:	5a 89       	ldd	r21, Y+18	; 0x12
    17a6:	c7 01       	movw	r24, r14
    17a8:	b6 01       	movw	r22, r12
    17aa:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <__mulsi3>
    17ae:	a5 01       	movw	r20, r10
    17b0:	94 01       	movw	r18, r8
    17b2:	0e 94 dd 0d 	call	0x1bba	; 0x1bba <__udivmodsi4>
    17b6:	42 2a       	or	r4, r18
    17b8:	53 2a       	or	r5, r19
    17ba:	64 2a       	or	r6, r20
    17bc:	75 2a       	or	r7, r21
    17be:	2f 81       	ldd	r18, Y+7	; 0x07
    17c0:	38 85       	ldd	r19, Y+8	; 0x08
    17c2:	49 85       	ldd	r20, Y+9	; 0x09
    17c4:	5a 85       	ldd	r21, Y+10	; 0x0a
    17c6:	c7 01       	movw	r24, r14
    17c8:	b6 01       	movw	r22, r12
    17ca:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <__mulsi3>
    17ce:	a5 01       	movw	r20, r10
    17d0:	94 01       	movw	r18, r8
    17d2:	0e 94 dd 0d 	call	0x1bba	; 0x1bba <__udivmodsi4>
    17d6:	d9 01       	movw	r26, r18
    17d8:	99 27       	eor	r25, r25
    17da:	88 27       	eor	r24, r24
    17dc:	48 2a       	or	r4, r24
    17de:	59 2a       	or	r5, r25
    17e0:	6a 2a       	or	r6, r26
    17e2:	7b 2a       	or	r7, r27
    17e4:	2b 85       	ldd	r18, Y+11	; 0x0b
    17e6:	3c 85       	ldd	r19, Y+12	; 0x0c
    17e8:	4d 85       	ldd	r20, Y+13	; 0x0d
    17ea:	5e 85       	ldd	r21, Y+14	; 0x0e
    17ec:	c7 01       	movw	r24, r14
    17ee:	b6 01       	movw	r22, r12
    17f0:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <__mulsi3>
    17f4:	a5 01       	movw	r20, r10
    17f6:	94 01       	movw	r18, r8
    17f8:	0e 94 dd 0d 	call	0x1bba	; 0x1bba <__udivmodsi4>
    17fc:	b4 2f       	mov	r27, r20
    17fe:	a3 2f       	mov	r26, r19
    1800:	92 2f       	mov	r25, r18
    1802:	88 27       	eor	r24, r24
    1804:	48 2a       	or	r4, r24
    1806:	59 2a       	or	r5, r25
    1808:	6a 2a       	or	r6, r26
    180a:	7b 2a       	or	r7, r27

	if (pixel < exLow || pixel >= exHigh)
	{
		calcBrightness(&color, brightness);
		led[pixel].r = (uint8_t)((color>>8*3)	& 0x000000FF);
		led[pixel].g = (uint8_t)((color>>8*2)	& 0x000000FF);
    180c:	a3 01       	movw	r20, r6
		led[pixel].b = (uint8_t)((color>>8*1)	& 0x000000FF);
    180e:	35 2d       	mov	r19, r5
		led[pixel].w = (uint8_t)( color			& 0x000000FF);
    1810:	e6 e2       	ldi	r30, 0x26	; 38
    1812:	f1 e0       	ldi	r31, 0x01	; 1
	exLow = low;
	exHigh = high;
}

void setRGBW_all(uint32_t color){
	for (int i = 0; i < LEDpixelcount; i++)
    1814:	80 e0       	ldi	r24, 0x00	; 0
    1816:	90 e0       	ldi	r25, 0x00	; 0
    1818:	09 c0       	rjmp	.+18     	; 0x182c <effect_pulse_b+0x27e>
		led[pixel].r = (uint8_t)((color>>8*3)	& 0x000000FF);
		led[pixel].g = (uint8_t)((color>>8*2)	& 0x000000FF);
		led[pixel].b = (uint8_t)((color>>8*1)	& 0x000000FF);
		led[pixel].w = (uint8_t)( color			& 0x000000FF);
	}else{
		led[pixel].r = 0;
    181a:	11 82       	std	Z+1, r1	; 0x01
		led[pixel].g = 0;
    181c:	10 82       	st	Z, r1
		led[pixel].b = 0;
    181e:	12 82       	std	Z+2, r1	; 0x02
		led[pixel].w = 0;
    1820:	13 82       	std	Z+3, r1	; 0x03
	exLow = low;
	exHigh = high;
}

void setRGBW_all(uint32_t color){
	for (int i = 0; i < LEDpixelcount; i++)
    1822:	01 96       	adiw	r24, 0x01	; 1
    1824:	34 96       	adiw	r30, 0x04	; 4
    1826:	84 3b       	cpi	r24, 0xB4	; 180
    1828:	91 05       	cpc	r25, r1
    182a:	89 f0       	breq	.+34     	; 0x184e <effect_pulse_b+0x2a0>
uint16_t exLow = -1;
uint16_t exHigh = -1;

void setRGBW_pixel(uint16_t pixel, uint32_t color){

	if (pixel < exLow || pixel >= exHigh)
    182c:	a9 81       	ldd	r26, Y+1	; 0x01
    182e:	ba 81       	ldd	r27, Y+2	; 0x02
    1830:	8a 17       	cp	r24, r26
    1832:	9b 07       	cpc	r25, r27
    1834:	18 f0       	brcs	.+6      	; 0x183c <effect_pulse_b+0x28e>
    1836:	80 17       	cp	r24, r16
    1838:	91 07       	cpc	r25, r17
    183a:	78 f3       	brcs	.-34     	; 0x181a <effect_pulse_b+0x26c>
	{
		calcBrightness(&color, brightness);
		led[pixel].r = (uint8_t)((color>>8*3)	& 0x000000FF);
    183c:	51 83       	std	Z+1, r21	; 0x01
		led[pixel].g = (uint8_t)((color>>8*2)	& 0x000000FF);
    183e:	40 83       	st	Z, r20
		led[pixel].b = (uint8_t)((color>>8*1)	& 0x000000FF);
    1840:	32 83       	std	Z+2, r19	; 0x02
		led[pixel].w = (uint8_t)( color			& 0x000000FF);
    1842:	43 82       	std	Z+3, r4	; 0x03
	exLow = low;
	exHigh = high;
}

void setRGBW_all(uint32_t color){
	for (int i = 0; i < LEDpixelcount; i++)
    1844:	01 96       	adiw	r24, 0x01	; 1
    1846:	34 96       	adiw	r30, 0x04	; 4
    1848:	84 3b       	cpi	r24, 0xB4	; 180
    184a:	91 05       	cpc	r25, r1
    184c:	79 f7       	brne	.-34     	; 0x182c <effect_pulse_b+0x27e>

	*color = colorb;//update the color with the new brightness value calculated
}

void RGBW_send(){
		ws2812_setleds_rgbw(led, LEDpixelcount);//send the frame with size of pixelcount to update the strip
    184e:	64 eb       	ldi	r22, 0xB4	; 180
    1850:	70 e0       	ldi	r23, 0x00	; 0
    1852:	86 e2       	ldi	r24, 0x26	; 38
    1854:	91 e0       	ldi	r25, 0x01	; 1
    1856:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <ws2812_setleds_rgbw>
    185a:	8f e9       	ldi	r24, 0x9F	; 159
    185c:	9f e0       	ldi	r25, 0x0F	; 15
    185e:	01 97       	sbiw	r24, 0x01	; 1
    1860:	f1 f7       	brne	.-4      	; 0x185e <effect_pulse_b+0x2b0>
    1862:	00 c0       	rjmp	.+0      	; 0x1864 <effect_pulse_b+0x2b6>
    1864:	00 00       	nop
		setRGBW_Brightness(i);
		setRGBW_all(color);
		RGBW_send();
		_delay_ms(1);
	}
	for(int i = maxBrightness; i > 0; i--){//ramp down loop
    1866:	91 e0       	ldi	r25, 0x01	; 1
    1868:	29 1a       	sub	r2, r25
    186a:	31 08       	sbc	r3, r1
    186c:	09 f0       	breq	.+2      	; 0x1870 <effect_pulse_b+0x2c2>
    186e:	77 cf       	rjmp	.-274    	; 0x175e <effect_pulse_b+0x1b0>
		setRGBW_Brightness(i); 
		setRGBW_all(color);	
		RGBW_send();
		_delay_ms(1);	
	}	
}
    1870:	64 96       	adiw	r28, 0x14	; 20
    1872:	0f b6       	in	r0, 0x3f	; 63
    1874:	f8 94       	cli
    1876:	de bf       	out	0x3e, r29	; 62
    1878:	0f be       	out	0x3f, r0	; 63
    187a:	cd bf       	out	0x3d, r28	; 61
    187c:	df 91       	pop	r29
    187e:	cf 91       	pop	r28
    1880:	1f 91       	pop	r17
    1882:	0f 91       	pop	r16
    1884:	ff 90       	pop	r15
    1886:	ef 90       	pop	r14
    1888:	df 90       	pop	r13
    188a:	cf 90       	pop	r12
    188c:	bf 90       	pop	r11
    188e:	af 90       	pop	r10
    1890:	9f 90       	pop	r9
    1892:	8f 90       	pop	r8
    1894:	7f 90       	pop	r7
    1896:	6f 90       	pop	r6
    1898:	5f 90       	pop	r5
    189a:	4f 90       	pop	r4
    189c:	3f 90       	pop	r3
    189e:	2f 90       	pop	r2
    18a0:	08 95       	ret

000018a2 <__vector_14>:
#include <avr/interrupt.h>

uint16_t time_ms = 0; //variable for keeping track of time

//interrupt
ISR(TIMER0_COMPA_vect){
    18a2:	1f 92       	push	r1
    18a4:	0f 92       	push	r0
    18a6:	0f b6       	in	r0, 0x3f	; 63
    18a8:	0f 92       	push	r0
    18aa:	11 24       	eor	r1, r1
    18ac:	2f 93       	push	r18
    18ae:	8f 93       	push	r24
    18b0:	9f 93       	push	r25
	if (time_ms > 60000){
    18b2:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <time_ms>
    18b6:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <time_ms+0x1>
    18ba:	81 36       	cpi	r24, 0x61	; 97
    18bc:	2a ee       	ldi	r18, 0xEA	; 234
    18be:	92 07       	cpc	r25, r18
    18c0:	70 f0       	brcs	.+28     	; 0x18de <__vector_14+0x3c>
    18c2:	81 e0       	ldi	r24, 0x01	; 1
    18c4:	90 e0       	ldi	r25, 0x00	; 0
		time_ms = 0;
	}
	
		time_ms++;	
    18c6:	90 93 1c 01 	sts	0x011C, r25	; 0x80011c <time_ms+0x1>
    18ca:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <time_ms>
}
    18ce:	9f 91       	pop	r25
    18d0:	8f 91       	pop	r24
    18d2:	2f 91       	pop	r18
    18d4:	0f 90       	pop	r0
    18d6:	0f be       	out	0x3f, r0	; 63
    18d8:	0f 90       	pop	r0
    18da:	1f 90       	pop	r1
    18dc:	18 95       	reti
    18de:	01 96       	adiw	r24, 0x01	; 1
    18e0:	f2 cf       	rjmp	.-28     	; 0x18c6 <__vector_14+0x24>

000018e2 <init_timer0>:

void init_timer0(void){
	TCCR0B |= (1<<CS01)|(1<<CS00);//set prescaler to /64
    18e2:	85 b5       	in	r24, 0x25	; 37
    18e4:	83 60       	ori	r24, 0x03	; 3
    18e6:	85 bd       	out	0x25, r24	; 37
	OCR0A = 235;
    18e8:	8b ee       	ldi	r24, 0xEB	; 235
    18ea:	87 bd       	out	0x27, r24	; 39
	TIMSK0 |= (1<<OCIE0A);//enable ocr0A match interrupt
    18ec:	ee e6       	ldi	r30, 0x6E	; 110
    18ee:	f0 e0       	ldi	r31, 0x00	; 0
    18f0:	80 81       	ld	r24, Z
    18f2:	82 60       	ori	r24, 0x02	; 2
    18f4:	80 83       	st	Z, r24
	TCCR0A |= (1<<WGM01);//clear timer on ocr0A match
    18f6:	84 b5       	in	r24, 0x24	; 36
    18f8:	82 60       	ori	r24, 0x02	; 2
    18fa:	84 bd       	out	0x24, r24	; 36
    18fc:	08 95       	ret

000018fe <ws2812_setleds_rgbw>:
}

// Setleds for SK6812RGBW
void inline ws2812_setleds_rgbw(struct cRGBW *ledarray, uint16_t leds)
{
  ws2812_sendarray_mask((uint8_t*)ledarray,leds<<2,_BV(ws2812_pin));
    18fe:	66 0f       	add	r22, r22
    1900:	77 1f       	adc	r23, r23
    1902:	66 0f       	add	r22, r22
    1904:	77 1f       	adc	r23, r23
void inline ws2812_sendarray_mask(uint8_t *data,uint16_t datlen,uint8_t maskhi)
{
  uint8_t curbyte,ctr,masklo;
  uint8_t sreg_prev;
  
  ws2812_DDRREG |= maskhi; // Enable output
    1906:	3d 9a       	sbi	0x07, 5	; 7
  
  masklo	=~maskhi&ws2812_PORTREG;
    1908:	28 b1       	in	r18, 0x08	; 8
    190a:	2f 7d       	andi	r18, 0xDF	; 223
  maskhi |=        ws2812_PORTREG;
    190c:	38 b1       	in	r19, 0x08	; 8
    190e:	30 62       	ori	r19, 0x20	; 32
  
  sreg_prev=SREG;
    1910:	4f b7       	in	r20, 0x3f	; 63
#ifdef interrupt_is_disabled
  cli();  
    1912:	f8 94       	cli
#endif  

  while (datlen--) {
    1914:	61 15       	cp	r22, r1
    1916:	71 05       	cpc	r23, r1
    1918:	b1 f0       	breq	.+44     	; 0x1946 <loop222+0x22>
    191a:	fc 01       	movw	r30, r24
    191c:	68 0f       	add	r22, r24
    191e:	79 1f       	adc	r23, r25
    curbyte=*data++;
    1920:	81 91       	ld	r24, Z+
    
    asm volatile(
    1922:	98 e0       	ldi	r25, 0x08	; 8

00001924 <loop222>:
    1924:	38 b9       	out	0x08, r19	; 8
    1926:	00 00       	nop
    1928:	07 f4       	brid	.+0      	; 0x192a <loop222+0x6>
    192a:	87 ff       	sbrs	r24, 7
    192c:	28 b9       	out	0x08, r18	; 8
    192e:	88 0f       	add	r24, r24
    1930:	00 00       	nop
    1932:	07 f4       	brid	.+0      	; 0x1934 <loop222+0x10>
    1934:	07 f4       	brid	.+0      	; 0x1936 <loop222+0x12>
    1936:	07 f4       	brid	.+0      	; 0x1938 <loop222+0x14>
    1938:	28 b9       	out	0x08, r18	; 8
    193a:	07 f4       	brid	.+0      	; 0x193c <loop222+0x18>
    193c:	9a 95       	dec	r25
    193e:	91 f7       	brne	.-28     	; 0x1924 <loop222>
  sreg_prev=SREG;
#ifdef interrupt_is_disabled
  cli();  
#endif  

  while (datlen--) {
    1940:	e6 17       	cp	r30, r22
    1942:	f7 07       	cpc	r31, r23
    1944:	69 f7       	brne	.-38     	; 0x1920 <ws2812_setleds_rgbw+0x22>
    :	"=&d" (ctr)
    :	"r" (curbyte), "I" (_SFR_IO_ADDR(ws2812_PORTREG)), "r" (maskhi), "r" (masklo)
    );
  }
  
  SREG=sreg_prev;
    1946:	4f bf       	out	0x3f, r20	; 63
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1948:	8f e3       	ldi	r24, 0x3F	; 63
    194a:	91 e0       	ldi	r25, 0x01	; 1
    194c:	01 97       	sbiw	r24, 0x01	; 1
    194e:	f1 f7       	brne	.-4      	; 0x194c <loop222+0x28>
    1950:	00 c0       	rjmp	.+0      	; 0x1952 <loop222+0x2e>
    1952:	00 00       	nop
    1954:	08 95       	ret

00001956 <main>:
event_e update();
state_e state_act(state_e state, event_e eventn);

int main(void)
{	
	systemstate_f.currentstate = S_INIT;
    1956:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <systemstate_f+0x6>
	systemstate_f.nextstate = S_ledOFF;
    195a:	81 e0       	ldi	r24, 0x01	; 1
    195c:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <systemstate_f+0x7>
	
	init_timer0();
    1960:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <init_timer0>
	setRGBW_ExBounds(0, 36);
    1964:	64 e2       	ldi	r22, 0x24	; 36
    1966:	70 e0       	ldi	r23, 0x00	; 0
    1968:	80 e0       	ldi	r24, 0x00	; 0
    196a:	90 e0       	ldi	r25, 0x00	; 0
    196c:	0e 94 8b 00 	call	0x116	; 0x116 <setRGBW_ExBounds>
	//setRGBW_ExBounds(12,30);
	setRGBW_Brightness(255);
    1970:	8f ef       	ldi	r24, 0xFF	; 255
    1972:	0e 94 4f 01 	call	0x29e	; 0x29e <setRGBW_Brightness>
	setRGBW_clear();
    1976:	0e 94 41 01 	call	0x282	; 0x282 <setRGBW_clear>
	RGBW_send();
    197a:	0e 94 52 01 	call	0x2a4	; 0x2a4 <RGBW_send>
	buttons_init();
    197e:	0e 94 5e 00 	call	0xbc	; 0xbc <buttons_init>
	//RGBW_send();
	uint16_t hue = 0;
	static	uint8_t	 i = 0;
	static  uint8_t  f = 0;

	sei();//enable interrupts
    1982:	78 94       	sei
	
	systemstate_f.current_color32 = color32(255, 255, 230, 100);
    1984:	24 e6       	ldi	r18, 0x64	; 100
    1986:	46 ee       	ldi	r20, 0xE6	; 230
    1988:	6f ef       	ldi	r22, 0xFF	; 255
    198a:	8f ef       	ldi	r24, 0xFF	; 255
    198c:	0e 94 58 01 	call	0x2b0	; 0x2b0 <color32>
    1990:	60 93 1f 01 	sts	0x011F, r22	; 0x80011f <systemstate_f+0x2>
    1994:	70 93 20 01 	sts	0x0120, r23	; 0x800120 <systemstate_f+0x3>
    1998:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <systemstate_f+0x4>
    199c:	90 93 22 01 	sts	0x0122, r25	; 0x800122 <systemstate_f+0x5>
    19a0:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <systemstate_f+0x7>
/************************************************************************/
/* control part that needs to be integrated in real system later		*/
/************************************************************************/
event_e update(){
	if(buttonflag.button0){
		systemstate_f.strip_on ^= 1;		
    19a4:	d1 e0       	ldi	r29, 0x01	; 1
		systemstate_f.currentstate = S_EFFECT_ON;
    19a6:	c4 e0       	ldi	r28, 0x04	; 4
/************************************************************************/
/* control part that needs to be integrated in real system later		*/
/************************************************************************/
				
		//state
		systemstate_f.currentstate = systemstate_f.nextstate; //update currrentstate 
    19a8:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <systemstate_f+0x6>

/************************************************************************/
/* control part that needs to be integrated in real system later		*/
/************************************************************************/
event_e update(){
	if(buttonflag.button0){
    19ac:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <__data_end>
    19b0:	99 23       	and	r25, r25
    19b2:	61 f0       	breq	.+24     	; 0x19cc <main+0x76>
		systemstate_f.strip_on ^= 1;		
    19b4:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <systemstate_f>
    19b8:	8d 27       	eor	r24, r29
    19ba:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <systemstate_f>
		systemstate_f.currentstate = S_EFFECT_ON;
    19be:	c0 93 23 01 	sts	0x0123, r28	; 0x800123 <systemstate_f+0x6>
		systemstate_f.current_ef = EF_NO;
    19c2:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <systemstate_f+0x1>
		buttonflag.button0 = 0;
    19c6:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__data_end>
    19ca:	84 e0       	ldi	r24, 0x04	; 4
	}
	if(buttonflag.button1){
    19cc:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <__data_end+0x1>
    19d0:	99 23       	and	r25, r25
    19d2:	31 f1       	breq	.+76     	; 0x1a20 <main+0xca>
		systemstate_f.strip_on = 1;
    19d4:	d0 93 1d 01 	sts	0x011D, r29	; 0x80011d <systemstate_f>
		systemstate_f.currentstate = S_EFFECT_ON;
    19d8:	c0 93 23 01 	sts	0x0123, r28	; 0x800123 <systemstate_f+0x6>
		
		if(systemstate_f.current_ef < EF_amountn) systemstate_f.current_ef += 1;//go through the list of effects
    19dc:	e0 91 1e 01 	lds	r30, 0x011E	; 0x80011e <systemstate_f+0x1>
    19e0:	e5 30       	cpi	r30, 0x05	; 5
    19e2:	e0 f5       	brcc	.+120    	; 0x1a5c <main+0x106>
    19e4:	ef 5f       	subi	r30, 0xFF	; 255
    19e6:	e0 93 1e 01 	sts	0x011E, r30	; 0x80011e <systemstate_f+0x1>
		else systemstate_f.current_ef = 0;
		
		buttonflag.button1 = 0;
    19ea:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <__data_end+0x1>
	}
	if(buttonflag.button2){
    19ee:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end+0x2>
    19f2:	88 23       	and	r24, r24
    19f4:	09 f4       	brne	.+2      	; 0x19f8 <main+0xa2>
    19f6:	4d c0       	rjmp	.+154    	; 0x1a92 <main+0x13c>
    19f8:	91 e0       	ldi	r25, 0x01	; 1
    19fa:	84 e0       	ldi	r24, 0x04	; 4
		//volatile static uint16_t hsvVal = 0;
		//systemstate_f.current_color32 = ColorHSV(hsvVal+=100, 255, 255, 0);
		buttonflag.button2 = 0;
    19fc:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <__data_end+0x2>
}

state_e state_act(state_e state, event_e eventn){
	state_e nxtstate = 0;
	
	if (!systemstate_f.strip_on) state = nxtstate = S_ledOFF;
    1a00:	91 11       	cpse	r25, r1
    1a02:	16 c0       	rjmp	.+44     	; 0x1a30 <main+0xda>
	
	switch(state){
	case S_ledOFF:
		setRGBW_clear();
    1a04:	0e 94 41 01 	call	0x282	; 0x282 <setRGBW_clear>
		RGBW_send();
    1a08:	0e 94 52 01 	call	0x2a4	; 0x2a4 <RGBW_send>
		if (systemstate_f.strip_on) nxtstate = S_EFFECT_ON;
    1a0c:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <systemstate_f>
    1a10:	88 23       	and	r24, r24
    1a12:	21 f0       	breq	.+8      	; 0x1a1c <main+0xc6>
	//eq code
		nxtstate = S_EQ_ON;
		break;
		
	case S_EFFECT_ON:	//effect types
		switch (systemstate_f.current_ef){
    1a14:	84 e0       	ldi	r24, 0x04	; 4
/************************************************************************/
				
		//state
		systemstate_f.currentstate = systemstate_f.nextstate; //update currrentstate 
		update();
		systemstate_f.nextstate = state_act(systemstate_f.currentstate, systemstate_f.currentevent);//do actions
    1a16:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <systemstate_f+0x7>
// 		}
		
//		recursiveFlowHue(10, 51);
		//effect_pulse(0, 255, color32(0, 255, 255, 50))
//		effect_pulse_nb(0, 255, color32(255, 255, 255, 255));
	}	
    1a1a:	c6 cf       	rjmp	.-116    	; 0x19a8 <main+0x52>
	switch(state){
	case S_ledOFF:
		setRGBW_clear();
		RGBW_send();
		if (systemstate_f.strip_on) nxtstate = S_EFFECT_ON;
		else nxtstate = S_ledOFF;
    1a1c:	81 e0       	ldi	r24, 0x01	; 1
    1a1e:	fb cf       	rjmp	.-10     	; 0x1a16 <main+0xc0>
		if(systemstate_f.current_ef < EF_amountn) systemstate_f.current_ef += 1;//go through the list of effects
		else systemstate_f.current_ef = 0;
		
		buttonflag.button1 = 0;
	}
	if(buttonflag.button2){
    1a20:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <__data_end+0x2>
    1a24:	91 11       	cpse	r25, r1
    1a26:	30 c0       	rjmp	.+96     	; 0x1a88 <main+0x132>
    1a28:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <systemstate_f>
}

state_e state_act(state_e state, event_e eventn){
	state_e nxtstate = 0;
	
	if (!systemstate_f.strip_on) state = nxtstate = S_ledOFF;
    1a2c:	99 23       	and	r25, r25
    1a2e:	51 f3       	breq	.-44     	; 0x1a04 <main+0xae>
	
	switch(state){
    1a30:	82 30       	cpi	r24, 0x02	; 2
    1a32:	09 f4       	brne	.+2      	; 0x1a36 <main+0xe0>
    1a34:	b0 c0       	rjmp	.+352    	; 0x1b96 <main+0x240>
    1a36:	08 f4       	brcc	.+2      	; 0x1a3a <main+0xe4>
    1a38:	a9 c0       	rjmp	.+338    	; 0x1b8c <main+0x236>
    1a3a:	84 30       	cpi	r24, 0x04	; 4
    1a3c:	41 f1       	breq	.+80     	; 0x1a8e <main+0x138>
    1a3e:	85 30       	cpi	r24, 0x05	; 5
    1a40:	09 f0       	breq	.+2      	; 0x1a44 <main+0xee>
    1a42:	a7 c0       	rjmp	.+334    	; 0x1b92 <main+0x23c>
		nxtstate = S_EFFECT_ON;
		break;
	
	case S_ledERR:
	//effect code
		setRGBW_all(color32(10,0,0,0));
    1a44:	20 e0       	ldi	r18, 0x00	; 0
    1a46:	40 e0       	ldi	r20, 0x00	; 0
    1a48:	60 e0       	ldi	r22, 0x00	; 0
    1a4a:	8a e0       	ldi	r24, 0x0A	; 10
    1a4c:	0e 94 58 01 	call	0x2b0	; 0x2b0 <color32>
    1a50:	0e 94 94 00 	call	0x128	; 0x128 <setRGBW_all>
		RGBW_send();
    1a54:	0e 94 52 01 	call	0x2a4	; 0x2a4 <RGBW_send>
		nxtstate = S_ledERR;
    1a58:	85 e0       	ldi	r24, 0x05	; 5
    1a5a:	dd cf       	rjmp	.-70     	; 0x1a16 <main+0xc0>
	if(buttonflag.button1){
		systemstate_f.strip_on = 1;
		systemstate_f.currentstate = S_EFFECT_ON;
		
		if(systemstate_f.current_ef < EF_amountn) systemstate_f.current_ef += 1;//go through the list of effects
		else systemstate_f.current_ef = 0;
    1a5c:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <systemstate_f+0x1>
		
		buttonflag.button1 = 0;
    1a60:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <__data_end+0x1>
	}
	if(buttonflag.button2){
    1a64:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end+0x2>
    1a68:	81 11       	cpse	r24, r1
    1a6a:	c6 cf       	rjmp	.-116    	; 0x19f8 <main+0xa2>
		switch (systemstate_f.current_ef){
/************************************************************************/
/* add test code										                */
/************************************************************************/		
			case EF_NO:
				setRGBW_all(systemstate_f.current_color32);
    1a6c:	60 91 1f 01 	lds	r22, 0x011F	; 0x80011f <systemstate_f+0x2>
    1a70:	70 91 20 01 	lds	r23, 0x0120	; 0x800120 <systemstate_f+0x3>
    1a74:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <systemstate_f+0x4>
    1a78:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <systemstate_f+0x5>
    1a7c:	0e 94 94 00 	call	0x128	; 0x128 <setRGBW_all>
				RGBW_send();
    1a80:	0e 94 52 01 	call	0x2a4	; 0x2a4 <RGBW_send>
    1a84:	84 e0       	ldi	r24, 0x04	; 4
    1a86:	c7 cf       	rjmp	.-114    	; 0x1a16 <main+0xc0>
    1a88:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <systemstate_f>
    1a8c:	b7 cf       	rjmp	.-146    	; 0x19fc <main+0xa6>
    1a8e:	e0 91 1e 01 	lds	r30, 0x011E	; 0x80011e <systemstate_f+0x1>
	//eq code
		nxtstate = S_EQ_ON;
		break;
		
	case S_EFFECT_ON:	//effect types
		switch (systemstate_f.current_ef){
    1a92:	8e 2f       	mov	r24, r30
    1a94:	90 e0       	ldi	r25, 0x00	; 0
    1a96:	8b 30       	cpi	r24, 0x0B	; 11
    1a98:	91 05       	cpc	r25, r1
    1a9a:	08 f0       	brcs	.+2      	; 0x1a9e <main+0x148>
    1a9c:	bb cf       	rjmp	.-138    	; 0x1a14 <main+0xbe>
    1a9e:	fc 01       	movw	r30, r24
    1aa0:	ec 5c       	subi	r30, 0xCC	; 204
    1aa2:	ff 4f       	sbci	r31, 0xFF	; 255
    1aa4:	0c 94 ff 0d 	jmp	0x1bfe	; 0x1bfe <__tablejump2__>
			case EF_snakeGrowHue_nb:
				effect_snakeGrowHue_nb(5,5);
				break;
			
			case EF_snakeGrow_b:
				effect_snakeGrow_b(10, systemstate_f.current_color32);
    1aa8:	40 91 1f 01 	lds	r20, 0x011F	; 0x80011f <systemstate_f+0x2>
    1aac:	50 91 20 01 	lds	r21, 0x0120	; 0x800120 <systemstate_f+0x3>
    1ab0:	60 91 21 01 	lds	r22, 0x0121	; 0x800121 <systemstate_f+0x4>
    1ab4:	70 91 22 01 	lds	r23, 0x0122	; 0x800122 <systemstate_f+0x5>
    1ab8:	8a e0       	ldi	r24, 0x0A	; 10
    1aba:	90 e0       	ldi	r25, 0x00	; 0
    1abc:	0e 94 82 02 	call	0x504	; 0x504 <effect_snakeGrow_b>
    1ac0:	84 e0       	ldi	r24, 0x04	; 4
    1ac2:	a9 cf       	rjmp	.-174    	; 0x1a16 <main+0xc0>
			case EF_chase_b:
				effect_chase_b(systemstate_f.current_color32);
				break;
			
			case EF_snakeGrowHue_b:
				effect_snakeGrowHue_b(5,5);
    1ac4:	65 e0       	ldi	r22, 0x05	; 5
    1ac6:	70 e0       	ldi	r23, 0x00	; 0
    1ac8:	85 e0       	ldi	r24, 0x05	; 5
    1aca:	90 e0       	ldi	r25, 0x00	; 0
    1acc:	0e 94 b8 05 	call	0xb70	; 0xb70 <effect_snakeGrowHue_b>
    1ad0:	84 e0       	ldi	r24, 0x04	; 4
    1ad2:	a1 cf       	rjmp	.-190    	; 0x1a16 <main+0xc0>
			case EF_snakeBounce_nb:
				effect_snakeBounce_nb(10, systemstate_f.current_color32);
				break;
			
			case EF_chase_b:
				effect_chase_b(systemstate_f.current_color32);
    1ad4:	60 91 1f 01 	lds	r22, 0x011F	; 0x80011f <systemstate_f+0x2>
    1ad8:	70 91 20 01 	lds	r23, 0x0120	; 0x800120 <systemstate_f+0x3>
    1adc:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <systemstate_f+0x4>
    1ae0:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <systemstate_f+0x5>
    1ae4:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <effect_chase_b>
    1ae8:	84 e0       	ldi	r24, 0x04	; 4
    1aea:	95 cf       	rjmp	.-214    	; 0x1a16 <main+0xc0>
			case EF_snake_nb:
				effect_snake_nb(10, systemstate_f.current_color32);
				break;

			case EF_snakeBounce_b:
				effect_snakeBounce_b(10, systemstate_f.current_color32);
    1aec:	40 91 1f 01 	lds	r20, 0x011F	; 0x80011f <systemstate_f+0x2>
    1af0:	50 91 20 01 	lds	r21, 0x0120	; 0x800120 <systemstate_f+0x3>
    1af4:	60 91 21 01 	lds	r22, 0x0121	; 0x800121 <systemstate_f+0x4>
    1af8:	70 91 22 01 	lds	r23, 0x0122	; 0x800122 <systemstate_f+0x5>
    1afc:	8a e0       	ldi	r24, 0x0A	; 10
    1afe:	90 e0       	ldi	r25, 0x00	; 0
    1b00:	0e 94 74 06 	call	0xce8	; 0xce8 <effect_snakeBounce_b>
    1b04:	84 e0       	ldi	r24, 0x04	; 4
    1b06:	87 cf       	rjmp	.-242    	; 0x1a16 <main+0xc0>
			case EF_snakeGrow_nb:
				effect_snakeGrow_nb(10, systemstate_f.current_color32);
				break;
			
			case EF_pulse_b:
				effect_pulse_b(10, 255, systemstate_f.current_color32);
    1b08:	20 91 1f 01 	lds	r18, 0x011F	; 0x80011f <systemstate_f+0x2>
    1b0c:	30 91 20 01 	lds	r19, 0x0120	; 0x800120 <systemstate_f+0x3>
    1b10:	40 91 21 01 	lds	r20, 0x0121	; 0x800121 <systemstate_f+0x4>
    1b14:	50 91 22 01 	lds	r21, 0x0122	; 0x800122 <systemstate_f+0x5>
    1b18:	6f ef       	ldi	r22, 0xFF	; 255
    1b1a:	70 e0       	ldi	r23, 0x00	; 0
    1b1c:	8a e0       	ldi	r24, 0x0A	; 10
    1b1e:	90 e0       	ldi	r25, 0x00	; 0
    1b20:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <effect_pulse_b>
    1b24:	84 e0       	ldi	r24, 0x04	; 4
    1b26:	77 cf       	rjmp	.-274    	; 0x1a16 <main+0xc0>
			case EF_snakeGrow_b:
				effect_snakeGrow_b(10, systemstate_f.current_color32);
				break;
			
			case EF_snakeGrow_nb:
				effect_snakeGrow_nb(10, systemstate_f.current_color32);
    1b28:	40 91 1f 01 	lds	r20, 0x011F	; 0x80011f <systemstate_f+0x2>
    1b2c:	50 91 20 01 	lds	r21, 0x0120	; 0x800120 <systemstate_f+0x3>
    1b30:	60 91 21 01 	lds	r22, 0x0121	; 0x800121 <systemstate_f+0x4>
    1b34:	70 91 22 01 	lds	r23, 0x0122	; 0x800122 <systemstate_f+0x5>
    1b38:	8a e0       	ldi	r24, 0x0A	; 10
    1b3a:	90 e0       	ldi	r25, 0x00	; 0
    1b3c:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <effect_snakeGrow_nb>
    1b40:	84 e0       	ldi	r24, 0x04	; 4
    1b42:	69 cf       	rjmp	.-302    	; 0x1a16 <main+0xc0>
			case EF_snakeGrowHue_b:
				effect_snakeGrowHue_b(5,5);
				break;
			
			case EF_snakeGrowHue_nb:
				effect_snakeGrowHue_nb(5,5);
    1b44:	65 e0       	ldi	r22, 0x05	; 5
    1b46:	70 e0       	ldi	r23, 0x00	; 0
    1b48:	85 e0       	ldi	r24, 0x05	; 5
    1b4a:	90 e0       	ldi	r25, 0x00	; 0
    1b4c:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <effect_snakeGrowHue_nb>
    1b50:	84 e0       	ldi	r24, 0x04	; 4
    1b52:	61 cf       	rjmp	.-318    	; 0x1a16 <main+0xc0>
			case EF_snakeBounce_b:
				effect_snakeBounce_b(10, systemstate_f.current_color32);
				break;
			
			case EF_snakeBounce_nb:
				effect_snakeBounce_nb(10, systemstate_f.current_color32);
    1b54:	40 91 1f 01 	lds	r20, 0x011F	; 0x80011f <systemstate_f+0x2>
    1b58:	50 91 20 01 	lds	r21, 0x0120	; 0x800120 <systemstate_f+0x3>
    1b5c:	60 91 21 01 	lds	r22, 0x0121	; 0x800121 <systemstate_f+0x4>
    1b60:	70 91 22 01 	lds	r23, 0x0122	; 0x800122 <systemstate_f+0x5>
    1b64:	8a e0       	ldi	r24, 0x0A	; 10
    1b66:	90 e0       	ldi	r25, 0x00	; 0
    1b68:	0e 94 24 08 	call	0x1048	; 0x1048 <effect_snakeBounce_nb>
    1b6c:	84 e0       	ldi	r24, 0x04	; 4
    1b6e:	53 cf       	rjmp	.-346    	; 0x1a16 <main+0xc0>
				break;
/************************************************************************/
/* end test code										                */
/************************************************************************/
			case EF_snake_nb:
				effect_snake_nb(10, systemstate_f.current_color32);
    1b70:	40 91 1f 01 	lds	r20, 0x011F	; 0x80011f <systemstate_f+0x2>
    1b74:	50 91 20 01 	lds	r21, 0x0120	; 0x800120 <systemstate_f+0x3>
    1b78:	60 91 21 01 	lds	r22, 0x0121	; 0x800121 <systemstate_f+0x4>
    1b7c:	70 91 22 01 	lds	r23, 0x0122	; 0x800122 <systemstate_f+0x5>
    1b80:	8a e0       	ldi	r24, 0x0A	; 10
    1b82:	90 e0       	ldi	r25, 0x00	; 0
    1b84:	0e 94 e7 03 	call	0x7ce	; 0x7ce <effect_snake_nb>
    1b88:	84 e0       	ldi	r24, 0x04	; 4
    1b8a:	45 cf       	rjmp	.-374    	; 0x1a16 <main+0xc0>
state_e state_act(state_e state, event_e eventn){
	state_e nxtstate = 0;
	
	if (!systemstate_f.strip_on) state = nxtstate = S_ledOFF;
	
	switch(state){
    1b8c:	81 30       	cpi	r24, 0x01	; 1
    1b8e:	09 f4       	brne	.+2      	; 0x1b92 <main+0x23c>
    1b90:	39 cf       	rjmp	.-398    	; 0x1a04 <main+0xae>
		nxtstate = S_ledERR;
		break;
	
	default:
	//error
		nxtstate = S_ledERR;
    1b92:	85 e0       	ldi	r24, 0x05	; 5
    1b94:	40 cf       	rjmp	.-384    	; 0x1a16 <main+0xc0>
		else nxtstate = S_ledOFF;
		break;
		
	case S_EQ_ON:
	//eq code
		nxtstate = S_EQ_ON;
    1b96:	82 e0       	ldi	r24, 0x02	; 2
    1b98:	3e cf       	rjmp	.-388    	; 0x1a16 <main+0xc0>

00001b9a <__mulsi3>:
    1b9a:	db 01       	movw	r26, r22
    1b9c:	8f 93       	push	r24
    1b9e:	9f 93       	push	r25
    1ba0:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <__muluhisi3>
    1ba4:	bf 91       	pop	r27
    1ba6:	af 91       	pop	r26
    1ba8:	a2 9f       	mul	r26, r18
    1baa:	80 0d       	add	r24, r0
    1bac:	91 1d       	adc	r25, r1
    1bae:	a3 9f       	mul	r26, r19
    1bb0:	90 0d       	add	r25, r0
    1bb2:	b2 9f       	mul	r27, r18
    1bb4:	90 0d       	add	r25, r0
    1bb6:	11 24       	eor	r1, r1
    1bb8:	08 95       	ret

00001bba <__udivmodsi4>:
    1bba:	a1 e2       	ldi	r26, 0x21	; 33
    1bbc:	1a 2e       	mov	r1, r26
    1bbe:	aa 1b       	sub	r26, r26
    1bc0:	bb 1b       	sub	r27, r27
    1bc2:	fd 01       	movw	r30, r26
    1bc4:	0d c0       	rjmp	.+26     	; 0x1be0 <__udivmodsi4_ep>

00001bc6 <__udivmodsi4_loop>:
    1bc6:	aa 1f       	adc	r26, r26
    1bc8:	bb 1f       	adc	r27, r27
    1bca:	ee 1f       	adc	r30, r30
    1bcc:	ff 1f       	adc	r31, r31
    1bce:	a2 17       	cp	r26, r18
    1bd0:	b3 07       	cpc	r27, r19
    1bd2:	e4 07       	cpc	r30, r20
    1bd4:	f5 07       	cpc	r31, r21
    1bd6:	20 f0       	brcs	.+8      	; 0x1be0 <__udivmodsi4_ep>
    1bd8:	a2 1b       	sub	r26, r18
    1bda:	b3 0b       	sbc	r27, r19
    1bdc:	e4 0b       	sbc	r30, r20
    1bde:	f5 0b       	sbc	r31, r21

00001be0 <__udivmodsi4_ep>:
    1be0:	66 1f       	adc	r22, r22
    1be2:	77 1f       	adc	r23, r23
    1be4:	88 1f       	adc	r24, r24
    1be6:	99 1f       	adc	r25, r25
    1be8:	1a 94       	dec	r1
    1bea:	69 f7       	brne	.-38     	; 0x1bc6 <__udivmodsi4_loop>
    1bec:	60 95       	com	r22
    1bee:	70 95       	com	r23
    1bf0:	80 95       	com	r24
    1bf2:	90 95       	com	r25
    1bf4:	9b 01       	movw	r18, r22
    1bf6:	ac 01       	movw	r20, r24
    1bf8:	bd 01       	movw	r22, r26
    1bfa:	cf 01       	movw	r24, r30
    1bfc:	08 95       	ret

00001bfe <__tablejump2__>:
    1bfe:	ee 0f       	add	r30, r30
    1c00:	ff 1f       	adc	r31, r31
    1c02:	05 90       	lpm	r0, Z+
    1c04:	f4 91       	lpm	r31, Z
    1c06:	e0 2d       	mov	r30, r0
    1c08:	09 94       	ijmp

00001c0a <__umulhisi3>:
    1c0a:	a2 9f       	mul	r26, r18
    1c0c:	b0 01       	movw	r22, r0
    1c0e:	b3 9f       	mul	r27, r19
    1c10:	c0 01       	movw	r24, r0
    1c12:	a3 9f       	mul	r26, r19
    1c14:	70 0d       	add	r23, r0
    1c16:	81 1d       	adc	r24, r1
    1c18:	11 24       	eor	r1, r1
    1c1a:	91 1d       	adc	r25, r1
    1c1c:	b2 9f       	mul	r27, r18
    1c1e:	70 0d       	add	r23, r0
    1c20:	81 1d       	adc	r24, r1
    1c22:	11 24       	eor	r1, r1
    1c24:	91 1d       	adc	r25, r1
    1c26:	08 95       	ret

00001c28 <__muluhisi3>:
    1c28:	0e 94 05 0e 	call	0x1c0a	; 0x1c0a <__umulhisi3>
    1c2c:	a5 9f       	mul	r26, r21
    1c2e:	90 0d       	add	r25, r0
    1c30:	b4 9f       	mul	r27, r20
    1c32:	90 0d       	add	r25, r0
    1c34:	a4 9f       	mul	r26, r20
    1c36:	80 0d       	add	r24, r0
    1c38:	91 1d       	adc	r25, r1
    1c3a:	11 24       	eor	r1, r1
    1c3c:	08 95       	ret

00001c3e <_exit>:
    1c3e:	f8 94       	cli

00001c40 <__stop_program>:
    1c40:	ff cf       	rjmp	.-2      	; 0x1c40 <__stop_program>
