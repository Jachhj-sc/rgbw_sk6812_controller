
SK6812rgbw driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  00001eaa  00001f3e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001eaa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002f2  00800108  00800108  00001f46  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001f46  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001f78  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001d8  00000000  00000000  00001fb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000331b  00000000  00000000  00002190  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000fa9  00000000  00000000  000054ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001aff  00000000  00000000  00006454  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000080c  00000000  00000000  00007f54  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000098c  00000000  00000000  00008760  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000495e  00000000  00000000  000090ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000688  00000000  00000000  0000da4a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__ctors_end>
       4:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
       8:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
       c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      10:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__vector_4>
      14:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      18:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      1c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      20:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      24:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      28:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      2c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      30:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      34:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      38:	0c 94 98 0d 	jmp	0x1b30	; 0x1b30 <__vector_14>
      3c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      40:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      44:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      48:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      4c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      50:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      54:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      58:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      5c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      60:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      64:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      68:	98 0e       	add	r9, r24
      6a:	eb 0e       	add	r14, r27
      6c:	e3 0e       	add	r14, r19
      6e:	db 0e       	add	r13, r27
      70:	d3 0e       	add	r13, r19
      72:	6c 0e       	add	r6, r28
      74:	c9 0e       	add	r12, r25
      76:	c1 0e       	add	r12, r17
      78:	bd 0e       	add	r11, r29
      7a:	b5 0e       	add	r11, r21
      7c:	ad 0e       	add	r10, r29

0000007e <__ctors_end>:
      7e:	11 24       	eor	r1, r1
      80:	1f be       	out	0x3f, r1	; 63
      82:	cf ef       	ldi	r28, 0xFF	; 255
      84:	d8 e0       	ldi	r29, 0x08	; 8
      86:	de bf       	out	0x3e, r29	; 62
      88:	cd bf       	out	0x3d, r28	; 61

0000008a <__do_copy_data>:
      8a:	11 e0       	ldi	r17, 0x01	; 1
      8c:	a0 e0       	ldi	r26, 0x00	; 0
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	ea ea       	ldi	r30, 0xAA	; 170
      92:	fe e1       	ldi	r31, 0x1E	; 30
      94:	02 c0       	rjmp	.+4      	; 0x9a <__do_copy_data+0x10>
      96:	05 90       	lpm	r0, Z+
      98:	0d 92       	st	X+, r0
      9a:	a8 30       	cpi	r26, 0x08	; 8
      9c:	b1 07       	cpc	r27, r17
      9e:	d9 f7       	brne	.-10     	; 0x96 <__do_copy_data+0xc>

000000a0 <__do_clear_bss>:
      a0:	23 e0       	ldi	r18, 0x03	; 3
      a2:	a8 e0       	ldi	r26, 0x08	; 8
      a4:	b1 e0       	ldi	r27, 0x01	; 1
      a6:	01 c0       	rjmp	.+2      	; 0xaa <.do_clear_bss_start>

000000a8 <.do_clear_bss_loop>:
      a8:	1d 92       	st	X+, r1

000000aa <.do_clear_bss_start>:
      aa:	aa 3f       	cpi	r26, 0xFA	; 250
      ac:	b2 07       	cpc	r27, r18
      ae:	e1 f7       	brne	.-8      	; 0xa8 <.do_clear_bss_loop>
      b0:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <main>
      b4:	0c 94 53 0f 	jmp	0x1ea6	; 0x1ea6 <_exit>

000000b8 <__bad_interrupt>:
      b8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000bc <buttons_init>:

volatile sw_statusflag_t buttonflag = {0};

void buttons_init(void){
//initialize buttons
	DDRB |= (1<<PORTB5);
      bc:	25 9a       	sbi	0x04, 5	; 4
	
	DDRC &= ~(BUT0_MASK | BUT1_MASK | BUT2_MASK);
      be:	87 b1       	in	r24, 0x07	; 7
      c0:	88 7f       	andi	r24, 0xF8	; 248
      c2:	87 b9       	out	0x07, r24	; 7
	//enable pullup
	PORTC |= BUT0_MASK | BUT1_MASK | BUT2_MASK;
      c4:	88 b1       	in	r24, 0x08	; 8
      c6:	87 60       	ori	r24, 0x07	; 7
      c8:	88 b9       	out	0x08, r24	; 8
	
	//enable interrupt
	PCICR |= (1<<PCIE1);
      ca:	e8 e6       	ldi	r30, 0x68	; 104
      cc:	f0 e0       	ldi	r31, 0x00	; 0
      ce:	80 81       	ld	r24, Z
      d0:	82 60       	ori	r24, 0x02	; 2
      d2:	80 83       	st	Z, r24
	
	PCMSK1 |= (1<<PCINT8) | (1<<PCINT9) | (1<<PCINT10);
      d4:	ec e6       	ldi	r30, 0x6C	; 108
      d6:	f0 e0       	ldi	r31, 0x00	; 0
      d8:	80 81       	ld	r24, Z
      da:	87 60       	ori	r24, 0x07	; 7
      dc:	80 83       	st	Z, r24
      de:	08 95       	ret

000000e0 <__vector_4>:
}

ISR(PCINT1_vect){//button interrupt, and set flag for button
      e0:	1f 92       	push	r1
      e2:	0f 92       	push	r0
      e4:	0f b6       	in	r0, 0x3f	; 63
      e6:	0f 92       	push	r0
      e8:	11 24       	eor	r1, r1
      ea:	8f 93       	push	r24
	 //check which button was pressed.
	if(!((BUT0_PIN & BUT0_MASK) == BUT0_MASK)){
      ec:	30 99       	sbic	0x06, 0	; 6
      ee:	03 c0       	rjmp	.+6      	; 0xf6 <__vector_4+0x16>
		 buttonflag.button0 = 1;//if Button on PINC0 is pressed
      f0:	81 e0       	ldi	r24, 0x01	; 1
      f2:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__data_end>
	}
	if(!((BUT1_PIN & BUT1_MASK) == BUT1_MASK)){ 
      f6:	31 99       	sbic	0x06, 1	; 6
      f8:	03 c0       	rjmp	.+6      	; 0x100 <__vector_4+0x20>
		buttonflag.button1 = 1;
      fa:	81 e0       	ldi	r24, 0x01	; 1
      fc:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <__data_end+0x1>
	}
	if(!((BUT2_PIN & BUT2_MASK) == BUT2_MASK)){ 
     100:	32 99       	sbic	0x06, 2	; 6
     102:	03 c0       	rjmp	.+6      	; 0x10a <__vector_4+0x2a>
		buttonflag.button2 = 1;
     104:	81 e0       	ldi	r24, 0x01	; 1
     106:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end+0x2>
	}
}
     10a:	8f 91       	pop	r24
     10c:	0f 90       	pop	r0
     10e:	0f be       	out	0x3f, r0	; 63
     110:	0f 90       	pop	r0
     112:	1f 90       	pop	r1
     114:	18 95       	reti

00000116 <knob_init>:



void knob_init(void){
	//set pc4 & 5 to input
	KNOB0_DDR &= ~( KNOB0_MASK | KNOB1_MASK );
     116:	87 b1       	in	r24, 0x07	; 7
     118:	87 7e       	andi	r24, 0xE7	; 231
     11a:	87 b9       	out	0x07, r24	; 7

	ADMUX |= (1<<REFS0);//set reference voltage to Vcc
     11c:	ec e7       	ldi	r30, 0x7C	; 124
     11e:	f0 e0       	ldi	r31, 0x00	; 0
     120:	80 81       	ld	r24, Z
     122:	80 64       	ori	r24, 0x40	; 64
     124:	80 83       	st	Z, r24
	ADCSRA |=  (1<<ADEN) | (1<<ADSC) | (1<<ADATE) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);;//Analog to digital converter enable, AD start conversion
     126:	ea e7       	ldi	r30, 0x7A	; 122
     128:	f0 e0       	ldi	r31, 0x00	; 0
     12a:	80 81       	ld	r24, Z
     12c:	87 6e       	ori	r24, 0xE7	; 231
     12e:	80 83       	st	Z, r24
	ADCSRB |= (1<<ADTS1);//set ADC auto trigger mode to Ext Interrupt
     130:	eb e7       	ldi	r30, 0x7B	; 123
     132:	f0 e0       	ldi	r31, 0x00	; 0
     134:	80 81       	ld	r24, Z
     136:	82 60       	ori	r24, 0x02	; 2
     138:	80 83       	st	Z, r24
     13a:	08 95       	ret

0000013c <knob_getPos>:
}

uint16_t knob_getPos(uint8_t knob_shift){
	//while((ADCSRA & (1<<ADSC)));//wait for conversion to finish
	//update input channel
	ADMUX &= ~((1<<MUX0) | (1<<MUX1) | (1<<MUX2) | (1<<MUX3));//reset mux
     13c:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     140:	90 7f       	andi	r25, 0xF0	; 240
     142:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	ADMUX |= knob_shift;
     146:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     14a:	89 2b       	or	r24, r25
     14c:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	
	ADCSRA |= (1<<ADSC);//start conversion
     150:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     154:	80 64       	ori	r24, 0x40	; 64
     156:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
	
	while((ADCSRA & (1<<ADSC)));//wait for conversion to finish
     15a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     15e:	86 fd       	sbrc	r24, 6
     160:	fc cf       	rjmp	.-8      	; 0x15a <knob_getPos+0x1e>

	return ADC;
     162:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     166:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
}
     16a:	08 95       	ret

0000016c <setRGBW_ExBounds>:

	buf = (( *color			& 0x000000FF) * _brightness) / 255;
	colorb |= (buf);

	*color = colorb;//update the color with the new brightness value calculated
}
     16c:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <exLow+0x1>
     170:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <exLow>
     174:	70 93 03 01 	sts	0x0103, r23	; 0x800103 <exHigh+0x1>
     178:	60 93 02 01 	sts	0x0102, r22	; 0x800102 <exHigh>
     17c:	08 95       	ret

0000017e <setRGBW_all>:
     17e:	4f 92       	push	r4
     180:	5f 92       	push	r5
     182:	6f 92       	push	r6
     184:	7f 92       	push	r7
     186:	8f 92       	push	r8
     188:	9f 92       	push	r9
     18a:	af 92       	push	r10
     18c:	bf 92       	push	r11
     18e:	cf 92       	push	r12
     190:	df 92       	push	r13
     192:	ef 92       	push	r14
     194:	ff 92       	push	r15
     196:	0f 93       	push	r16
     198:	1f 93       	push	r17
     19a:	cf 93       	push	r28
     19c:	df 93       	push	r29
     19e:	00 d0       	rcall	.+0      	; 0x1a0 <setRGBW_all+0x22>
     1a0:	00 d0       	rcall	.+0      	; 0x1a2 <setRGBW_all+0x24>
     1a2:	00 d0       	rcall	.+0      	; 0x1a4 <setRGBW_all+0x26>
     1a4:	cd b7       	in	r28, 0x3d	; 61
     1a6:	de b7       	in	r29, 0x3e	; 62
     1a8:	69 83       	std	Y+1, r22	; 0x01
     1aa:	7a 83       	std	Y+2, r23	; 0x02
     1ac:	8b 83       	std	Y+3, r24	; 0x03
     1ae:	9c 83       	std	Y+4, r25	; 0x04
     1b0:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <exLow>
     1b4:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <exLow+0x1>
     1b8:	7e 83       	std	Y+6, r23	; 0x06
     1ba:	6d 83       	std	Y+5, r22	; 0x05
     1bc:	00 91 02 01 	lds	r16, 0x0102	; 0x800102 <exHigh>
     1c0:	10 91 03 01 	lds	r17, 0x0103	; 0x800103 <exHigh+0x1>
     1c4:	c0 90 06 01 	lds	r12, 0x0106	; 0x800106 <brightness>
     1c8:	d1 2c       	mov	r13, r1
     1ca:	e1 2c       	mov	r14, r1
     1cc:	f1 2c       	mov	r15, r1
     1ce:	89 81       	ldd	r24, Y+1	; 0x01
     1d0:	9a 81       	ldd	r25, Y+2	; 0x02
     1d2:	ab 81       	ldd	r26, Y+3	; 0x03
     1d4:	bc 81       	ldd	r27, Y+4	; 0x04
     1d6:	2b 2f       	mov	r18, r27
     1d8:	33 27       	eor	r19, r19
     1da:	44 27       	eor	r20, r20
     1dc:	55 27       	eor	r21, r21
     1de:	c7 01       	movw	r24, r14
     1e0:	b6 01       	movw	r22, r12
     1e2:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <__mulsi3>
     1e6:	41 2c       	mov	r4, r1
     1e8:	51 2c       	mov	r5, r1
     1ea:	32 01       	movw	r6, r4
     1ec:	4a 94       	dec	r4
     1ee:	a3 01       	movw	r20, r6
     1f0:	92 01       	movw	r18, r4
     1f2:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <__udivmodsi4>
     1f6:	b2 2e       	mov	r11, r18
     1f8:	aa 24       	eor	r10, r10
     1fa:	99 24       	eor	r9, r9
     1fc:	88 24       	eor	r8, r8
     1fe:	99 81       	ldd	r25, Y+1	; 0x01
     200:	a9 2f       	mov	r26, r25
     202:	b0 e0       	ldi	r27, 0x00	; 0
     204:	a7 01       	movw	r20, r14
     206:	96 01       	movw	r18, r12
     208:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <__muluhisi3>
     20c:	a3 01       	movw	r20, r6
     20e:	92 01       	movw	r18, r4
     210:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <__udivmodsi4>
     214:	82 2a       	or	r8, r18
     216:	93 2a       	or	r9, r19
     218:	a4 2a       	or	r10, r20
     21a:	b5 2a       	or	r11, r21
     21c:	6b 81       	ldd	r22, Y+3	; 0x03
     21e:	a6 2f       	mov	r26, r22
     220:	b0 e0       	ldi	r27, 0x00	; 0
     222:	a7 01       	movw	r20, r14
     224:	96 01       	movw	r18, r12
     226:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <__muluhisi3>
     22a:	a3 01       	movw	r20, r6
     22c:	92 01       	movw	r18, r4
     22e:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <__udivmodsi4>
     232:	d9 01       	movw	r26, r18
     234:	99 27       	eor	r25, r25
     236:	88 27       	eor	r24, r24
     238:	88 2a       	or	r8, r24
     23a:	99 2a       	or	r9, r25
     23c:	aa 2a       	or	r10, r26
     23e:	bb 2a       	or	r11, r27
     240:	7a 81       	ldd	r23, Y+2	; 0x02
     242:	a7 2f       	mov	r26, r23
     244:	b0 e0       	ldi	r27, 0x00	; 0
     246:	a7 01       	movw	r20, r14
     248:	96 01       	movw	r18, r12
     24a:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <__muluhisi3>
     24e:	a3 01       	movw	r20, r6
     250:	92 01       	movw	r18, r4
     252:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <__udivmodsi4>
     256:	b4 2f       	mov	r27, r20
     258:	a3 2f       	mov	r26, r19
     25a:	92 2f       	mov	r25, r18
     25c:	88 27       	eor	r24, r24
     25e:	88 2a       	or	r8, r24
     260:	99 2a       	or	r9, r25
     262:	aa 2a       	or	r10, r26
     264:	bb 2a       	or	r11, r27
     266:	4b 2d       	mov	r20, r11
     268:	3a 2d       	mov	r19, r10
     26a:	29 2d       	mov	r18, r9
     26c:	e6 e2       	ldi	r30, 0x26	; 38
     26e:	f1 e0       	ldi	r31, 0x01	; 1
     270:	80 e0       	ldi	r24, 0x00	; 0
     272:	90 e0       	ldi	r25, 0x00	; 0
     274:	09 c0       	rjmp	.+18     	; 0x288 <setRGBW_all+0x10a>
     276:	11 82       	std	Z+1, r1	; 0x01
     278:	10 82       	st	Z, r1
     27a:	12 82       	std	Z+2, r1	; 0x02
     27c:	13 82       	std	Z+3, r1	; 0x03
     27e:	01 96       	adiw	r24, 0x01	; 1
     280:	34 96       	adiw	r30, 0x04	; 4
     282:	84 3b       	cpi	r24, 0xB4	; 180
     284:	91 05       	cpc	r25, r1
     286:	89 f0       	breq	.+34     	; 0x2aa <setRGBW_all+0x12c>
     288:	ad 81       	ldd	r26, Y+5	; 0x05
     28a:	be 81       	ldd	r27, Y+6	; 0x06
     28c:	8a 17       	cp	r24, r26
     28e:	9b 07       	cpc	r25, r27
     290:	18 f0       	brcs	.+6      	; 0x298 <setRGBW_all+0x11a>
     292:	80 17       	cp	r24, r16
     294:	91 07       	cpc	r25, r17
     296:	78 f3       	brcs	.-34     	; 0x276 <setRGBW_all+0xf8>
     298:	41 83       	std	Z+1, r20	; 0x01
     29a:	30 83       	st	Z, r19
     29c:	22 83       	std	Z+2, r18	; 0x02
     29e:	83 82       	std	Z+3, r8	; 0x03
     2a0:	01 96       	adiw	r24, 0x01	; 1
     2a2:	34 96       	adiw	r30, 0x04	; 4
     2a4:	84 3b       	cpi	r24, 0xB4	; 180
     2a6:	91 05       	cpc	r25, r1
     2a8:	79 f7       	brne	.-34     	; 0x288 <setRGBW_all+0x10a>
     2aa:	26 96       	adiw	r28, 0x06	; 6
     2ac:	0f b6       	in	r0, 0x3f	; 63
     2ae:	f8 94       	cli
     2b0:	de bf       	out	0x3e, r29	; 62
     2b2:	0f be       	out	0x3f, r0	; 63
     2b4:	cd bf       	out	0x3d, r28	; 61
     2b6:	df 91       	pop	r29
     2b8:	cf 91       	pop	r28
     2ba:	1f 91       	pop	r17
     2bc:	0f 91       	pop	r16
     2be:	ff 90       	pop	r15
     2c0:	ef 90       	pop	r14
     2c2:	df 90       	pop	r13
     2c4:	cf 90       	pop	r12
     2c6:	bf 90       	pop	r11
     2c8:	af 90       	pop	r10
     2ca:	9f 90       	pop	r9
     2cc:	8f 90       	pop	r8
     2ce:	7f 90       	pop	r7
     2d0:	6f 90       	pop	r6
     2d2:	5f 90       	pop	r5
     2d4:	4f 90       	pop	r4
     2d6:	08 95       	ret

000002d8 <setRGBW_clear>:
     2d8:	e6 e2       	ldi	r30, 0x26	; 38
     2da:	f1 e0       	ldi	r31, 0x01	; 1
     2dc:	80 e0       	ldi	r24, 0x00	; 0
     2de:	90 e0       	ldi	r25, 0x00	; 0
     2e0:	11 82       	std	Z+1, r1	; 0x01
     2e2:	10 82       	st	Z, r1
     2e4:	12 82       	std	Z+2, r1	; 0x02
     2e6:	13 82       	std	Z+3, r1	; 0x03
     2e8:	01 96       	adiw	r24, 0x01	; 1
     2ea:	34 96       	adiw	r30, 0x04	; 4
     2ec:	84 3b       	cpi	r24, 0xB4	; 180
     2ee:	91 05       	cpc	r25, r1
     2f0:	b9 f7       	brne	.-18     	; 0x2e0 <setRGBW_clear+0x8>
     2f2:	08 95       	ret

000002f4 <setRGBW_Brightness>:
     2f4:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <brightness>
     2f8:	08 95       	ret

000002fa <RGBW_send>:

void RGBW_send(){
		ws2812_setleds_rgbw(led, LEDpixelcount);//send the frame with size of pixelcount to update the strip
     2fa:	64 eb       	ldi	r22, 0xB4	; 180
     2fc:	70 e0       	ldi	r23, 0x00	; 0
     2fe:	86 e2       	ldi	r24, 0x26	; 38
     300:	91 e0       	ldi	r25, 0x01	; 1
     302:	0c 94 c6 0d 	jmp	0x1b8c	; 0x1b8c <ws2812_setleds_rgbw>

00000306 <ColorHSV>:
           automatically by this function because coders may desire a more
           refined gamma-correction function than the simplified
           one-size-fits-all operation of gamma32(). Diffusing the LEDs also
           really seems to help when using low-saturation colors.
*/
uint32_t ColorHSV(uint16_t hue, uint8_t sat, uint8_t val, uint8_t whiteness) {
     306:	8f 92       	push	r8
     308:	9f 92       	push	r9
     30a:	af 92       	push	r10
     30c:	bf 92       	push	r11
     30e:	cf 92       	push	r12
     310:	df 92       	push	r13
     312:	ef 92       	push	r14
     314:	ff 92       	push	r15
     316:	0f 93       	push	r16
     318:	1f 93       	push	r17
     31a:	cf 93       	push	r28
     31c:	df 93       	push	r29
     31e:	f6 2f       	mov	r31, r22
     320:	52 2f       	mov	r21, r18
	// midpoint, not start, of pure cyan). The 8-bit RGB hexcone (256 values
	// each for red, green, blue) really only allows for 1530 distinct hues
	// (not 1536, more on that below), but the full unsigned 16-bit type was
	// chosen for hue so that one's code can easily handle a contiguous color
	// wheel by allowing hue to roll over in either direction.
	hue = (hue * 1530L + 32768) / 65536;
     322:	9c 01       	movw	r18, r24
     324:	aa ef       	ldi	r26, 0xFA	; 250
     326:	b5 e0       	ldi	r27, 0x05	; 5
     328:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <__umulhisi3>
     32c:	dc 01       	movw	r26, r24
     32e:	cb 01       	movw	r24, r22
     330:	90 58       	subi	r25, 0x80	; 128
     332:	af 4f       	sbci	r26, 0xFF	; 255
     334:	bf 4f       	sbci	r27, 0xFF	; 255
     336:	6d 01       	movw	r12, r26
     338:	ff 24       	eor	r15, r15
     33a:	d7 fc       	sbrc	r13, 7
     33c:	f0 94       	com	r15
     33e:	ef 2c       	mov	r14, r15
     340:	96 01       	movw	r18, r12
	// Pure green to not-quite-pure-cyan is:     0, 255, 0 to   0, 255, 254
	// and so forth. Hence, 1530 distinct hues (0 to 1529), and hence why
	// the constants below are not the multiples of 256 you might expect.

	// Convert hue to R,G,B (nested ifs faster than divide+mod+switch):
	if(hue < 510) {         // Red to Green-1
     342:	8e ef       	ldi	r24, 0xFE	; 254
     344:	c8 16       	cp	r12, r24
     346:	81 e0       	ldi	r24, 0x01	; 1
     348:	d8 06       	cpc	r13, r24
     34a:	08 f0       	brcs	.+2      	; 0x34e <ColorHSV+0x48>
     34c:	62 c0       	rjmp	.+196    	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
     34e:	af 2f       	mov	r26, r31
     350:	b0 e0       	ldi	r27, 0x00	; 0
     352:	11 96       	adiw	r26, 0x01	; 1
		b = 0;
		if(hue < 255) {       //   Red to Yellow-1
     354:	2f 3f       	cpi	r18, 0xFF	; 255
     356:	31 05       	cpc	r19, r1
     358:	08 f4       	brcc	.+2      	; 0x35c <ColorHSV+0x56>
     35a:	a2 c0       	rjmp	.+324    	; 0x4a0 <__EEPROM_REGION_LENGTH__+0xa0>
     35c:	2e ef       	ldi	r18, 0xFE	; 254
     35e:	82 2f       	mov	r24, r18
     360:	8c 19       	sub	r24, r12
     362:	8a 9f       	mul	r24, r26
     364:	80 01       	movw	r16, r0
     366:	8b 9f       	mul	r24, r27
     368:	10 0d       	add	r17, r0
     36a:	11 24       	eor	r1, r1
     36c:	01 2f       	mov	r16, r17
     36e:	11 27       	eor	r17, r17
     370:	8f ef       	ldi	r24, 0xFF	; 255
     372:	8a 9f       	mul	r24, r26
     374:	90 01       	movw	r18, r0
     376:	8b 9f       	mul	r24, r27
     378:	30 0d       	add	r19, r0
     37a:	11 24       	eor	r1, r1
     37c:	23 2f       	mov	r18, r19
     37e:	33 27       	eor	r19, r19
			r = 255;
			g = hue;            //     g = 0 to 254
			} else {              //   Yellow to Green-1
			r = 510 - hue;      //     r = 255 to 1
     380:	80 e0       	ldi	r24, 0x00	; 0
     382:	90 e0       	ldi	r25, 0x00	; 0
		r = 255;
		g = b = 0;
	}

	// Apply saturation and value to R,G,B, pack into 32-bit result:
	uint32_t v1 =   1 + val; // 1 to 256; allows >>8 instead of /255
     384:	c4 2f       	mov	r28, r20
     386:	d0 e0       	ldi	r29, 0x00	; 0
     388:	21 96       	adiw	r28, 0x01	; 1
	uint16_t s1 =   1 + sat; // 1 to 256; same reason
	uint8_t  s2 = 255 - sat; // 255 to 0
	uint32_t rgb = (((((((r * s1) >> 8) + s2) * v1) & 0xff00) << 8) | (((((g * s1) >> 8) + s2) * v1) & 0xff00) | ( ((((b * s1) >> 8) + s2) * v1) >> 8));
     38a:	f0 95       	com	r31
     38c:	6f 2f       	mov	r22, r31
     38e:	70 e0       	ldi	r23, 0x00	; 0
     390:	06 0f       	add	r16, r22
     392:	17 1f       	adc	r17, r23
     394:	26 0f       	add	r18, r22
     396:	37 1f       	adc	r19, r23
     398:	fb 01       	movw	r30, r22
     39a:	e8 0f       	add	r30, r24
     39c:	f9 1f       	adc	r31, r25
	return ((rgb << 8)| whiteness);
     39e:	de 01       	movw	r26, r28
     3a0:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <__usmulhisi3>
     3a4:	4b 01       	movw	r8, r22
     3a6:	5c 01       	movw	r10, r24
     3a8:	88 24       	eor	r8, r8
     3aa:	aa 24       	eor	r10, r10
     3ac:	bb 24       	eor	r11, r11
     3ae:	9f 01       	movw	r18, r30
     3b0:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <__usmulhisi3>
     3b4:	bb 27       	eor	r27, r27
     3b6:	a9 2f       	mov	r26, r25
     3b8:	98 2f       	mov	r25, r24
     3ba:	87 2f       	mov	r24, r23
     3bc:	75 01       	movw	r14, r10
     3be:	64 01       	movw	r12, r8
     3c0:	c8 2a       	or	r12, r24
     3c2:	d9 2a       	or	r13, r25
     3c4:	ea 2a       	or	r14, r26
     3c6:	fb 2a       	or	r15, r27
     3c8:	98 01       	movw	r18, r16
     3ca:	de 01       	movw	r26, r28
     3cc:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <__usmulhisi3>
     3d0:	dc 01       	movw	r26, r24
     3d2:	cb 01       	movw	r24, r22
     3d4:	88 27       	eor	r24, r24
     3d6:	aa 27       	eor	r26, r26
     3d8:	bb 27       	eor	r27, r27
     3da:	ba 2f       	mov	r27, r26
     3dc:	a9 2f       	mov	r26, r25
     3de:	98 2f       	mov	r25, r24
     3e0:	88 27       	eor	r24, r24
     3e2:	8c 29       	or	r24, r12
     3e4:	9d 29       	or	r25, r13
     3e6:	ae 29       	or	r26, r14
     3e8:	bf 29       	or	r27, r15
     3ea:	ba 2f       	mov	r27, r26
     3ec:	a9 2f       	mov	r26, r25
     3ee:	98 2f       	mov	r25, r24
     3f0:	88 27       	eor	r24, r24
     3f2:	bc 01       	movw	r22, r24
     3f4:	cd 01       	movw	r24, r26
     3f6:	65 2b       	or	r22, r21
}
     3f8:	df 91       	pop	r29
     3fa:	cf 91       	pop	r28
     3fc:	1f 91       	pop	r17
     3fe:	0f 91       	pop	r16
     400:	ff 90       	pop	r15
     402:	ef 90       	pop	r14
     404:	df 90       	pop	r13
     406:	cf 90       	pop	r12
     408:	bf 90       	pop	r11
     40a:	af 90       	pop	r10
     40c:	9f 90       	pop	r9
     40e:	8f 90       	pop	r8
     410:	08 95       	ret
			g = hue;            //     g = 0 to 254
			} else {              //   Yellow to Green-1
			r = 510 - hue;      //     r = 255 to 1
			g = 255;
		}
		} else if(hue < 1020) { // Green to Blue-1
     412:	8c ef       	ldi	r24, 0xFC	; 252
     414:	c8 16       	cp	r12, r24
     416:	83 e0       	ldi	r24, 0x03	; 3
     418:	d8 06       	cpc	r13, r24
     41a:	e8 f4       	brcc	.+58     	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
     41c:	af 2f       	mov	r26, r31
     41e:	b0 e0       	ldi	r27, 0x00	; 0
     420:	11 96       	adiw	r26, 0x01	; 1
		r = 0;
		if(hue <  765) {      //   Green to Cyan-1
     422:	8d ef       	ldi	r24, 0xFD	; 253
     424:	c8 16       	cp	r12, r24
     426:	82 e0       	ldi	r24, 0x02	; 2
     428:	d8 06       	cpc	r13, r24
     42a:	08 f0       	brcs	.+2      	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
     42c:	4b c0       	rjmp	.+150    	; 0x4c4 <__EEPROM_REGION_LENGTH__+0xc4>
     42e:	ef ef       	ldi	r30, 0xFF	; 255
     430:	ea 9f       	mul	r30, r26
     432:	90 01       	movw	r18, r0
     434:	eb 9f       	mul	r30, r27
     436:	30 0d       	add	r19, r0
     438:	11 24       	eor	r1, r1
     43a:	23 2f       	mov	r18, r19
     43c:	33 27       	eor	r19, r19
     43e:	62 e0       	ldi	r22, 0x02	; 2
     440:	6c 0d       	add	r22, r12
     442:	6a 9f       	mul	r22, r26
     444:	c0 01       	movw	r24, r0
     446:	6b 9f       	mul	r22, r27
     448:	90 0d       	add	r25, r0
     44a:	11 24       	eor	r1, r1
     44c:	89 2f       	mov	r24, r25
     44e:	99 27       	eor	r25, r25
     450:	00 e0       	ldi	r16, 0x00	; 0
     452:	10 e0       	ldi	r17, 0x00	; 0
     454:	97 cf       	rjmp	.-210    	; 0x384 <ColorHSV+0x7e>
			b = hue - 510;      //     b = 0 to 254
			} else {              //   Cyan to Blue-1
			g = 1020 - hue;     //     g = 255 to 1
			b = 255;
		}
		} else if(hue < 1530) { // Blue to Red-1
     456:	8a ef       	ldi	r24, 0xFA	; 250
     458:	c8 16       	cp	r12, r24
     45a:	85 e0       	ldi	r24, 0x05	; 5
     45c:	d8 06       	cpc	r13, r24
     45e:	09 f4       	brne	.+2      	; 0x462 <__EEPROM_REGION_LENGTH__+0x62>
     460:	46 c0       	rjmp	.+140    	; 0x4ee <__EEPROM_REGION_LENGTH__+0xee>
		g = 0;
		if(hue < 1275) {      //   Blue to Magenta-1
     462:	8b ef       	ldi	r24, 0xFB	; 251
     464:	c8 16       	cp	r12, r24
     466:	84 e0       	ldi	r24, 0x04	; 4
     468:	d8 06       	cpc	r13, r24
     46a:	08 f4       	brcc	.+2      	; 0x46e <__EEPROM_REGION_LENGTH__+0x6e>
     46c:	50 c0       	rjmp	.+160    	; 0x50e <__EEPROM_REGION_LENGTH__+0x10e>
     46e:	2f 2f       	mov	r18, r31
     470:	30 e0       	ldi	r19, 0x00	; 0
     472:	2f 5f       	subi	r18, 0xFF	; 255
     474:	3f 4f       	sbci	r19, 0xFF	; 255
     476:	ef ef       	ldi	r30, 0xFF	; 255
     478:	e2 9f       	mul	r30, r18
     47a:	80 01       	movw	r16, r0
     47c:	e3 9f       	mul	r30, r19
     47e:	10 0d       	add	r17, r0
     480:	11 24       	eor	r1, r1
     482:	01 2f       	mov	r16, r17
     484:	11 27       	eor	r17, r17
     486:	ea ef       	ldi	r30, 0xFA	; 250
     488:	9e 2f       	mov	r25, r30
     48a:	9c 19       	sub	r25, r12
     48c:	92 9f       	mul	r25, r18
     48e:	b0 01       	movw	r22, r0
     490:	93 9f       	mul	r25, r19
     492:	70 0d       	add	r23, r0
     494:	11 24       	eor	r1, r1
     496:	87 2f       	mov	r24, r23
     498:	99 27       	eor	r25, r25
			r = hue - 1020;     //     r = 0 to 254
			b = 255;
			} else {              //   Magenta to Red-1
			r = 255;
			b = 1530 - hue;     //     b = 255 to 1
     49a:	20 e0       	ldi	r18, 0x00	; 0
     49c:	30 e0       	ldi	r19, 0x00	; 0
     49e:	72 cf       	rjmp	.-284    	; 0x384 <ColorHSV+0x7e>
     4a0:	2f ef       	ldi	r18, 0xFF	; 255
     4a2:	2a 9f       	mul	r18, r26
     4a4:	80 01       	movw	r16, r0
     4a6:	2b 9f       	mul	r18, r27
     4a8:	10 0d       	add	r17, r0
     4aa:	11 24       	eor	r1, r1
     4ac:	01 2f       	mov	r16, r17
     4ae:	11 27       	eor	r17, r17
     4b0:	ca 9e       	mul	r12, r26
     4b2:	90 01       	movw	r18, r0
     4b4:	cb 9e       	mul	r12, r27
     4b6:	30 0d       	add	r19, r0
     4b8:	11 24       	eor	r1, r1
     4ba:	23 2f       	mov	r18, r19
     4bc:	33 27       	eor	r19, r19
     4be:	80 e0       	ldi	r24, 0x00	; 0
     4c0:	90 e0       	ldi	r25, 0x00	; 0
     4c2:	60 cf       	rjmp	.-320    	; 0x384 <ColorHSV+0x7e>
     4c4:	2c ef       	ldi	r18, 0xFC	; 252
     4c6:	82 2f       	mov	r24, r18
     4c8:	8c 19       	sub	r24, r12
     4ca:	8a 9f       	mul	r24, r26
     4cc:	90 01       	movw	r18, r0
     4ce:	8b 9f       	mul	r24, r27
     4d0:	30 0d       	add	r19, r0
     4d2:	11 24       	eor	r1, r1
     4d4:	23 2f       	mov	r18, r19
     4d6:	33 27       	eor	r19, r19
     4d8:	6f ef       	ldi	r22, 0xFF	; 255
     4da:	6a 9f       	mul	r22, r26
     4dc:	c0 01       	movw	r24, r0
     4de:	6b 9f       	mul	r22, r27
     4e0:	90 0d       	add	r25, r0
     4e2:	11 24       	eor	r1, r1
     4e4:	89 2f       	mov	r24, r25
     4e6:	99 27       	eor	r25, r25
		r = 0;
		if(hue <  765) {      //   Green to Cyan-1
			g = 255;
			b = hue - 510;      //     b = 0 to 254
			} else {              //   Cyan to Blue-1
			g = 1020 - hue;     //     g = 255 to 1
     4e8:	00 e0       	ldi	r16, 0x00	; 0
     4ea:	10 e0       	ldi	r17, 0x00	; 0
     4ec:	4b cf       	rjmp	.-362    	; 0x384 <ColorHSV+0x7e>
     4ee:	8f 2f       	mov	r24, r31
     4f0:	90 e0       	ldi	r25, 0x00	; 0
     4f2:	01 96       	adiw	r24, 0x01	; 1
     4f4:	2f ef       	ldi	r18, 0xFF	; 255
     4f6:	28 9f       	mul	r18, r24
     4f8:	80 01       	movw	r16, r0
     4fa:	29 9f       	mul	r18, r25
     4fc:	10 0d       	add	r17, r0
     4fe:	11 24       	eor	r1, r1
     500:	01 2f       	mov	r16, r17
     502:	11 27       	eor	r17, r17
			b = 255;
		}
		} else if(hue < 1530) { // Blue to Red-1
     504:	80 e0       	ldi	r24, 0x00	; 0
     506:	90 e0       	ldi	r25, 0x00	; 0
     508:	20 e0       	ldi	r18, 0x00	; 0
     50a:	30 e0       	ldi	r19, 0x00	; 0
     50c:	3b cf       	rjmp	.-394    	; 0x384 <ColorHSV+0x7e>
     50e:	2f 2f       	mov	r18, r31
     510:	30 e0       	ldi	r19, 0x00	; 0
     512:	2f 5f       	subi	r18, 0xFF	; 255
     514:	3f 4f       	sbci	r19, 0xFF	; 255
     516:	64 e0       	ldi	r22, 0x04	; 4
     518:	6c 0d       	add	r22, r12
     51a:	62 9f       	mul	r22, r18
     51c:	80 01       	movw	r16, r0
     51e:	63 9f       	mul	r22, r19
     520:	10 0d       	add	r17, r0
     522:	11 24       	eor	r1, r1
     524:	01 2f       	mov	r16, r17
     526:	11 27       	eor	r17, r17
     528:	6f ef       	ldi	r22, 0xFF	; 255
     52a:	62 9f       	mul	r22, r18
     52c:	c0 01       	movw	r24, r0
     52e:	63 9f       	mul	r22, r19
     530:	90 0d       	add	r25, r0
     532:	11 24       	eor	r1, r1
     534:	89 2f       	mov	r24, r25
     536:	99 27       	eor	r25, r25
     538:	20 e0       	ldi	r18, 0x00	; 0
     53a:	30 e0       	ldi	r19, 0x00	; 0
     53c:	23 cf       	rjmp	.-442    	; 0x384 <ColorHSV+0x7e>

0000053e <color32>:
	uint8_t  s2 = 255 - sat; // 255 to 0
	uint32_t rgb = (((((((r * s1) >> 8) + s2) * v1) & 0xff00) << 8) | (((((g * s1) >> 8) + s2) * v1) & 0xff00) | ( ((((b * s1) >> 8) + s2) * v1) >> 8));
	return ((rgb << 8)| whiteness);
}

uint32_t color32(uint8_t r, uint8_t g, uint8_t b, uint8_t w){
     53e:	0f 93       	push	r16
     540:	1f 93       	push	r17
     542:	96 2f       	mov	r25, r22
     544:	34 2f       	mov	r19, r20
	uint32_t color_32 = 0;
	color_32 |= ((uint32_t)r<<8*3)|((uint32_t)g<<8*2)|((uint32_t)b<<8)|(w); //pack the rgbw value in a 32 bit value 
	return color_32;
     546:	42 2f       	mov	r20, r18
     548:	50 e0       	ldi	r21, 0x00	; 0
     54a:	60 e0       	ldi	r22, 0x00	; 0
     54c:	70 e0       	ldi	r23, 0x00	; 0
     54e:	53 2b       	or	r21, r19
     550:	69 2b       	or	r22, r25
     552:	8a 01       	movw	r16, r20
     554:	9b 01       	movw	r18, r22
     556:	38 2b       	or	r19, r24
     558:	c9 01       	movw	r24, r18
     55a:	b8 01       	movw	r22, r16
}
     55c:	1f 91       	pop	r17
     55e:	0f 91       	pop	r16
     560:	08 95       	ret

00000562 <effect_snakeGrow_nb>:
void effect_snakeGrowHue_b(int growSpd, int hueSpd){
	static uint16_t hue = 0;
	effect_snakeGrow_nb(growSpd, ColorHSV(hue+=hueSpd, 255, 255, 0));
}

void effect_snakeGrow_nb(int growSpd, uint32_t color){
     562:	4f 92       	push	r4
     564:	5f 92       	push	r5
     566:	6f 92       	push	r6
     568:	7f 92       	push	r7
     56a:	8f 92       	push	r8
     56c:	9f 92       	push	r9
     56e:	af 92       	push	r10
     570:	bf 92       	push	r11
     572:	cf 92       	push	r12
     574:	df 92       	push	r13
     576:	ef 92       	push	r14
     578:	ff 92       	push	r15
     57a:	cf 93       	push	r28
     57c:	df 93       	push	r29
     57e:	6a 01       	movw	r12, r20
     580:	7b 01       	movw	r14, r22
	static int len = 1;
	static int f = 0;

	if (len < LEDpixelcount){
     582:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     586:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     58a:	24 3b       	cpi	r18, 0xB4	; 180
     58c:	31 05       	cpc	r19, r1
     58e:	94 f4       	brge	.+36     	; 0x5b4 <effect_snakeGrow_nb+0x52>
		if (f < LEDpixelcount){
     590:	40 91 15 01 	lds	r20, 0x0115	; 0x800115 <f.2044>
     594:	50 91 16 01 	lds	r21, 0x0116	; 0x800116 <f.2044+0x1>
     598:	44 3b       	cpi	r20, 0xB4	; 180
     59a:	51 05       	cpc	r21, r1
     59c:	04 f1       	brlt	.+64     	; 0x5de <effect_snakeGrow_nb+0x7c>
			effect_snake_nb(len, color);
			f++;
		}
		else{
			len+=growSpd;
     59e:	82 0f       	add	r24, r18
     5a0:	93 1f       	adc	r25, r19
     5a2:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     5a6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			f = 0;
     5aa:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <f.2044+0x1>
     5ae:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <f.2044>
     5b2:	06 c0       	rjmp	.+12     	; 0x5c0 <effect_snakeGrow_nb+0x5e>
		}
		
		}else{
		len = 1;
     5b4:	81 e0       	ldi	r24, 0x01	; 1
     5b6:	90 e0       	ldi	r25, 0x00	; 0
     5b8:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     5bc:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	}

}
     5c0:	df 91       	pop	r29
     5c2:	cf 91       	pop	r28
     5c4:	ff 90       	pop	r15
     5c6:	ef 90       	pop	r14
     5c8:	df 90       	pop	r13
     5ca:	cf 90       	pop	r12
     5cc:	bf 90       	pop	r11
     5ce:	af 90       	pop	r10
     5d0:	9f 90       	pop	r9
     5d2:	8f 90       	pop	r8
     5d4:	7f 90       	pop	r7
     5d6:	6f 90       	pop	r6
     5d8:	5f 90       	pop	r5
     5da:	4f 90       	pop	r4
     5dc:	08 95       	ret
	static int head = 0;
	static int tail = 0;
	static int8_t state = 0;
	static int prevlen;

	if (state == 0)
     5de:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <state.2063>
     5e2:	81 11       	cpse	r24, r1
     5e4:	b6 c0       	rjmp	.+364    	; 0x752 <effect_snakeGrow_nb+0x1f0>
	{
		tail = -length;
     5e6:	88 27       	eor	r24, r24
     5e8:	99 27       	eor	r25, r25
     5ea:	82 1b       	sub	r24, r18
     5ec:	93 0b       	sbc	r25, r19
		prevlen = length;
     5ee:	30 93 11 01 	sts	0x0111, r19	; 0x800111 <prevlen.2064+0x1>
     5f2:	20 93 10 01 	sts	0x0110, r18	; 0x800110 <prevlen.2064>
		state++;
     5f6:	21 e0       	ldi	r18, 0x01	; 1
     5f8:	20 93 14 01 	sts	0x0114, r18	; 0x800114 <state.2063>
     5fc:	c0 91 0e 01 	lds	r28, 0x010E	; 0x80010e <head.2061>
     600:	d0 91 0f 01 	lds	r29, 0x010F	; 0x80010f <head.2061+0x1>
uint16_t exLow = -1;
uint16_t exHigh = -1;

void setRGBW_pixel(uint16_t pixel, uint32_t color){

	if (pixel < exLow || pixel >= exHigh)
     604:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <exLow>
     608:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <exLow+0x1>
	}else if(prevlen != length && head == prevlen){//make the snake longer when the snake is as long as the previous length and at start position
		tail = head - length;
		prevlen = length;
	}
	
	if(tail >= 0){
     60c:	97 fd       	sbrc	r25, 7
     60e:	0b c0       	rjmp	.+22     	; 0x626 <effect_snakeGrow_nb+0xc4>
void setRGBW_pixel(uint16_t pixel, uint32_t color){

	if (pixel < exLow || pixel >= exHigh)
	{
		calcBrightness(&color, brightness);
		led[pixel].r = (uint8_t)((color>>8*3)	& 0x000000FF);
     610:	fc 01       	movw	r30, r24
     612:	ee 0f       	add	r30, r30
     614:	ff 1f       	adc	r31, r31
     616:	ee 0f       	add	r30, r30
     618:	ff 1f       	adc	r31, r31
     61a:	ea 5d       	subi	r30, 0xDA	; 218
     61c:	fe 4f       	sbci	r31, 0xFE	; 254
		led[pixel].g = (uint8_t)((color>>8*2)	& 0x000000FF);
		led[pixel].b = (uint8_t)((color>>8*1)	& 0x000000FF);
		led[pixel].w = (uint8_t)( color			& 0x000000FF);
	}else{
		led[pixel].r = 0;
     61e:	11 82       	std	Z+1, r1	; 0x01
		led[pixel].g = 0;
     620:	10 82       	st	Z, r1
		led[pixel].b = 0;
     622:	12 82       	std	Z+2, r1	; 0x02
		led[pixel].w = 0;
     624:	13 82       	std	Z+3, r1	; 0x03
	}
	
	if(tail >= 0){
	setRGBW_pixel(tail, 0);
	}
	tail++;
     626:	01 96       	adiw	r24, 0x01	; 1
	if(tail >= LEDpixelcount){//loop for tail
     628:	84 3b       	cpi	r24, 0xB4	; 180
     62a:	91 05       	cpc	r25, r1
     62c:	0c f0       	brlt	.+2      	; 0x630 <effect_snakeGrow_nb+0xce>
     62e:	8c c0       	rjmp	.+280    	; 0x748 <effect_snakeGrow_nb+0x1e6>
	}
	
	if(tail >= 0){
	setRGBW_pixel(tail, 0);
	}
	tail++;
     630:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <tail.2062+0x1>
     634:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <tail.2062>
uint16_t exLow = -1;
uint16_t exHigh = -1;

void setRGBW_pixel(uint16_t pixel, uint32_t color){

	if (pixel < exLow || pixel >= exHigh)
     638:	c2 17       	cp	r28, r18
     63a:	d3 07       	cpc	r29, r19
     63c:	58 f1       	brcs	.+86     	; 0x694 <effect_snakeGrow_nb+0x132>
     63e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <exHigh>
     642:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <exHigh+0x1>
     646:	c8 17       	cp	r28, r24
     648:	d9 07       	cpc	r29, r25
     64a:	20 f5       	brcc	.+72     	; 0x694 <effect_snakeGrow_nb+0x132>
		led[pixel].r = (uint8_t)((color>>8*3)	& 0x000000FF);
		led[pixel].g = (uint8_t)((color>>8*2)	& 0x000000FF);
		led[pixel].b = (uint8_t)((color>>8*1)	& 0x000000FF);
		led[pixel].w = (uint8_t)( color			& 0x000000FF);
	}else{
		led[pixel].r = 0;
     64c:	fe 01       	movw	r30, r28
     64e:	ee 0f       	add	r30, r30
     650:	ff 1f       	adc	r31, r31
     652:	ee 0f       	add	r30, r30
     654:	ff 1f       	adc	r31, r31
     656:	ea 5d       	subi	r30, 0xDA	; 218
     658:	fe 4f       	sbci	r31, 0xFE	; 254
     65a:	11 82       	std	Z+1, r1	; 0x01
		led[pixel].g = 0;
     65c:	10 82       	st	Z, r1
		led[pixel].b = 0;
     65e:	12 82       	std	Z+2, r1	; 0x02
		led[pixel].w = 0;
     660:	13 82       	std	Z+3, r1	; 0x03
		tail = 0;
	}
	
	setRGBW_pixel(head, color);
	
	head++;
     662:	21 96       	adiw	r28, 0x01	; 1
	if(head >= LEDpixelcount){//loop for head
     664:	c4 3b       	cpi	r28, 0xB4	; 180
     666:	d1 05       	cpc	r29, r1
     668:	0c f4       	brge	.+2      	; 0x66c <effect_snakeGrow_nb+0x10a>
     66a:	86 c0       	rjmp	.+268    	; 0x778 <effect_snakeGrow_nb+0x216>
		head = 0;
     66c:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <head.2061+0x1>
     670:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <head.2061>

	*color = colorb;//update the color with the new brightness value calculated
}

void RGBW_send(){
		ws2812_setleds_rgbw(led, LEDpixelcount);//send the frame with size of pixelcount to update the strip
     674:	64 eb       	ldi	r22, 0xB4	; 180
     676:	70 e0       	ldi	r23, 0x00	; 0
     678:	86 e2       	ldi	r24, 0x26	; 38
     67a:	91 e0       	ldi	r25, 0x01	; 1
     67c:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <ws2812_setleds_rgbw>
	static int f = 0;

	if (len < LEDpixelcount){
		if (f < LEDpixelcount){
			effect_snake_nb(len, color);
			f++;
     680:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <f.2044>
     684:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <f.2044+0x1>
     688:	01 96       	adiw	r24, 0x01	; 1
     68a:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <f.2044+0x1>
     68e:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <f.2044>
     692:	96 cf       	rjmp	.-212    	; 0x5c0 <effect_snakeGrow_nb+0x5e>

void calcBrightness(uint32_t *color, uint8_t _brightness){
	uint32_t buf = 0;
	uint32_t colorb = 0;

	buf = (((*color>>8*3)	& 0x000000FF) * _brightness) / 255;
     694:	80 90 06 01 	lds	r8, 0x0106	; 0x800106 <brightness>
     698:	91 2c       	mov	r9, r1
     69a:	a1 2c       	mov	r10, r1
     69c:	b1 2c       	mov	r11, r1

	buf = (((*color>>8*1)	& 0x000000FF) * _brightness) / 255;
	colorb |= (buf<<8*1);

	buf = (( *color			& 0x000000FF) * _brightness) / 255;
	colorb |= (buf);
     69e:	2f 2d       	mov	r18, r15
     6a0:	33 27       	eor	r19, r19
     6a2:	44 27       	eor	r20, r20
     6a4:	55 27       	eor	r21, r21
     6a6:	c5 01       	movw	r24, r10
     6a8:	b4 01       	movw	r22, r8
     6aa:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <__mulsi3>
     6ae:	2f ef       	ldi	r18, 0xFF	; 255
     6b0:	30 e0       	ldi	r19, 0x00	; 0
     6b2:	40 e0       	ldi	r20, 0x00	; 0
     6b4:	50 e0       	ldi	r21, 0x00	; 0
     6b6:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <__udivmodsi4>
     6ba:	72 2e       	mov	r7, r18
     6bc:	66 24       	eor	r6, r6
     6be:	55 24       	eor	r5, r5
     6c0:	44 24       	eor	r4, r4
     6c2:	ac 2d       	mov	r26, r12
     6c4:	b0 e0       	ldi	r27, 0x00	; 0
     6c6:	a5 01       	movw	r20, r10
     6c8:	94 01       	movw	r18, r8
     6ca:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <__muluhisi3>
     6ce:	2f ef       	ldi	r18, 0xFF	; 255
     6d0:	30 e0       	ldi	r19, 0x00	; 0
     6d2:	40 e0       	ldi	r20, 0x00	; 0
     6d4:	50 e0       	ldi	r21, 0x00	; 0
     6d6:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <__udivmodsi4>
     6da:	42 2a       	or	r4, r18
     6dc:	53 2a       	or	r5, r19
     6de:	64 2a       	or	r6, r20
     6e0:	75 2a       	or	r7, r21
     6e2:	ae 2d       	mov	r26, r14
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	a5 01       	movw	r20, r10
     6e8:	94 01       	movw	r18, r8
     6ea:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <__muluhisi3>
     6ee:	2f ef       	ldi	r18, 0xFF	; 255
     6f0:	30 e0       	ldi	r19, 0x00	; 0
     6f2:	40 e0       	ldi	r20, 0x00	; 0
     6f4:	50 e0       	ldi	r21, 0x00	; 0
     6f6:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <__udivmodsi4>
     6fa:	d9 01       	movw	r26, r18
     6fc:	99 27       	eor	r25, r25
     6fe:	88 27       	eor	r24, r24
     700:	48 2a       	or	r4, r24
     702:	59 2a       	or	r5, r25
     704:	6a 2a       	or	r6, r26
     706:	7b 2a       	or	r7, r27
     708:	ad 2d       	mov	r26, r13
     70a:	b0 e0       	ldi	r27, 0x00	; 0
     70c:	a5 01       	movw	r20, r10
     70e:	94 01       	movw	r18, r8
     710:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <__muluhisi3>
     714:	2f ef       	ldi	r18, 0xFF	; 255
     716:	30 e0       	ldi	r19, 0x00	; 0
     718:	40 e0       	ldi	r20, 0x00	; 0
     71a:	50 e0       	ldi	r21, 0x00	; 0
     71c:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <__udivmodsi4>
     720:	b4 2f       	mov	r27, r20
     722:	a3 2f       	mov	r26, r19
     724:	92 2f       	mov	r25, r18
     726:	88 27       	eor	r24, r24
     728:	48 2a       	or	r4, r24
     72a:	59 2a       	or	r5, r25
     72c:	6a 2a       	or	r6, r26
     72e:	7b 2a       	or	r7, r27
void setRGBW_pixel(uint16_t pixel, uint32_t color){

	if (pixel < exLow || pixel >= exHigh)
	{
		calcBrightness(&color, brightness);
		led[pixel].r = (uint8_t)((color>>8*3)	& 0x000000FF);
     730:	fe 01       	movw	r30, r28
     732:	ee 0f       	add	r30, r30
     734:	ff 1f       	adc	r31, r31
     736:	ee 0f       	add	r30, r30
     738:	ff 1f       	adc	r31, r31
     73a:	ea 5d       	subi	r30, 0xDA	; 218
     73c:	fe 4f       	sbci	r31, 0xFE	; 254
     73e:	71 82       	std	Z+1, r7	; 0x01
		led[pixel].g = (uint8_t)((color>>8*2)	& 0x000000FF);
     740:	60 82       	st	Z, r6
		led[pixel].b = (uint8_t)((color>>8*1)	& 0x000000FF);
     742:	52 82       	std	Z+2, r5	; 0x02
		led[pixel].w = (uint8_t)( color			& 0x000000FF);
     744:	43 82       	std	Z+3, r4	; 0x03
     746:	8d cf       	rjmp	.-230    	; 0x662 <effect_snakeGrow_nb+0x100>
	if(tail >= 0){
	setRGBW_pixel(tail, 0);
	}
	tail++;
	if(tail >= LEDpixelcount){//loop for tail
		tail = 0;
     748:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <tail.2062+0x1>
     74c:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <tail.2062>
     750:	73 cf       	rjmp	.-282    	; 0x638 <effect_snakeGrow_nb+0xd6>
	if (state == 0)
	{
		tail = -length;
		prevlen = length;
		state++;
	}else if(prevlen != length && head == prevlen){//make the snake longer when the snake is as long as the previous length and at start position
     752:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <prevlen.2064>
     756:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <prevlen.2064+0x1>
     75a:	c0 91 0e 01 	lds	r28, 0x010E	; 0x80010e <head.2061>
     75e:	d0 91 0f 01 	lds	r29, 0x010F	; 0x80010f <head.2061+0x1>
     762:	28 17       	cp	r18, r24
     764:	39 07       	cpc	r19, r25
     766:	19 f0       	breq	.+6      	; 0x76e <effect_snakeGrow_nb+0x20c>
     768:	8c 17       	cp	r24, r28
     76a:	9d 07       	cpc	r25, r29
     76c:	51 f0       	breq	.+20     	; 0x782 <effect_snakeGrow_nb+0x220>
     76e:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <tail.2062>
     772:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <tail.2062+0x1>
     776:	46 cf       	rjmp	.-372    	; 0x604 <effect_snakeGrow_nb+0xa2>
		tail = 0;
	}
	
	setRGBW_pixel(head, color);
	
	head++;
     778:	d0 93 0f 01 	sts	0x010F, r29	; 0x80010f <head.2061+0x1>
     77c:	c0 93 0e 01 	sts	0x010E, r28	; 0x80010e <head.2061>
     780:	79 cf       	rjmp	.-270    	; 0x674 <effect_snakeGrow_nb+0x112>
	{
		tail = -length;
		prevlen = length;
		state++;
	}else if(prevlen != length && head == prevlen){//make the snake longer when the snake is as long as the previous length and at start position
		tail = head - length;
     782:	ce 01       	movw	r24, r28
     784:	82 1b       	sub	r24, r18
     786:	93 0b       	sbc	r25, r19
		prevlen = length;
     788:	30 93 11 01 	sts	0x0111, r19	; 0x800111 <prevlen.2064+0x1>
     78c:	20 93 10 01 	sts	0x0110, r18	; 0x800110 <prevlen.2064>
     790:	39 cf       	rjmp	.-398    	; 0x604 <effect_snakeGrow_nb+0xa2>

00000792 <effect_snakeGrow_b>:
		len = 1;
	}

}

void effect_snakeGrow_b(int growSpd, uint32_t color){
     792:	2f 92       	push	r2
     794:	3f 92       	push	r3
     796:	4f 92       	push	r4
     798:	5f 92       	push	r5
     79a:	6f 92       	push	r6
     79c:	7f 92       	push	r7
     79e:	8f 92       	push	r8
     7a0:	9f 92       	push	r9
     7a2:	af 92       	push	r10
     7a4:	bf 92       	push	r11
     7a6:	cf 92       	push	r12
     7a8:	df 92       	push	r13
     7aa:	ef 92       	push	r14
     7ac:	ff 92       	push	r15
     7ae:	0f 93       	push	r16
     7b0:	1f 93       	push	r17
     7b2:	cf 93       	push	r28
     7b4:	df 93       	push	r29
     7b6:	cd b7       	in	r28, 0x3d	; 61
     7b8:	de b7       	in	r29, 0x3e	; 62
     7ba:	66 97       	sbiw	r28, 0x16	; 22
     7bc:	0f b6       	in	r0, 0x3f	; 63
     7be:	f8 94       	cli
     7c0:	de bf       	out	0x3e, r29	; 62
     7c2:	0f be       	out	0x3f, r0	; 63
     7c4:	cd bf       	out	0x3d, r28	; 61
     7c6:	9c 8b       	std	Y+20, r25	; 0x14
     7c8:	8b 8b       	std	Y+19, r24	; 0x13

void calcBrightness(uint32_t *color, uint8_t _brightness){
	uint32_t buf = 0;
	uint32_t colorb = 0;

	buf = (((*color>>8*3)	& 0x000000FF) * _brightness) / 255;
     7ca:	87 2f       	mov	r24, r23
     7cc:	99 27       	eor	r25, r25
     7ce:	aa 27       	eor	r26, r26
     7d0:	bb 27       	eor	r27, r27
     7d2:	8b 83       	std	Y+3, r24	; 0x03
     7d4:	9c 83       	std	Y+4, r25	; 0x04
     7d6:	ad 83       	std	Y+5, r26	; 0x05
     7d8:	be 83       	std	Y+6, r27	; 0x06
	colorb |= (buf<<8*3);

	buf = (((*color>>8*2)	& 0x000000FF) * _brightness) / 255;
     7da:	86 2f       	mov	r24, r22
     7dc:	90 e0       	ldi	r25, 0x00	; 0
     7de:	a0 e0       	ldi	r26, 0x00	; 0
     7e0:	b0 e0       	ldi	r27, 0x00	; 0
     7e2:	8f 83       	std	Y+7, r24	; 0x07
     7e4:	98 87       	std	Y+8, r25	; 0x08
     7e6:	a9 87       	std	Y+9, r26	; 0x09
     7e8:	ba 87       	std	Y+10, r27	; 0x0a
	colorb |= (buf<<8*2);

	buf = (((*color>>8*1)	& 0x000000FF) * _brightness) / 255;
     7ea:	85 2f       	mov	r24, r21
     7ec:	90 e0       	ldi	r25, 0x00	; 0
     7ee:	a0 e0       	ldi	r26, 0x00	; 0
     7f0:	b0 e0       	ldi	r27, 0x00	; 0
     7f2:	8b 87       	std	Y+11, r24	; 0x0b
     7f4:	9c 87       	std	Y+12, r25	; 0x0c
     7f6:	ad 87       	std	Y+13, r26	; 0x0d
     7f8:	be 87       	std	Y+14, r27	; 0x0e
     7fa:	af ef       	ldi	r26, 0xFF	; 255
     7fc:	bf ef       	ldi	r27, 0xFF	; 255
     7fe:	ba 83       	std	Y+2, r27	; 0x02
     800:	a9 83       	std	Y+1, r26	; 0x01
	}

}

void effect_snakeGrow_b(int growSpd, uint32_t color){
	for(int len = 1; len < LEDpixelcount; len+=growSpd){
     802:	22 24       	eor	r2, r2
     804:	23 94       	inc	r2
     806:	31 2c       	mov	r3, r1

	buf = (((*color>>8*1)	& 0x000000FF) * _brightness) / 255;
	colorb |= (buf<<8*1);

	buf = (( *color			& 0x000000FF) * _brightness) / 255;
	colorb |= (buf);
     808:	81 2c       	mov	r8, r1
     80a:	91 2c       	mov	r9, r1
     80c:	54 01       	movw	r10, r8
     80e:	8a 94       	dec	r8
     810:	db 01       	movw	r26, r22
     812:	ca 01       	movw	r24, r20
     814:	99 27       	eor	r25, r25
     816:	aa 27       	eor	r26, r26
     818:	bb 27       	eor	r27, r27
     81a:	8f 87       	std	Y+15, r24	; 0x0f
     81c:	98 8b       	std	Y+16, r25	; 0x10
     81e:	a9 8b       	std	Y+17, r26	; 0x11
     820:	ba 8b       	std	Y+18, r27	; 0x12
		len = 1;
	}

}

void effect_snakeGrow_b(int growSpd, uint32_t color){
     822:	04 eb       	ldi	r16, 0xB4	; 180
     824:	10 e0       	ldi	r17, 0x00	; 0
     826:	59 c0       	rjmp	.+178    	; 0x8da <__DATA_REGION_LENGTH__+0xda>
	static int8_t state = 0;
	static int prevlen;

	if (state == 0)
	{
		tail = -length;
     828:	89 81       	ldd	r24, Y+1	; 0x01
     82a:	9a 81       	ldd	r25, Y+2	; 0x02
		prevlen = length;
     82c:	30 92 11 01 	sts	0x0111, r3	; 0x800111 <prevlen.2064+0x1>
     830:	20 92 10 01 	sts	0x0110, r2	; 0x800110 <prevlen.2064>
		state++;
     834:	a1 e0       	ldi	r26, 0x01	; 1
     836:	a0 93 14 01 	sts	0x0114, r26	; 0x800114 <state.2063>
     83a:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <head.2061>
     83e:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <head.2061+0x1>
     842:	3e 8b       	std	Y+22, r19	; 0x16
     844:	2d 8b       	std	Y+21, r18	; 0x15
uint16_t exLow = -1;
uint16_t exHigh = -1;

void setRGBW_pixel(uint16_t pixel, uint32_t color){

	if (pixel < exLow || pixel >= exHigh)
     846:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <exLow>
     84a:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <exLow+0x1>
	}else if(prevlen != length && head == prevlen){//make the snake longer when the snake is as long as the previous length and at start position
		tail = head - length;
		prevlen = length;
	}
	
	if(tail >= 0){
     84e:	97 fd       	sbrc	r25, 7
     850:	0b c0       	rjmp	.+22     	; 0x868 <__DATA_REGION_LENGTH__+0x68>
void setRGBW_pixel(uint16_t pixel, uint32_t color){

	if (pixel < exLow || pixel >= exHigh)
	{
		calcBrightness(&color, brightness);
		led[pixel].r = (uint8_t)((color>>8*3)	& 0x000000FF);
     852:	fc 01       	movw	r30, r24
     854:	ee 0f       	add	r30, r30
     856:	ff 1f       	adc	r31, r31
     858:	ee 0f       	add	r30, r30
     85a:	ff 1f       	adc	r31, r31
     85c:	ea 5d       	subi	r30, 0xDA	; 218
     85e:	fe 4f       	sbci	r31, 0xFE	; 254
		led[pixel].g = (uint8_t)((color>>8*2)	& 0x000000FF);
		led[pixel].b = (uint8_t)((color>>8*1)	& 0x000000FF);
		led[pixel].w = (uint8_t)( color			& 0x000000FF);
	}else{
		led[pixel].r = 0;
     860:	11 82       	std	Z+1, r1	; 0x01
		led[pixel].g = 0;
     862:	10 82       	st	Z, r1
		led[pixel].b = 0;
     864:	12 82       	std	Z+2, r1	; 0x02
		led[pixel].w = 0;
     866:	13 82       	std	Z+3, r1	; 0x03
	}
	
	if(tail >= 0){
	setRGBW_pixel(tail, 0);
	}
	tail++;
     868:	01 96       	adiw	r24, 0x01	; 1
	if(tail >= LEDpixelcount){//loop for tail
     86a:	84 3b       	cpi	r24, 0xB4	; 180
     86c:	91 05       	cpc	r25, r1
     86e:	0c f0       	brlt	.+2      	; 0x872 <__DATA_REGION_LENGTH__+0x72>
     870:	b5 c0       	rjmp	.+362    	; 0x9dc <__stack+0xdd>
	}
	
	if(tail >= 0){
	setRGBW_pixel(tail, 0);
	}
	tail++;
     872:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <tail.2062+0x1>
     876:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <tail.2062>
uint16_t exLow = -1;
uint16_t exHigh = -1;

void setRGBW_pixel(uint16_t pixel, uint32_t color){

	if (pixel < exLow || pixel >= exHigh)
     87a:	8d 89       	ldd	r24, Y+21	; 0x15
     87c:	9e 89       	ldd	r25, Y+22	; 0x16
     87e:	82 17       	cp	r24, r18
     880:	93 07       	cpc	r25, r19
     882:	08 f4       	brcc	.+2      	; 0x886 <__DATA_REGION_LENGTH__+0x86>
     884:	46 c0       	rjmp	.+140    	; 0x912 <__stack+0x13>
     886:	dc 01       	movw	r26, r24
     888:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <exHigh>
     88c:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <exHigh+0x1>
     890:	a8 17       	cp	r26, r24
     892:	b9 07       	cpc	r27, r25
     894:	08 f0       	brcs	.+2      	; 0x898 <__DATA_REGION_LENGTH__+0x98>
     896:	3d c0       	rjmp	.+122    	; 0x912 <__stack+0x13>
     898:	fd 01       	movw	r30, r26
		led[pixel].r = (uint8_t)((color>>8*3)	& 0x000000FF);
		led[pixel].g = (uint8_t)((color>>8*2)	& 0x000000FF);
		led[pixel].b = (uint8_t)((color>>8*1)	& 0x000000FF);
		led[pixel].w = (uint8_t)( color			& 0x000000FF);
	}else{
		led[pixel].r = 0;
     89a:	ee 0f       	add	r30, r30
     89c:	ff 1f       	adc	r31, r31
     89e:	ee 0f       	add	r30, r30
     8a0:	ff 1f       	adc	r31, r31
     8a2:	ea 5d       	subi	r30, 0xDA	; 218
     8a4:	fe 4f       	sbci	r31, 0xFE	; 254
     8a6:	11 82       	std	Z+1, r1	; 0x01
		led[pixel].g = 0;
     8a8:	10 82       	st	Z, r1
		led[pixel].b = 0;
     8aa:	12 82       	std	Z+2, r1	; 0x02
		led[pixel].w = 0;
     8ac:	13 82       	std	Z+3, r1	; 0x03
		tail = 0;
	}
	
	setRGBW_pixel(head, color);
	
	head++;
     8ae:	2d 89       	ldd	r18, Y+21	; 0x15
     8b0:	3e 89       	ldd	r19, Y+22	; 0x16
     8b2:	2f 5f       	subi	r18, 0xFF	; 255
     8b4:	3f 4f       	sbci	r19, 0xFF	; 255
	if(head >= LEDpixelcount){//loop for head
     8b6:	24 3b       	cpi	r18, 0xB4	; 180
     8b8:	31 05       	cpc	r19, r1
     8ba:	0c f4       	brge	.+2      	; 0x8be <__DATA_REGION_LENGTH__+0xbe>
     8bc:	8a c0       	rjmp	.+276    	; 0x9d2 <__stack+0xd3>
		head = 0;
     8be:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <head.2061+0x1>
     8c2:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <head.2061>

	*color = colorb;//update the color with the new brightness value calculated
}

void RGBW_send(){
		ws2812_setleds_rgbw(led, LEDpixelcount);//send the frame with size of pixelcount to update the strip
     8c6:	64 eb       	ldi	r22, 0xB4	; 180
     8c8:	70 e0       	ldi	r23, 0x00	; 0
     8ca:	86 e2       	ldi	r24, 0x26	; 38
     8cc:	91 e0       	ldi	r25, 0x01	; 1
     8ce:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <ws2812_setleds_rgbw>
     8d2:	01 50       	subi	r16, 0x01	; 1
     8d4:	11 09       	sbc	r17, r1

}

void effect_snakeGrow_b(int growSpd, uint32_t color){
	for(int len = 1; len < LEDpixelcount; len+=growSpd){
		for (int f = 0; f < LEDpixelcount; f++){//finish full animation frame
     8d6:	09 f4       	brne	.+2      	; 0x8da <__DATA_REGION_LENGTH__+0xda>
     8d8:	99 c0       	rjmp	.+306    	; 0xa0c <__stack+0x10d>
	static int head = 0;
	static int tail = 0;
	static int8_t state = 0;
	static int prevlen;

	if (state == 0)
     8da:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <state.2063>
     8de:	88 23       	and	r24, r24
     8e0:	09 f4       	brne	.+2      	; 0x8e4 <__DATA_REGION_LENGTH__+0xe4>
     8e2:	a2 cf       	rjmp	.-188    	; 0x828 <__DATA_REGION_LENGTH__+0x28>
	{
		tail = -length;
		prevlen = length;
		state++;
	}else if(prevlen != length && head == prevlen){//make the snake longer when the snake is as long as the previous length and at start position
     8e4:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <prevlen.2064>
     8e8:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <prevlen.2064+0x1>
     8ec:	82 15       	cp	r24, r2
     8ee:	93 05       	cpc	r25, r3
     8f0:	09 f4       	brne	.+2      	; 0x8f4 <__DATA_REGION_LENGTH__+0xf4>
     8f2:	79 c0       	rjmp	.+242    	; 0x9e6 <__stack+0xe7>
     8f4:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <head.2061>
     8f8:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <head.2061+0x1>
     8fc:	3e 8b       	std	Y+22, r19	; 0x16
     8fe:	2d 8b       	std	Y+21, r18	; 0x15
     900:	82 17       	cp	r24, r18
     902:	93 07       	cpc	r25, r19
     904:	09 f4       	brne	.+2      	; 0x908 <__stack+0x9>
     906:	7a c0       	rjmp	.+244    	; 0x9fc <__stack+0xfd>
     908:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <tail.2062>
     90c:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <tail.2062+0x1>
     910:	9a cf       	rjmp	.-204    	; 0x846 <__DATA_REGION_LENGTH__+0x46>

void calcBrightness(uint32_t *color, uint8_t _brightness){
	uint32_t buf = 0;
	uint32_t colorb = 0;

	buf = (((*color>>8*3)	& 0x000000FF) * _brightness) / 255;
     912:	c0 90 06 01 	lds	r12, 0x0106	; 0x800106 <brightness>
     916:	d1 2c       	mov	r13, r1
     918:	e1 2c       	mov	r14, r1
     91a:	f1 2c       	mov	r15, r1

	buf = (((*color>>8*1)	& 0x000000FF) * _brightness) / 255;
	colorb |= (buf<<8*1);

	buf = (( *color			& 0x000000FF) * _brightness) / 255;
	colorb |= (buf);
     91c:	2b 81       	ldd	r18, Y+3	; 0x03
     91e:	3c 81       	ldd	r19, Y+4	; 0x04
     920:	4d 81       	ldd	r20, Y+5	; 0x05
     922:	5e 81       	ldd	r21, Y+6	; 0x06
     924:	c7 01       	movw	r24, r14
     926:	b6 01       	movw	r22, r12
     928:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <__mulsi3>
     92c:	a5 01       	movw	r20, r10
     92e:	94 01       	movw	r18, r8
     930:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <__udivmodsi4>
     934:	72 2e       	mov	r7, r18
     936:	66 24       	eor	r6, r6
     938:	55 24       	eor	r5, r5
     93a:	44 24       	eor	r4, r4
     93c:	2f 85       	ldd	r18, Y+15	; 0x0f
     93e:	38 89       	ldd	r19, Y+16	; 0x10
     940:	49 89       	ldd	r20, Y+17	; 0x11
     942:	5a 89       	ldd	r21, Y+18	; 0x12
     944:	c7 01       	movw	r24, r14
     946:	b6 01       	movw	r22, r12
     948:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <__mulsi3>
     94c:	a5 01       	movw	r20, r10
     94e:	94 01       	movw	r18, r8
     950:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <__udivmodsi4>
     954:	42 2a       	or	r4, r18
     956:	53 2a       	or	r5, r19
     958:	64 2a       	or	r6, r20
     95a:	75 2a       	or	r7, r21
     95c:	a7 01       	movw	r20, r14
     95e:	96 01       	movw	r18, r12
     960:	6f 81       	ldd	r22, Y+7	; 0x07
     962:	78 85       	ldd	r23, Y+8	; 0x08
     964:	89 85       	ldd	r24, Y+9	; 0x09
     966:	9a 85       	ldd	r25, Y+10	; 0x0a
     968:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <__mulsi3>
     96c:	a5 01       	movw	r20, r10
     96e:	94 01       	movw	r18, r8
     970:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <__udivmodsi4>
     974:	d9 01       	movw	r26, r18
     976:	99 27       	eor	r25, r25
     978:	88 27       	eor	r24, r24
     97a:	48 2a       	or	r4, r24
     97c:	59 2a       	or	r5, r25
     97e:	6a 2a       	or	r6, r26
     980:	7b 2a       	or	r7, r27
     982:	a7 01       	movw	r20, r14
     984:	96 01       	movw	r18, r12
     986:	6b 85       	ldd	r22, Y+11	; 0x0b
     988:	7c 85       	ldd	r23, Y+12	; 0x0c
     98a:	8d 85       	ldd	r24, Y+13	; 0x0d
     98c:	9e 85       	ldd	r25, Y+14	; 0x0e
     98e:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <__mulsi3>
     992:	a5 01       	movw	r20, r10
     994:	94 01       	movw	r18, r8
     996:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <__udivmodsi4>
     99a:	b4 2f       	mov	r27, r20
     99c:	a3 2f       	mov	r26, r19
     99e:	92 2f       	mov	r25, r18
     9a0:	88 27       	eor	r24, r24
     9a2:	48 2a       	or	r4, r24
     9a4:	59 2a       	or	r5, r25
     9a6:	6a 2a       	or	r6, r26
     9a8:	7b 2a       	or	r7, r27
void setRGBW_pixel(uint16_t pixel, uint32_t color){

	if (pixel < exLow || pixel >= exHigh)
	{
		calcBrightness(&color, brightness);
		led[pixel].r = (uint8_t)((color>>8*3)	& 0x000000FF);
     9aa:	ed 89       	ldd	r30, Y+21	; 0x15
     9ac:	fe 89       	ldd	r31, Y+22	; 0x16
     9ae:	ee 0f       	add	r30, r30
     9b0:	ff 1f       	adc	r31, r31
     9b2:	ee 0f       	add	r30, r30
     9b4:	ff 1f       	adc	r31, r31
     9b6:	ea 5d       	subi	r30, 0xDA	; 218
     9b8:	fe 4f       	sbci	r31, 0xFE	; 254
     9ba:	71 82       	std	Z+1, r7	; 0x01
		led[pixel].g = (uint8_t)((color>>8*2)	& 0x000000FF);
     9bc:	60 82       	st	Z, r6
		led[pixel].b = (uint8_t)((color>>8*1)	& 0x000000FF);
     9be:	52 82       	std	Z+2, r5	; 0x02
		led[pixel].w = (uint8_t)( color			& 0x000000FF);
     9c0:	43 82       	std	Z+3, r4	; 0x03
		tail = 0;
	}
	
	setRGBW_pixel(head, color);
	
	head++;
     9c2:	2d 89       	ldd	r18, Y+21	; 0x15
     9c4:	3e 89       	ldd	r19, Y+22	; 0x16
     9c6:	2f 5f       	subi	r18, 0xFF	; 255
     9c8:	3f 4f       	sbci	r19, 0xFF	; 255
	if(head >= LEDpixelcount){//loop for head
     9ca:	24 3b       	cpi	r18, 0xB4	; 180
     9cc:	31 05       	cpc	r19, r1
     9ce:	0c f0       	brlt	.+2      	; 0x9d2 <__stack+0xd3>
     9d0:	76 cf       	rjmp	.-276    	; 0x8be <__DATA_REGION_LENGTH__+0xbe>
		tail = 0;
	}
	
	setRGBW_pixel(head, color);
	
	head++;
     9d2:	30 93 0f 01 	sts	0x010F, r19	; 0x80010f <head.2061+0x1>
     9d6:	20 93 0e 01 	sts	0x010E, r18	; 0x80010e <head.2061>
     9da:	75 cf       	rjmp	.-278    	; 0x8c6 <__DATA_REGION_LENGTH__+0xc6>
	if(tail >= 0){
	setRGBW_pixel(tail, 0);
	}
	tail++;
	if(tail >= LEDpixelcount){//loop for tail
		tail = 0;
     9dc:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <tail.2062+0x1>
     9e0:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <tail.2062>
     9e4:	4a cf       	rjmp	.-364    	; 0x87a <__DATA_REGION_LENGTH__+0x7a>
     9e6:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <tail.2062>
     9ea:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <tail.2062+0x1>
     9ee:	a0 91 0e 01 	lds	r26, 0x010E	; 0x80010e <head.2061>
     9f2:	b0 91 0f 01 	lds	r27, 0x010F	; 0x80010f <head.2061+0x1>
     9f6:	be 8b       	std	Y+22, r27	; 0x16
     9f8:	ad 8b       	std	Y+21, r26	; 0x15
     9fa:	25 cf       	rjmp	.-438    	; 0x846 <__DATA_REGION_LENGTH__+0x46>
     9fc:	c9 01       	movw	r24, r18
	{
		tail = -length;
		prevlen = length;
		state++;
	}else if(prevlen != length && head == prevlen){//make the snake longer when the snake is as long as the previous length and at start position
		tail = head - length;
     9fe:	82 19       	sub	r24, r2
     a00:	93 09       	sbc	r25, r3
		prevlen = length;
     a02:	30 92 11 01 	sts	0x0111, r3	; 0x800111 <prevlen.2064+0x1>
     a06:	20 92 10 01 	sts	0x0110, r2	; 0x800110 <prevlen.2064>
     a0a:	1d cf       	rjmp	.-454    	; 0x846 <__DATA_REGION_LENGTH__+0x46>
	}

}

void effect_snakeGrow_b(int growSpd, uint32_t color){
	for(int len = 1; len < LEDpixelcount; len+=growSpd){
     a0c:	8b 89       	ldd	r24, Y+19	; 0x13
     a0e:	9c 89       	ldd	r25, Y+20	; 0x14
     a10:	28 0e       	add	r2, r24
     a12:	39 1e       	adc	r3, r25
     a14:	a9 81       	ldd	r26, Y+1	; 0x01
     a16:	ba 81       	ldd	r27, Y+2	; 0x02
     a18:	a8 1b       	sub	r26, r24
     a1a:	b9 0b       	sbc	r27, r25
     a1c:	ba 83       	std	Y+2, r27	; 0x02
     a1e:	a9 83       	std	Y+1, r26	; 0x01
     a20:	b4 eb       	ldi	r27, 0xB4	; 180
     a22:	2b 16       	cp	r2, r27
     a24:	31 04       	cpc	r3, r1
     a26:	0c f4       	brge	.+2      	; 0xa2a <__stack+0x12b>
     a28:	fc ce       	rjmp	.-520    	; 0x822 <__DATA_REGION_LENGTH__+0x22>
		for (int f = 0; f < LEDpixelcount; f++){//finish full animation frame
			effect_snake_nb(len, color);
		}
	}
}
     a2a:	66 96       	adiw	r28, 0x16	; 22
     a2c:	0f b6       	in	r0, 0x3f	; 63
     a2e:	f8 94       	cli
     a30:	de bf       	out	0x3e, r29	; 62
     a32:	0f be       	out	0x3f, r0	; 63
     a34:	cd bf       	out	0x3d, r28	; 61
     a36:	df 91       	pop	r29
     a38:	cf 91       	pop	r28
     a3a:	1f 91       	pop	r17
     a3c:	0f 91       	pop	r16
     a3e:	ff 90       	pop	r15
     a40:	ef 90       	pop	r14
     a42:	df 90       	pop	r13
     a44:	cf 90       	pop	r12
     a46:	bf 90       	pop	r11
     a48:	af 90       	pop	r10
     a4a:	9f 90       	pop	r9
     a4c:	8f 90       	pop	r8
     a4e:	7f 90       	pop	r7
     a50:	6f 90       	pop	r6
     a52:	5f 90       	pop	r5
     a54:	4f 90       	pop	r4
     a56:	3f 90       	pop	r3
     a58:	2f 90       	pop	r2
     a5a:	08 95       	ret

00000a5c <effect_snake_nb>:

void effect_snake_nb(int length, uint32_t color){ // make a circulating snake 
     a5c:	4f 92       	push	r4
     a5e:	5f 92       	push	r5
     a60:	6f 92       	push	r6
     a62:	7f 92       	push	r7
     a64:	8f 92       	push	r8
     a66:	9f 92       	push	r9
     a68:	af 92       	push	r10
     a6a:	bf 92       	push	r11
     a6c:	cf 92       	push	r12
     a6e:	df 92       	push	r13
     a70:	ef 92       	push	r14
     a72:	ff 92       	push	r15
     a74:	cf 93       	push	r28
     a76:	df 93       	push	r29
     a78:	00 d0       	rcall	.+0      	; 0xa7a <effect_snake_nb+0x1e>
     a7a:	00 d0       	rcall	.+0      	; 0xa7c <effect_snake_nb+0x20>
     a7c:	00 d0       	rcall	.+0      	; 0xa7e <effect_snake_nb+0x22>
     a7e:	cd b7       	in	r28, 0x3d	; 61
     a80:	de b7       	in	r29, 0x3e	; 62
     a82:	49 83       	std	Y+1, r20	; 0x01
     a84:	5a 83       	std	Y+2, r21	; 0x02
     a86:	6b 83       	std	Y+3, r22	; 0x03
     a88:	7c 83       	std	Y+4, r23	; 0x04
	static int head = 0;
	static int tail = 0;
	static int8_t state = 0;
	static int prevlen;

	if (state == 0)
     a8a:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <state.2063>
     a8e:	21 11       	cpse	r18, r1
     a90:	cd c0       	rjmp	.+410    	; 0xc2c <effect_snake_nb+0x1d0>
	{
		tail = -length;
     a92:	22 27       	eor	r18, r18
     a94:	33 27       	eor	r19, r19
     a96:	28 1b       	sub	r18, r24
     a98:	39 0b       	sbc	r19, r25
		prevlen = length;
     a9a:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <prevlen.2064+0x1>
     a9e:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <prevlen.2064>
		state++;
     aa2:	81 e0       	ldi	r24, 0x01	; 1
     aa4:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <state.2063>
     aa8:	40 91 0e 01 	lds	r20, 0x010E	; 0x80010e <head.2061>
     aac:	50 91 0f 01 	lds	r21, 0x010F	; 0x80010f <head.2061+0x1>
     ab0:	5e 83       	std	Y+6, r21	; 0x06
     ab2:	4d 83       	std	Y+5, r20	; 0x05
uint16_t exLow = -1;
uint16_t exHigh = -1;

void setRGBW_pixel(uint16_t pixel, uint32_t color){

	if (pixel < exLow || pixel >= exHigh)
     ab4:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <exLow>
     ab8:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <exLow+0x1>
	}else if(prevlen != length && head == prevlen){//make the snake longer when the snake is as long as the previous length and at start position
		tail = head - length;
		prevlen = length;
	}
	
	if(tail >= 0){
     abc:	37 fd       	sbrc	r19, 7
     abe:	0b c0       	rjmp	.+22     	; 0xad6 <effect_snake_nb+0x7a>
void setRGBW_pixel(uint16_t pixel, uint32_t color){

	if (pixel < exLow || pixel >= exHigh)
	{
		calcBrightness(&color, brightness);
		led[pixel].r = (uint8_t)((color>>8*3)	& 0x000000FF);
     ac0:	f9 01       	movw	r30, r18
     ac2:	ee 0f       	add	r30, r30
     ac4:	ff 1f       	adc	r31, r31
     ac6:	ee 0f       	add	r30, r30
     ac8:	ff 1f       	adc	r31, r31
     aca:	ea 5d       	subi	r30, 0xDA	; 218
     acc:	fe 4f       	sbci	r31, 0xFE	; 254
		led[pixel].g = (uint8_t)((color>>8*2)	& 0x000000FF);
		led[pixel].b = (uint8_t)((color>>8*1)	& 0x000000FF);
		led[pixel].w = (uint8_t)( color			& 0x000000FF);
	}else{
		led[pixel].r = 0;
     ace:	11 82       	std	Z+1, r1	; 0x01
		led[pixel].g = 0;
     ad0:	10 82       	st	Z, r1
		led[pixel].b = 0;
     ad2:	12 82       	std	Z+2, r1	; 0x02
		led[pixel].w = 0;
     ad4:	13 82       	std	Z+3, r1	; 0x03
	}
	
	if(tail >= 0){
	setRGBW_pixel(tail, 0);
	}
	tail++;
     ad6:	2f 5f       	subi	r18, 0xFF	; 255
     ad8:	3f 4f       	sbci	r19, 0xFF	; 255
	if(tail >= LEDpixelcount){//loop for tail
     ada:	24 3b       	cpi	r18, 0xB4	; 180
     adc:	31 05       	cpc	r19, r1
     ade:	0c f0       	brlt	.+2      	; 0xae2 <effect_snake_nb+0x86>
     ae0:	a0 c0       	rjmp	.+320    	; 0xc22 <effect_snake_nb+0x1c6>
	}
	
	if(tail >= 0){
	setRGBW_pixel(tail, 0);
	}
	tail++;
     ae2:	30 93 13 01 	sts	0x0113, r19	; 0x800113 <tail.2062+0x1>
     ae6:	20 93 12 01 	sts	0x0112, r18	; 0x800112 <tail.2062>
uint16_t exLow = -1;
uint16_t exHigh = -1;

void setRGBW_pixel(uint16_t pixel, uint32_t color){

	if (pixel < exLow || pixel >= exHigh)
     aea:	2d 81       	ldd	r18, Y+5	; 0x05
     aec:	3e 81       	ldd	r19, Y+6	; 0x06
     aee:	28 17       	cp	r18, r24
     af0:	39 07       	cpc	r19, r25
     af2:	98 f0       	brcs	.+38     	; 0xb1a <effect_snake_nb+0xbe>
     af4:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <exHigh>
     af8:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <exHigh+0x1>
     afc:	28 17       	cp	r18, r24
     afe:	39 07       	cpc	r19, r25
     b00:	60 f4       	brcc	.+24     	; 0xb1a <effect_snake_nb+0xbe>
     b02:	f9 01       	movw	r30, r18
		led[pixel].r = (uint8_t)((color>>8*3)	& 0x000000FF);
		led[pixel].g = (uint8_t)((color>>8*2)	& 0x000000FF);
		led[pixel].b = (uint8_t)((color>>8*1)	& 0x000000FF);
		led[pixel].w = (uint8_t)( color			& 0x000000FF);
	}else{
		led[pixel].r = 0;
     b04:	ee 0f       	add	r30, r30
     b06:	ff 1f       	adc	r31, r31
     b08:	ee 0f       	add	r30, r30
     b0a:	ff 1f       	adc	r31, r31
     b0c:	ea 5d       	subi	r30, 0xDA	; 218
     b0e:	fe 4f       	sbci	r31, 0xFE	; 254
     b10:	11 82       	std	Z+1, r1	; 0x01
		led[pixel].g = 0;
     b12:	10 82       	st	Z, r1
		led[pixel].b = 0;
     b14:	12 82       	std	Z+2, r1	; 0x02
		led[pixel].w = 0;
     b16:	13 82       	std	Z+3, r1	; 0x03
     b18:	5d c0       	rjmp	.+186    	; 0xbd4 <effect_snake_nb+0x178>

void calcBrightness(uint32_t *color, uint8_t _brightness){
	uint32_t buf = 0;
	uint32_t colorb = 0;

	buf = (((*color>>8*3)	& 0x000000FF) * _brightness) / 255;
     b1a:	c0 90 06 01 	lds	r12, 0x0106	; 0x800106 <brightness>
     b1e:	d1 2c       	mov	r13, r1
     b20:	e1 2c       	mov	r14, r1
     b22:	f1 2c       	mov	r15, r1

	buf = (((*color>>8*1)	& 0x000000FF) * _brightness) / 255;
	colorb |= (buf<<8*1);

	buf = (( *color			& 0x000000FF) * _brightness) / 255;
	colorb |= (buf);
     b24:	89 81       	ldd	r24, Y+1	; 0x01
     b26:	9a 81       	ldd	r25, Y+2	; 0x02
     b28:	ab 81       	ldd	r26, Y+3	; 0x03
     b2a:	bc 81       	ldd	r27, Y+4	; 0x04
     b2c:	2b 2f       	mov	r18, r27
     b2e:	33 27       	eor	r19, r19
     b30:	44 27       	eor	r20, r20
     b32:	55 27       	eor	r21, r21
     b34:	c7 01       	movw	r24, r14
     b36:	b6 01       	movw	r22, r12
     b38:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <__mulsi3>
     b3c:	41 2c       	mov	r4, r1
     b3e:	51 2c       	mov	r5, r1
     b40:	32 01       	movw	r6, r4
     b42:	4a 94       	dec	r4
     b44:	a3 01       	movw	r20, r6
     b46:	92 01       	movw	r18, r4
     b48:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <__udivmodsi4>
     b4c:	b2 2e       	mov	r11, r18
     b4e:	aa 24       	eor	r10, r10
     b50:	99 24       	eor	r9, r9
     b52:	88 24       	eor	r8, r8
     b54:	99 81       	ldd	r25, Y+1	; 0x01
     b56:	a9 2f       	mov	r26, r25
     b58:	b0 e0       	ldi	r27, 0x00	; 0
     b5a:	a7 01       	movw	r20, r14
     b5c:	96 01       	movw	r18, r12
     b5e:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <__muluhisi3>
     b62:	a3 01       	movw	r20, r6
     b64:	92 01       	movw	r18, r4
     b66:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <__udivmodsi4>
     b6a:	82 2a       	or	r8, r18
     b6c:	93 2a       	or	r9, r19
     b6e:	a4 2a       	or	r10, r20
     b70:	b5 2a       	or	r11, r21
     b72:	2b 81       	ldd	r18, Y+3	; 0x03
     b74:	a2 2f       	mov	r26, r18
     b76:	b0 e0       	ldi	r27, 0x00	; 0
     b78:	a7 01       	movw	r20, r14
     b7a:	96 01       	movw	r18, r12
     b7c:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <__muluhisi3>
     b80:	a3 01       	movw	r20, r6
     b82:	92 01       	movw	r18, r4
     b84:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <__udivmodsi4>
     b88:	d9 01       	movw	r26, r18
     b8a:	99 27       	eor	r25, r25
     b8c:	88 27       	eor	r24, r24
     b8e:	88 2a       	or	r8, r24
     b90:	99 2a       	or	r9, r25
     b92:	aa 2a       	or	r10, r26
     b94:	bb 2a       	or	r11, r27
     b96:	3a 81       	ldd	r19, Y+2	; 0x02
     b98:	a3 2f       	mov	r26, r19
     b9a:	b0 e0       	ldi	r27, 0x00	; 0
     b9c:	a7 01       	movw	r20, r14
     b9e:	96 01       	movw	r18, r12
     ba0:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <__muluhisi3>
     ba4:	a3 01       	movw	r20, r6
     ba6:	92 01       	movw	r18, r4
     ba8:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <__udivmodsi4>
     bac:	b4 2f       	mov	r27, r20
     bae:	a3 2f       	mov	r26, r19
     bb0:	92 2f       	mov	r25, r18
     bb2:	88 27       	eor	r24, r24
     bb4:	88 2a       	or	r8, r24
     bb6:	99 2a       	or	r9, r25
     bb8:	aa 2a       	or	r10, r26
     bba:	bb 2a       	or	r11, r27
void setRGBW_pixel(uint16_t pixel, uint32_t color){

	if (pixel < exLow || pixel >= exHigh)
	{
		calcBrightness(&color, brightness);
		led[pixel].r = (uint8_t)((color>>8*3)	& 0x000000FF);
     bbc:	ed 81       	ldd	r30, Y+5	; 0x05
     bbe:	fe 81       	ldd	r31, Y+6	; 0x06
     bc0:	ee 0f       	add	r30, r30
     bc2:	ff 1f       	adc	r31, r31
     bc4:	ee 0f       	add	r30, r30
     bc6:	ff 1f       	adc	r31, r31
     bc8:	ea 5d       	subi	r30, 0xDA	; 218
     bca:	fe 4f       	sbci	r31, 0xFE	; 254
     bcc:	b1 82       	std	Z+1, r11	; 0x01
		led[pixel].g = (uint8_t)((color>>8*2)	& 0x000000FF);
     bce:	a0 82       	st	Z, r10
		led[pixel].b = (uint8_t)((color>>8*1)	& 0x000000FF);
     bd0:	92 82       	std	Z+2, r9	; 0x02
		led[pixel].w = (uint8_t)( color			& 0x000000FF);
     bd2:	83 82       	std	Z+3, r8	; 0x03
		tail = 0;
	}
	
	setRGBW_pixel(head, color);
	
	head++;
     bd4:	4d 81       	ldd	r20, Y+5	; 0x05
     bd6:	5e 81       	ldd	r21, Y+6	; 0x06
     bd8:	4f 5f       	subi	r20, 0xFF	; 255
     bda:	5f 4f       	sbci	r21, 0xFF	; 255
     bdc:	5a 83       	std	Y+2, r21	; 0x02
     bde:	49 83       	std	Y+1, r20	; 0x01
	if(head >= LEDpixelcount){//loop for head
     be0:	44 3b       	cpi	r20, 0xB4	; 180
     be2:	51 05       	cpc	r21, r1
     be4:	c4 f1       	brlt	.+112    	; 0xc56 <effect_snake_nb+0x1fa>
		head = 0;
     be6:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <head.2061+0x1>
     bea:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <head.2061>

	*color = colorb;//update the color with the new brightness value calculated
}

void RGBW_send(){
		ws2812_setleds_rgbw(led, LEDpixelcount);//send the frame with size of pixelcount to update the strip
     bee:	64 eb       	ldi	r22, 0xB4	; 180
     bf0:	70 e0       	ldi	r23, 0x00	; 0
     bf2:	86 e2       	ldi	r24, 0x26	; 38
     bf4:	91 e0       	ldi	r25, 0x01	; 1
		head = 0;
	}


	RGBW_send();
}
     bf6:	26 96       	adiw	r28, 0x06	; 6
     bf8:	0f b6       	in	r0, 0x3f	; 63
     bfa:	f8 94       	cli
     bfc:	de bf       	out	0x3e, r29	; 62
     bfe:	0f be       	out	0x3f, r0	; 63
     c00:	cd bf       	out	0x3d, r28	; 61
     c02:	df 91       	pop	r29
     c04:	cf 91       	pop	r28
     c06:	ff 90       	pop	r15
     c08:	ef 90       	pop	r14
     c0a:	df 90       	pop	r13
     c0c:	cf 90       	pop	r12
     c0e:	bf 90       	pop	r11
     c10:	af 90       	pop	r10
     c12:	9f 90       	pop	r9
     c14:	8f 90       	pop	r8
     c16:	7f 90       	pop	r7
     c18:	6f 90       	pop	r6
     c1a:	5f 90       	pop	r5
     c1c:	4f 90       	pop	r4

	*color = colorb;//update the color with the new brightness value calculated
}

void RGBW_send(){
		ws2812_setleds_rgbw(led, LEDpixelcount);//send the frame with size of pixelcount to update the strip
     c1e:	0c 94 c6 0d 	jmp	0x1b8c	; 0x1b8c <ws2812_setleds_rgbw>
	if(tail >= 0){
	setRGBW_pixel(tail, 0);
	}
	tail++;
	if(tail >= LEDpixelcount){//loop for tail
		tail = 0;
     c22:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <tail.2062+0x1>
     c26:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <tail.2062>
     c2a:	5f cf       	rjmp	.-322    	; 0xaea <effect_snake_nb+0x8e>
	if (state == 0)
	{
		tail = -length;
		prevlen = length;
		state++;
	}else if(prevlen != length && head == prevlen){//make the snake longer when the snake is as long as the previous length and at start position
     c2c:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <prevlen.2064>
     c30:	30 91 11 01 	lds	r19, 0x0111	; 0x800111 <prevlen.2064+0x1>
     c34:	82 17       	cp	r24, r18
     c36:	93 07       	cpc	r25, r19
     c38:	99 f0       	breq	.+38     	; 0xc60 <effect_snake_nb+0x204>
     c3a:	a0 91 0e 01 	lds	r26, 0x010E	; 0x80010e <head.2061>
     c3e:	b0 91 0f 01 	lds	r27, 0x010F	; 0x80010f <head.2061+0x1>
     c42:	be 83       	std	Y+6, r27	; 0x06
     c44:	ad 83       	std	Y+5, r26	; 0x05
     c46:	2a 17       	cp	r18, r26
     c48:	3b 07       	cpc	r19, r27
     c4a:	a9 f0       	breq	.+42     	; 0xc76 <effect_snake_nb+0x21a>
     c4c:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <tail.2062>
     c50:	30 91 13 01 	lds	r19, 0x0113	; 0x800113 <tail.2062+0x1>
     c54:	2f cf       	rjmp	.-418    	; 0xab4 <effect_snake_nb+0x58>
		tail = 0;
	}
	
	setRGBW_pixel(head, color);
	
	head++;
     c56:	50 93 0f 01 	sts	0x010F, r21	; 0x80010f <head.2061+0x1>
     c5a:	40 93 0e 01 	sts	0x010E, r20	; 0x80010e <head.2061>
     c5e:	c7 cf       	rjmp	.-114    	; 0xbee <effect_snake_nb+0x192>
     c60:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <head.2061>
     c64:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <head.2061+0x1>
     c68:	9e 83       	std	Y+6, r25	; 0x06
     c6a:	8d 83       	std	Y+5, r24	; 0x05
     c6c:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <tail.2062>
     c70:	30 91 13 01 	lds	r19, 0x0113	; 0x800113 <tail.2062+0x1>
     c74:	1f cf       	rjmp	.-450    	; 0xab4 <effect_snake_nb+0x58>
     c76:	9d 01       	movw	r18, r26
	{
		tail = -length;
		prevlen = length;
		state++;
	}else if(prevlen != length && head == prevlen){//make the snake longer when the snake is as long as the previous length and at start position
		tail = head - length;
     c78:	28 1b       	sub	r18, r24
     c7a:	39 0b       	sbc	r19, r25
		prevlen = length;
     c7c:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <prevlen.2064+0x1>
     c80:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <prevlen.2064>
     c84:	17 cf       	rjmp	.-466    	; 0xab4 <effect_snake_nb+0x58>

00000c86 <effect_snakeGrowHue_nb>:
	uint32_t color_32 = 0;
	color_32 |= ((uint32_t)r<<8*3)|((uint32_t)g<<8*2)|((uint32_t)b<<8)|(w); //pack the rgbw value in a 32 bit value 
	return color_32;
}

void effect_snakeGrowHue_nb(int growSpd, int hueSpd){
     c86:	fc 01       	movw	r30, r24
	static uint16_t hue = 0;
	effect_snakeGrow_nb(growSpd, ColorHSV(hue+=hueSpd, 255, 255, 0));
     c88:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <hue.2033>
     c8c:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <hue.2033+0x1>
     c90:	9b 01       	movw	r18, r22
     c92:	28 0f       	add	r18, r24
     c94:	39 1f       	adc	r19, r25
     c96:	30 93 1a 01 	sts	0x011A, r19	; 0x80011a <hue.2033+0x1>
     c9a:	20 93 19 01 	sts	0x0119, r18	; 0x800119 <hue.2033>
	// midpoint, not start, of pure cyan). The 8-bit RGB hexcone (256 values
	// each for red, green, blue) really only allows for 1530 distinct hues
	// (not 1536, more on that below), but the full unsigned 16-bit type was
	// chosen for hue so that one's code can easily handle a contiguous color
	// wheel by allowing hue to roll over in either direction.
	hue = (hue * 1530L + 32768) / 65536;
     c9e:	aa ef       	ldi	r26, 0xFA	; 250
     ca0:	b5 e0       	ldi	r27, 0x05	; 5
     ca2:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <__umulhisi3>
     ca6:	dc 01       	movw	r26, r24
     ca8:	cb 01       	movw	r24, r22
     caa:	90 58       	subi	r25, 0x80	; 128
     cac:	af 4f       	sbci	r26, 0xFF	; 255
     cae:	bf 4f       	sbci	r27, 0xFF	; 255
     cb0:	cd 01       	movw	r24, r26
     cb2:	bb 27       	eor	r27, r27
     cb4:	97 fd       	sbrc	r25, 7
     cb6:	b0 95       	com	r27
     cb8:	ab 2f       	mov	r26, r27
	// Pure green to not-quite-pure-cyan is:     0, 255, 0 to   0, 255, 254
	// and so forth. Hence, 1530 distinct hues (0 to 1529), and hence why
	// the constants below are not the multiples of 256 you might expect.

	// Convert hue to R,G,B (nested ifs faster than divide+mod+switch):
	if(hue < 510) {         // Red to Green-1
     cba:	8e 3f       	cpi	r24, 0xFE	; 254
     cbc:	41 e0       	ldi	r20, 0x01	; 1
     cbe:	94 07       	cpc	r25, r20
     cc0:	48 f5       	brcc	.+82     	; 0xd14 <effect_snakeGrowHue_nb+0x8e>
		b = 0;
		if(hue < 255) {       //   Red to Yellow-1
     cc2:	8f 3f       	cpi	r24, 0xFF	; 255
     cc4:	91 05       	cpc	r25, r1
     cc6:	08 f4       	brcc	.+2      	; 0xcca <effect_snakeGrowHue_nb+0x44>
     cc8:	5a c0       	rjmp	.+180    	; 0xd7e <effect_snakeGrowHue_nb+0xf8>
     cca:	2e ef       	ldi	r18, 0xFE	; 254
     ccc:	42 2f       	mov	r20, r18
     cce:	48 1b       	sub	r20, r24
     cd0:	50 e0       	ldi	r21, 0x00	; 0
     cd2:	60 e0       	ldi	r22, 0x00	; 0
     cd4:	70 e0       	ldi	r23, 0x00	; 0
     cd6:	74 2f       	mov	r23, r20
     cd8:	66 27       	eor	r22, r22
     cda:	55 27       	eor	r21, r21
     cdc:	44 27       	eor	r20, r20
     cde:	6f 6f       	ori	r22, 0xFF	; 255

void effect_snakeGrow_nb(int growSpd, uint32_t color){
	static int len = 1;
	static int f = 0;

	if (len < LEDpixelcount){
     ce0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     ce4:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     ce8:	84 3b       	cpi	r24, 0xB4	; 180
     cea:	91 05       	cpc	r25, r1
     cec:	64 f5       	brge	.+88     	; 0xd46 <effect_snakeGrowHue_nb+0xc0>
		if (f < LEDpixelcount){
     cee:	20 91 15 01 	lds	r18, 0x0115	; 0x800115 <f.2044>
     cf2:	30 91 16 01 	lds	r19, 0x0116	; 0x800116 <f.2044+0x1>
     cf6:	24 3b       	cpi	r18, 0xB4	; 180
     cf8:	31 05       	cpc	r19, r1
     cfa:	0c f4       	brge	.+2      	; 0xcfe <effect_snakeGrowHue_nb+0x78>
     cfc:	69 c0       	rjmp	.+210    	; 0xdd0 <effect_snakeGrowHue_nb+0x14a>
			effect_snake_nb(len, color);
			f++;
		}
		else{
			len+=growSpd;
     cfe:	8e 0f       	add	r24, r30
     d00:	9f 1f       	adc	r25, r31
     d02:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     d06:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			f = 0;
     d0a:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <f.2044+0x1>
     d0e:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <f.2044>
     d12:	08 95       	ret
			g = hue;            //     g = 0 to 254
			} else {              //   Yellow to Green-1
			r = 510 - hue;      //     r = 255 to 1
			g = 255;
		}
		} else if(hue < 1020) { // Green to Blue-1
     d14:	8c 3f       	cpi	r24, 0xFC	; 252
     d16:	43 e0       	ldi	r20, 0x03	; 3
     d18:	94 07       	cpc	r25, r20
     d1a:	e0 f4       	brcc	.+56     	; 0xd54 <effect_snakeGrowHue_nb+0xce>
		r = 0;
		if(hue <  765) {      //   Green to Cyan-1
     d1c:	8d 3f       	cpi	r24, 0xFD	; 253
     d1e:	42 e0       	ldi	r20, 0x02	; 2
     d20:	94 07       	cpc	r25, r20
     d22:	f0 f5       	brcc	.+124    	; 0xda0 <effect_snakeGrowHue_nb+0x11a>
     d24:	42 e0       	ldi	r20, 0x02	; 2
     d26:	48 0f       	add	r20, r24
     d28:	50 e0       	ldi	r21, 0x00	; 0
     d2a:	60 e0       	ldi	r22, 0x00	; 0
     d2c:	70 e0       	ldi	r23, 0x00	; 0
     d2e:	5f 6f       	ori	r21, 0xFF	; 255
     d30:	76 2f       	mov	r23, r22
     d32:	65 2f       	mov	r22, r21
     d34:	54 2f       	mov	r21, r20
     d36:	44 27       	eor	r20, r20

void effect_snakeGrow_nb(int growSpd, uint32_t color){
	static int len = 1;
	static int f = 0;

	if (len < LEDpixelcount){
     d38:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     d3c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     d40:	84 3b       	cpi	r24, 0xB4	; 180
     d42:	91 05       	cpc	r25, r1
     d44:	a4 f2       	brlt	.-88     	; 0xcee <effect_snakeGrowHue_nb+0x68>
			len+=growSpd;
			f = 0;
		}
		
		}else{
		len = 1;
     d46:	81 e0       	ldi	r24, 0x01	; 1
     d48:	90 e0       	ldi	r25, 0x00	; 0
     d4a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     d4e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     d52:	08 95       	ret
			b = hue - 510;      //     b = 0 to 254
			} else {              //   Cyan to Blue-1
			g = 1020 - hue;     //     g = 255 to 1
			b = 255;
		}
		} else if(hue < 1530) { // Blue to Red-1
     d54:	8a 3f       	cpi	r24, 0xFA	; 250
     d56:	45 e0       	ldi	r20, 0x05	; 5
     d58:	94 07       	cpc	r25, r20
     d5a:	a9 f1       	breq	.+106    	; 0xdc6 <effect_snakeGrowHue_nb+0x140>
		g = 0;
		if(hue < 1275) {      //   Blue to Magenta-1
     d5c:	8b 3f       	cpi	r24, 0xFB	; 251
     d5e:	44 e0       	ldi	r20, 0x04	; 4
     d60:	94 07       	cpc	r25, r20
     d62:	08 f4       	brcc	.+2      	; 0xd66 <effect_snakeGrowHue_nb+0xe0>
     d64:	41 c0       	rjmp	.+130    	; 0xde8 <effect_snakeGrowHue_nb+0x162>
     d66:	2a ef       	ldi	r18, 0xFA	; 250
     d68:	42 2f       	mov	r20, r18
     d6a:	48 1b       	sub	r20, r24
     d6c:	50 e0       	ldi	r21, 0x00	; 0
     d6e:	60 e0       	ldi	r22, 0x00	; 0
     d70:	70 e0       	ldi	r23, 0x00	; 0
     d72:	6f 6f       	ori	r22, 0xFF	; 255
     d74:	76 2f       	mov	r23, r22
     d76:	65 2f       	mov	r22, r21
     d78:	54 2f       	mov	r21, r20
     d7a:	44 27       	eor	r20, r20
     d7c:	b1 cf       	rjmp	.-158    	; 0xce0 <effect_snakeGrowHue_nb+0x5a>
     d7e:	48 2f       	mov	r20, r24
     d80:	50 e0       	ldi	r21, 0x00	; 0
     d82:	60 e0       	ldi	r22, 0x00	; 0
     d84:	70 e0       	ldi	r23, 0x00	; 0
     d86:	76 2f       	mov	r23, r22
     d88:	65 2f       	mov	r22, r21
     d8a:	54 2f       	mov	r21, r20
     d8c:	44 27       	eor	r20, r20
     d8e:	44 27       	eor	r20, r20
     d90:	66 27       	eor	r22, r22
     d92:	77 27       	eor	r23, r23
     d94:	6f 6f       	ori	r22, 0xFF	; 255
     d96:	76 2f       	mov	r23, r22
     d98:	65 2f       	mov	r22, r21
     d9a:	54 2f       	mov	r21, r20
     d9c:	44 27       	eor	r20, r20
     d9e:	a0 cf       	rjmp	.-192    	; 0xce0 <effect_snakeGrowHue_nb+0x5a>
     da0:	2c ef       	ldi	r18, 0xFC	; 252
     da2:	42 2f       	mov	r20, r18
     da4:	48 1b       	sub	r20, r24
     da6:	50 e0       	ldi	r21, 0x00	; 0
     da8:	60 e0       	ldi	r22, 0x00	; 0
     daa:	70 e0       	ldi	r23, 0x00	; 0
     dac:	76 2f       	mov	r23, r22
     dae:	65 2f       	mov	r22, r21
     db0:	54 2f       	mov	r21, r20
     db2:	44 27       	eor	r20, r20
     db4:	44 27       	eor	r20, r20
     db6:	66 27       	eor	r22, r22
     db8:	77 27       	eor	r23, r23
     dba:	4f 6f       	ori	r20, 0xFF	; 255
     dbc:	76 2f       	mov	r23, r22
     dbe:	65 2f       	mov	r22, r21
     dc0:	54 2f       	mov	r21, r20
     dc2:	44 27       	eor	r20, r20
     dc4:	8d cf       	rjmp	.-230    	; 0xce0 <effect_snakeGrowHue_nb+0x5a>
			b = hue - 510;      //     b = 0 to 254
			} else {              //   Cyan to Blue-1
			g = 1020 - hue;     //     g = 255 to 1
			b = 255;
		}
		} else if(hue < 1530) { // Blue to Red-1
     dc6:	40 e0       	ldi	r20, 0x00	; 0
     dc8:	50 e0       	ldi	r21, 0x00	; 0
     dca:	60 e0       	ldi	r22, 0x00	; 0
     dcc:	7f ef       	ldi	r23, 0xFF	; 255
     dce:	88 cf       	rjmp	.-240    	; 0xce0 <effect_snakeGrowHue_nb+0x5a>
	static int len = 1;
	static int f = 0;

	if (len < LEDpixelcount){
		if (f < LEDpixelcount){
			effect_snake_nb(len, color);
     dd0:	0e 94 2e 05 	call	0xa5c	; 0xa5c <effect_snake_nb>
			f++;
     dd4:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <f.2044>
     dd8:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <f.2044+0x1>
     ddc:	01 96       	adiw	r24, 0x01	; 1
     dde:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <f.2044+0x1>
     de2:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <f.2044>
     de6:	08 95       	ret
     de8:	44 e0       	ldi	r20, 0x04	; 4
     dea:	48 0f       	add	r20, r24
     dec:	50 e0       	ldi	r21, 0x00	; 0
     dee:	60 e0       	ldi	r22, 0x00	; 0
     df0:	70 e0       	ldi	r23, 0x00	; 0
     df2:	74 2f       	mov	r23, r20
     df4:	66 27       	eor	r22, r22
     df6:	55 27       	eor	r21, r21
     df8:	44 27       	eor	r20, r20
     dfa:	5f 6f       	ori	r21, 0xFF	; 255
     dfc:	71 cf       	rjmp	.-286    	; 0xce0 <effect_snakeGrowHue_nb+0x5a>

00000dfe <effect_snakeGrowHue_b>:
void effect_snakeGrowHue_nb(int growSpd, int hueSpd){
	static uint16_t hue = 0;
	effect_snakeGrow_nb(growSpd, ColorHSV(hue+=hueSpd, 255, 255, 0));
}

void effect_snakeGrowHue_b(int growSpd, int hueSpd){
     dfe:	fc 01       	movw	r30, r24
	static uint16_t hue = 0;
	effect_snakeGrow_nb(growSpd, ColorHSV(hue+=hueSpd, 255, 255, 0));
     e00:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <hue.2038>
     e04:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <hue.2038+0x1>
     e08:	9b 01       	movw	r18, r22
     e0a:	28 0f       	add	r18, r24
     e0c:	39 1f       	adc	r19, r25
     e0e:	30 93 18 01 	sts	0x0118, r19	; 0x800118 <hue.2038+0x1>
     e12:	20 93 17 01 	sts	0x0117, r18	; 0x800117 <hue.2038>
	// midpoint, not start, of pure cyan). The 8-bit RGB hexcone (256 values
	// each for red, green, blue) really only allows for 1530 distinct hues
	// (not 1536, more on that below), but the full unsigned 16-bit type was
	// chosen for hue so that one's code can easily handle a contiguous color
	// wheel by allowing hue to roll over in either direction.
	hue = (hue * 1530L + 32768) / 65536;
     e16:	aa ef       	ldi	r26, 0xFA	; 250
     e18:	b5 e0       	ldi	r27, 0x05	; 5
     e1a:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <__umulhisi3>
     e1e:	dc 01       	movw	r26, r24
     e20:	cb 01       	movw	r24, r22
     e22:	90 58       	subi	r25, 0x80	; 128
     e24:	af 4f       	sbci	r26, 0xFF	; 255
     e26:	bf 4f       	sbci	r27, 0xFF	; 255
     e28:	cd 01       	movw	r24, r26
     e2a:	bb 27       	eor	r27, r27
     e2c:	97 fd       	sbrc	r25, 7
     e2e:	b0 95       	com	r27
     e30:	ab 2f       	mov	r26, r27
	// Pure green to not-quite-pure-cyan is:     0, 255, 0 to   0, 255, 254
	// and so forth. Hence, 1530 distinct hues (0 to 1529), and hence why
	// the constants below are not the multiples of 256 you might expect.

	// Convert hue to R,G,B (nested ifs faster than divide+mod+switch):
	if(hue < 510) {         // Red to Green-1
     e32:	8e 3f       	cpi	r24, 0xFE	; 254
     e34:	41 e0       	ldi	r20, 0x01	; 1
     e36:	94 07       	cpc	r25, r20
     e38:	48 f5       	brcc	.+82     	; 0xe8c <effect_snakeGrowHue_b+0x8e>
		b = 0;
		if(hue < 255) {       //   Red to Yellow-1
     e3a:	8f 3f       	cpi	r24, 0xFF	; 255
     e3c:	91 05       	cpc	r25, r1
     e3e:	08 f4       	brcc	.+2      	; 0xe42 <effect_snakeGrowHue_b+0x44>
     e40:	5a c0       	rjmp	.+180    	; 0xef6 <effect_snakeGrowHue_b+0xf8>
     e42:	2e ef       	ldi	r18, 0xFE	; 254
     e44:	42 2f       	mov	r20, r18
     e46:	48 1b       	sub	r20, r24
     e48:	50 e0       	ldi	r21, 0x00	; 0
     e4a:	60 e0       	ldi	r22, 0x00	; 0
     e4c:	70 e0       	ldi	r23, 0x00	; 0
     e4e:	74 2f       	mov	r23, r20
     e50:	66 27       	eor	r22, r22
     e52:	55 27       	eor	r21, r21
     e54:	44 27       	eor	r20, r20
     e56:	6f 6f       	ori	r22, 0xFF	; 255

void effect_snakeGrow_nb(int growSpd, uint32_t color){
	static int len = 1;
	static int f = 0;

	if (len < LEDpixelcount){
     e58:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     e5c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     e60:	84 3b       	cpi	r24, 0xB4	; 180
     e62:	91 05       	cpc	r25, r1
     e64:	64 f5       	brge	.+88     	; 0xebe <effect_snakeGrowHue_b+0xc0>
		if (f < LEDpixelcount){
     e66:	20 91 15 01 	lds	r18, 0x0115	; 0x800115 <f.2044>
     e6a:	30 91 16 01 	lds	r19, 0x0116	; 0x800116 <f.2044+0x1>
     e6e:	24 3b       	cpi	r18, 0xB4	; 180
     e70:	31 05       	cpc	r19, r1
     e72:	0c f4       	brge	.+2      	; 0xe76 <effect_snakeGrowHue_b+0x78>
     e74:	69 c0       	rjmp	.+210    	; 0xf48 <effect_snakeGrowHue_b+0x14a>
			effect_snake_nb(len, color);
			f++;
		}
		else{
			len+=growSpd;
     e76:	8e 0f       	add	r24, r30
     e78:	9f 1f       	adc	r25, r31
     e7a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     e7e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			f = 0;
     e82:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <f.2044+0x1>
     e86:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <f.2044>
     e8a:	08 95       	ret
			g = hue;            //     g = 0 to 254
			} else {              //   Yellow to Green-1
			r = 510 - hue;      //     r = 255 to 1
			g = 255;
		}
		} else if(hue < 1020) { // Green to Blue-1
     e8c:	8c 3f       	cpi	r24, 0xFC	; 252
     e8e:	43 e0       	ldi	r20, 0x03	; 3
     e90:	94 07       	cpc	r25, r20
     e92:	e0 f4       	brcc	.+56     	; 0xecc <effect_snakeGrowHue_b+0xce>
		r = 0;
		if(hue <  765) {      //   Green to Cyan-1
     e94:	8d 3f       	cpi	r24, 0xFD	; 253
     e96:	42 e0       	ldi	r20, 0x02	; 2
     e98:	94 07       	cpc	r25, r20
     e9a:	f0 f5       	brcc	.+124    	; 0xf18 <effect_snakeGrowHue_b+0x11a>
     e9c:	42 e0       	ldi	r20, 0x02	; 2
     e9e:	48 0f       	add	r20, r24
     ea0:	50 e0       	ldi	r21, 0x00	; 0
     ea2:	60 e0       	ldi	r22, 0x00	; 0
     ea4:	70 e0       	ldi	r23, 0x00	; 0
     ea6:	5f 6f       	ori	r21, 0xFF	; 255
     ea8:	76 2f       	mov	r23, r22
     eaa:	65 2f       	mov	r22, r21
     eac:	54 2f       	mov	r21, r20
     eae:	44 27       	eor	r20, r20

void effect_snakeGrow_nb(int growSpd, uint32_t color){
	static int len = 1;
	static int f = 0;

	if (len < LEDpixelcount){
     eb0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     eb4:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     eb8:	84 3b       	cpi	r24, 0xB4	; 180
     eba:	91 05       	cpc	r25, r1
     ebc:	a4 f2       	brlt	.-88     	; 0xe66 <effect_snakeGrowHue_b+0x68>
			len+=growSpd;
			f = 0;
		}
		
		}else{
		len = 1;
     ebe:	81 e0       	ldi	r24, 0x01	; 1
     ec0:	90 e0       	ldi	r25, 0x00	; 0
     ec2:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     ec6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     eca:	08 95       	ret
			b = hue - 510;      //     b = 0 to 254
			} else {              //   Cyan to Blue-1
			g = 1020 - hue;     //     g = 255 to 1
			b = 255;
		}
		} else if(hue < 1530) { // Blue to Red-1
     ecc:	8a 3f       	cpi	r24, 0xFA	; 250
     ece:	45 e0       	ldi	r20, 0x05	; 5
     ed0:	94 07       	cpc	r25, r20
     ed2:	a9 f1       	breq	.+106    	; 0xf3e <effect_snakeGrowHue_b+0x140>
		g = 0;
		if(hue < 1275) {      //   Blue to Magenta-1
     ed4:	8b 3f       	cpi	r24, 0xFB	; 251
     ed6:	44 e0       	ldi	r20, 0x04	; 4
     ed8:	94 07       	cpc	r25, r20
     eda:	08 f4       	brcc	.+2      	; 0xede <effect_snakeGrowHue_b+0xe0>
     edc:	41 c0       	rjmp	.+130    	; 0xf60 <effect_snakeGrowHue_b+0x162>
     ede:	2a ef       	ldi	r18, 0xFA	; 250
     ee0:	42 2f       	mov	r20, r18
     ee2:	48 1b       	sub	r20, r24
     ee4:	50 e0       	ldi	r21, 0x00	; 0
     ee6:	60 e0       	ldi	r22, 0x00	; 0
     ee8:	70 e0       	ldi	r23, 0x00	; 0
     eea:	6f 6f       	ori	r22, 0xFF	; 255
     eec:	76 2f       	mov	r23, r22
     eee:	65 2f       	mov	r22, r21
     ef0:	54 2f       	mov	r21, r20
     ef2:	44 27       	eor	r20, r20
     ef4:	b1 cf       	rjmp	.-158    	; 0xe58 <effect_snakeGrowHue_b+0x5a>
     ef6:	48 2f       	mov	r20, r24
     ef8:	50 e0       	ldi	r21, 0x00	; 0
     efa:	60 e0       	ldi	r22, 0x00	; 0
     efc:	70 e0       	ldi	r23, 0x00	; 0
     efe:	76 2f       	mov	r23, r22
     f00:	65 2f       	mov	r22, r21
     f02:	54 2f       	mov	r21, r20
     f04:	44 27       	eor	r20, r20
     f06:	44 27       	eor	r20, r20
     f08:	66 27       	eor	r22, r22
     f0a:	77 27       	eor	r23, r23
     f0c:	6f 6f       	ori	r22, 0xFF	; 255
     f0e:	76 2f       	mov	r23, r22
     f10:	65 2f       	mov	r22, r21
     f12:	54 2f       	mov	r21, r20
     f14:	44 27       	eor	r20, r20
     f16:	a0 cf       	rjmp	.-192    	; 0xe58 <effect_snakeGrowHue_b+0x5a>
     f18:	2c ef       	ldi	r18, 0xFC	; 252
     f1a:	42 2f       	mov	r20, r18
     f1c:	48 1b       	sub	r20, r24
     f1e:	50 e0       	ldi	r21, 0x00	; 0
     f20:	60 e0       	ldi	r22, 0x00	; 0
     f22:	70 e0       	ldi	r23, 0x00	; 0
     f24:	76 2f       	mov	r23, r22
     f26:	65 2f       	mov	r22, r21
     f28:	54 2f       	mov	r21, r20
     f2a:	44 27       	eor	r20, r20
     f2c:	44 27       	eor	r20, r20
     f2e:	66 27       	eor	r22, r22
     f30:	77 27       	eor	r23, r23
     f32:	4f 6f       	ori	r20, 0xFF	; 255
     f34:	76 2f       	mov	r23, r22
     f36:	65 2f       	mov	r22, r21
     f38:	54 2f       	mov	r21, r20
     f3a:	44 27       	eor	r20, r20
     f3c:	8d cf       	rjmp	.-230    	; 0xe58 <effect_snakeGrowHue_b+0x5a>
			b = hue - 510;      //     b = 0 to 254
			} else {              //   Cyan to Blue-1
			g = 1020 - hue;     //     g = 255 to 1
			b = 255;
		}
		} else if(hue < 1530) { // Blue to Red-1
     f3e:	40 e0       	ldi	r20, 0x00	; 0
     f40:	50 e0       	ldi	r21, 0x00	; 0
     f42:	60 e0       	ldi	r22, 0x00	; 0
     f44:	7f ef       	ldi	r23, 0xFF	; 255
     f46:	88 cf       	rjmp	.-240    	; 0xe58 <effect_snakeGrowHue_b+0x5a>
	static int len = 1;
	static int f = 0;

	if (len < LEDpixelcount){
		if (f < LEDpixelcount){
			effect_snake_nb(len, color);
     f48:	0e 94 2e 05 	call	0xa5c	; 0xa5c <effect_snake_nb>
			f++;
     f4c:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <f.2044>
     f50:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <f.2044+0x1>
     f54:	01 96       	adiw	r24, 0x01	; 1
     f56:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <f.2044+0x1>
     f5a:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <f.2044>
     f5e:	08 95       	ret
     f60:	44 e0       	ldi	r20, 0x04	; 4
     f62:	48 0f       	add	r20, r24
     f64:	50 e0       	ldi	r21, 0x00	; 0
     f66:	60 e0       	ldi	r22, 0x00	; 0
     f68:	70 e0       	ldi	r23, 0x00	; 0
     f6a:	74 2f       	mov	r23, r20
     f6c:	66 27       	eor	r22, r22
     f6e:	55 27       	eor	r21, r21
     f70:	44 27       	eor	r20, r20
     f72:	5f 6f       	ori	r21, 0xFF	; 255
     f74:	71 cf       	rjmp	.-286    	; 0xe58 <effect_snakeGrowHue_b+0x5a>

00000f76 <effect_snakeBounce_b>:


	RGBW_send();
}

void effect_snakeBounce_b(int length, uint32_t color){ // make a bouncing snake
     f76:	2f 92       	push	r2
     f78:	3f 92       	push	r3
     f7a:	4f 92       	push	r4
     f7c:	5f 92       	push	r5
     f7e:	6f 92       	push	r6
     f80:	7f 92       	push	r7
     f82:	8f 92       	push	r8
     f84:	9f 92       	push	r9
     f86:	af 92       	push	r10
     f88:	bf 92       	push	r11
     f8a:	cf 92       	push	r12
     f8c:	df 92       	push	r13
     f8e:	ef 92       	push	r14
     f90:	ff 92       	push	r15
     f92:	0f 93       	push	r16
     f94:	1f 93       	push	r17
     f96:	cf 93       	push	r28
     f98:	df 93       	push	r29
     f9a:	cd b7       	in	r28, 0x3d	; 61
     f9c:	de b7       	in	r29, 0x3e	; 62
     f9e:	68 97       	sbiw	r28, 0x18	; 24
     fa0:	0f b6       	in	r0, 0x3f	; 63
     fa2:	f8 94       	cli
     fa4:	de bf       	out	0x3e, r29	; 62
     fa6:	0f be       	out	0x3f, r0	; 63
     fa8:	cd bf       	out	0x3d, r28	; 61
     faa:	9a 83       	std	Y+2, r25	; 0x02
     fac:	89 83       	std	Y+1, r24	; 0x01
     fae:	4f 87       	std	Y+15, r20	; 0x0f
     fb0:	58 8b       	std	Y+16, r21	; 0x10
     fb2:	69 8b       	std	Y+17, r22	; 0x11
     fb4:	7a 8b       	std	Y+18, r23	; 0x12

void calcBrightness(uint32_t *color, uint8_t _brightness){
	uint32_t buf = 0;
	uint32_t colorb = 0;

	buf = (((*color>>8*3)	& 0x000000FF) * _brightness) / 255;
     fb6:	87 2f       	mov	r24, r23
     fb8:	99 27       	eor	r25, r25
     fba:	aa 27       	eor	r26, r26
     fbc:	bb 27       	eor	r27, r27
     fbe:	8b 83       	std	Y+3, r24	; 0x03
     fc0:	9c 83       	std	Y+4, r25	; 0x04
     fc2:	ad 83       	std	Y+5, r26	; 0x05
     fc4:	be 83       	std	Y+6, r27	; 0x06
	colorb |= (buf<<8*3);

	buf = (((*color>>8*2)	& 0x000000FF) * _brightness) / 255;
     fc6:	99 89       	ldd	r25, Y+17	; 0x11
     fc8:	89 2f       	mov	r24, r25
     fca:	90 e0       	ldi	r25, 0x00	; 0
     fcc:	a0 e0       	ldi	r26, 0x00	; 0
     fce:	b0 e0       	ldi	r27, 0x00	; 0
     fd0:	8f 83       	std	Y+7, r24	; 0x07
     fd2:	98 87       	std	Y+8, r25	; 0x08
     fd4:	a9 87       	std	Y+9, r26	; 0x09
     fd6:	ba 87       	std	Y+10, r27	; 0x0a
	colorb |= (buf<<8*2);

	buf = (((*color>>8*1)	& 0x000000FF) * _brightness) / 255;
     fd8:	98 89       	ldd	r25, Y+16	; 0x10
     fda:	89 2f       	mov	r24, r25
     fdc:	90 e0       	ldi	r25, 0x00	; 0
     fde:	a0 e0       	ldi	r26, 0x00	; 0
     fe0:	b0 e0       	ldi	r27, 0x00	; 0
     fe2:	8b 87       	std	Y+11, r24	; 0x0b
     fe4:	9c 87       	std	Y+12, r25	; 0x0c
     fe6:	ad 87       	std	Y+13, r26	; 0x0d
     fe8:	be 87       	std	Y+14, r27	; 0x0e
     fea:	a6 e2       	ldi	r26, 0x26	; 38
     fec:	b1 e0       	ldi	r27, 0x01	; 1
     fee:	b8 8f       	std	Y+24, r27	; 0x18
     ff0:	af 8b       	std	Y+23, r26	; 0x17
	RGBW_send();
}

void effect_snakeBounce_b(int length, uint32_t color){ // make a bouncing snake
		int tail = 0;
		for(int i = 0; i < LEDpixelcount; i++){
     ff2:	21 2c       	mov	r2, r1
     ff4:	31 2c       	mov	r3, r1

	buf = (((*color>>8*1)	& 0x000000FF) * _brightness) / 255;
	colorb |= (buf<<8*1);

	buf = (( *color			& 0x000000FF) * _brightness) / 255;
	colorb |= (buf);
     ff6:	81 2c       	mov	r8, r1
     ff8:	91 2c       	mov	r9, r1
     ffa:	54 01       	movw	r10, r8
     ffc:	8a 94       	dec	r8
     ffe:	db 01       	movw	r26, r22
    1000:	ca 01       	movw	r24, r20
    1002:	99 27       	eor	r25, r25
    1004:	aa 27       	eor	r26, r26
    1006:	bb 27       	eor	r27, r27
    1008:	8b 8b       	std	Y+19, r24	; 0x13
    100a:	9c 8b       	std	Y+20, r25	; 0x14
    100c:	ad 8b       	std	Y+21, r26	; 0x15
    100e:	be 8b       	std	Y+22, r27	; 0x16
    1010:	2b c0       	rjmp	.+86     	; 0x1068 <effect_snakeBounce_b+0xf2>
		led[pixel].r = (uint8_t)((color>>8*3)	& 0x000000FF);
		led[pixel].g = (uint8_t)((color>>8*2)	& 0x000000FF);
		led[pixel].b = (uint8_t)((color>>8*1)	& 0x000000FF);
		led[pixel].w = (uint8_t)( color			& 0x000000FF);
	}else{
		led[pixel].r = 0;
    1012:	ef 89       	ldd	r30, Y+23	; 0x17
    1014:	f8 8d       	ldd	r31, Y+24	; 0x18
    1016:	11 82       	std	Z+1, r1	; 0x01
		led[pixel].g = 0;
    1018:	10 82       	st	Z, r1
		led[pixel].b = 0;
    101a:	12 82       	std	Z+2, r1	; 0x02
		led[pixel].w = 0;
    101c:	13 82       	std	Z+3, r1	; 0x03
			setRGBW_pixel(i, color);
			tail = i - length;
			if (tail < 0){
				tail = 0;
			}
			setRGBW_pixel(tail, 0);
    101e:	c1 01       	movw	r24, r2
    1020:	29 81       	ldd	r18, Y+1	; 0x01
    1022:	3a 81       	ldd	r19, Y+2	; 0x02
    1024:	82 1b       	sub	r24, r18
    1026:	93 0b       	sbc	r25, r19
    1028:	97 fd       	sbrc	r25, 7
    102a:	8a c0       	rjmp	.+276    	; 0x1140 <effect_snakeBounce_b+0x1ca>
		led[pixel].r = (uint8_t)((color>>8*3)	& 0x000000FF);
		led[pixel].g = (uint8_t)((color>>8*2)	& 0x000000FF);
		led[pixel].b = (uint8_t)((color>>8*1)	& 0x000000FF);
		led[pixel].w = (uint8_t)( color			& 0x000000FF);
	}else{
		led[pixel].r = 0;
    102c:	88 0f       	add	r24, r24
    102e:	99 1f       	adc	r25, r25
    1030:	88 0f       	add	r24, r24
    1032:	99 1f       	adc	r25, r25
    1034:	fc 01       	movw	r30, r24
    1036:	ea 5d       	subi	r30, 0xDA	; 218
    1038:	fe 4f       	sbci	r31, 0xFE	; 254
    103a:	11 82       	std	Z+1, r1	; 0x01
		led[pixel].g = 0;
    103c:	10 82       	st	Z, r1
		led[pixel].b = 0;
    103e:	12 82       	std	Z+2, r1	; 0x02
		led[pixel].w = 0;
    1040:	13 82       	std	Z+3, r1	; 0x03

	*color = colorb;//update the color with the new brightness value calculated
}

void RGBW_send(){
		ws2812_setleds_rgbw(led, LEDpixelcount);//send the frame with size of pixelcount to update the strip
    1042:	64 eb       	ldi	r22, 0xB4	; 180
    1044:	70 e0       	ldi	r23, 0x00	; 0
    1046:	86 e2       	ldi	r24, 0x26	; 38
    1048:	91 e0       	ldi	r25, 0x01	; 1
    104a:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <ws2812_setleds_rgbw>
	RGBW_send();
}

void effect_snakeBounce_b(int length, uint32_t color){ // make a bouncing snake
		int tail = 0;
		for(int i = 0; i < LEDpixelcount; i++){
    104e:	3f ef       	ldi	r19, 0xFF	; 255
    1050:	23 1a       	sub	r2, r19
    1052:	33 0a       	sbc	r3, r19
    1054:	8f 89       	ldd	r24, Y+23	; 0x17
    1056:	98 8d       	ldd	r25, Y+24	; 0x18
    1058:	04 96       	adiw	r24, 0x04	; 4
    105a:	98 8f       	std	Y+24, r25	; 0x18
    105c:	8f 8b       	std	Y+23, r24	; 0x17
    105e:	94 eb       	ldi	r25, 0xB4	; 180
    1060:	29 16       	cp	r2, r25
    1062:	31 04       	cpc	r3, r1
    1064:	09 f4       	brne	.+2      	; 0x1068 <effect_snakeBounce_b+0xf2>
    1066:	6f c0       	rjmp	.+222    	; 0x1146 <effect_snakeBounce_b+0x1d0>
uint16_t exLow = -1;
uint16_t exHigh = -1;

void setRGBW_pixel(uint16_t pixel, uint32_t color){

	if (pixel < exLow || pixel >= exHigh)
    1068:	00 91 04 01 	lds	r16, 0x0104	; 0x800104 <exLow>
    106c:	10 91 05 01 	lds	r17, 0x0105	; 0x800105 <exLow+0x1>
    1070:	20 16       	cp	r2, r16
    1072:	31 06       	cpc	r3, r17
    1074:	38 f0       	brcs	.+14     	; 0x1084 <effect_snakeBounce_b+0x10e>
    1076:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <exHigh>
    107a:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <exHigh+0x1>
    107e:	28 16       	cp	r2, r24
    1080:	39 06       	cpc	r3, r25
    1082:	38 f2       	brcs	.-114    	; 0x1012 <effect_snakeBounce_b+0x9c>

void calcBrightness(uint32_t *color, uint8_t _brightness){
	uint32_t buf = 0;
	uint32_t colorb = 0;

	buf = (((*color>>8*3)	& 0x000000FF) * _brightness) / 255;
    1084:	c0 90 06 01 	lds	r12, 0x0106	; 0x800106 <brightness>
    1088:	d1 2c       	mov	r13, r1
    108a:	e1 2c       	mov	r14, r1
    108c:	f1 2c       	mov	r15, r1

	buf = (((*color>>8*1)	& 0x000000FF) * _brightness) / 255;
	colorb |= (buf<<8*1);

	buf = (( *color			& 0x000000FF) * _brightness) / 255;
	colorb |= (buf);
    108e:	2b 81       	ldd	r18, Y+3	; 0x03
    1090:	3c 81       	ldd	r19, Y+4	; 0x04
    1092:	4d 81       	ldd	r20, Y+5	; 0x05
    1094:	5e 81       	ldd	r21, Y+6	; 0x06
    1096:	c7 01       	movw	r24, r14
    1098:	b6 01       	movw	r22, r12
    109a:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <__mulsi3>
    109e:	a5 01       	movw	r20, r10
    10a0:	94 01       	movw	r18, r8
    10a2:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <__udivmodsi4>
    10a6:	72 2e       	mov	r7, r18
    10a8:	66 24       	eor	r6, r6
    10aa:	55 24       	eor	r5, r5
    10ac:	44 24       	eor	r4, r4
    10ae:	2b 89       	ldd	r18, Y+19	; 0x13
    10b0:	3c 89       	ldd	r19, Y+20	; 0x14
    10b2:	4d 89       	ldd	r20, Y+21	; 0x15
    10b4:	5e 89       	ldd	r21, Y+22	; 0x16
    10b6:	c7 01       	movw	r24, r14
    10b8:	b6 01       	movw	r22, r12
    10ba:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <__mulsi3>
    10be:	a5 01       	movw	r20, r10
    10c0:	94 01       	movw	r18, r8
    10c2:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <__udivmodsi4>
    10c6:	42 2a       	or	r4, r18
    10c8:	53 2a       	or	r5, r19
    10ca:	64 2a       	or	r6, r20
    10cc:	75 2a       	or	r7, r21
    10ce:	a7 01       	movw	r20, r14
    10d0:	96 01       	movw	r18, r12
    10d2:	6f 81       	ldd	r22, Y+7	; 0x07
    10d4:	78 85       	ldd	r23, Y+8	; 0x08
    10d6:	89 85       	ldd	r24, Y+9	; 0x09
    10d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    10da:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <__mulsi3>
    10de:	a5 01       	movw	r20, r10
    10e0:	94 01       	movw	r18, r8
    10e2:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <__udivmodsi4>
    10e6:	d9 01       	movw	r26, r18
    10e8:	99 27       	eor	r25, r25
    10ea:	88 27       	eor	r24, r24
    10ec:	48 2a       	or	r4, r24
    10ee:	59 2a       	or	r5, r25
    10f0:	6a 2a       	or	r6, r26
    10f2:	7b 2a       	or	r7, r27
    10f4:	a7 01       	movw	r20, r14
    10f6:	96 01       	movw	r18, r12
    10f8:	6b 85       	ldd	r22, Y+11	; 0x0b
    10fa:	7c 85       	ldd	r23, Y+12	; 0x0c
    10fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    10fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    1100:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <__mulsi3>
    1104:	a5 01       	movw	r20, r10
    1106:	94 01       	movw	r18, r8
    1108:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <__udivmodsi4>
    110c:	b4 2f       	mov	r27, r20
    110e:	a3 2f       	mov	r26, r19
    1110:	92 2f       	mov	r25, r18
    1112:	88 27       	eor	r24, r24
    1114:	48 2a       	or	r4, r24
    1116:	59 2a       	or	r5, r25
    1118:	6a 2a       	or	r6, r26
    111a:	7b 2a       	or	r7, r27
void setRGBW_pixel(uint16_t pixel, uint32_t color){

	if (pixel < exLow || pixel >= exHigh)
	{
		calcBrightness(&color, brightness);
		led[pixel].r = (uint8_t)((color>>8*3)	& 0x000000FF);
    111c:	af 89       	ldd	r26, Y+23	; 0x17
    111e:	b8 8d       	ldd	r27, Y+24	; 0x18
    1120:	11 96       	adiw	r26, 0x01	; 1
    1122:	7c 92       	st	X, r7
    1124:	11 97       	sbiw	r26, 0x01	; 1
		led[pixel].g = (uint8_t)((color>>8*2)	& 0x000000FF);
    1126:	6c 92       	st	X, r6
		led[pixel].b = (uint8_t)((color>>8*1)	& 0x000000FF);
    1128:	12 96       	adiw	r26, 0x02	; 2
    112a:	5c 92       	st	X, r5
    112c:	12 97       	sbiw	r26, 0x02	; 2
		led[pixel].w = (uint8_t)( color			& 0x000000FF);
    112e:	13 96       	adiw	r26, 0x03	; 3
    1130:	4c 92       	st	X, r4
			setRGBW_pixel(i, color);
			tail = i - length;
			if (tail < 0){
				tail = 0;
			}
			setRGBW_pixel(tail, 0);
    1132:	c1 01       	movw	r24, r2
    1134:	29 81       	ldd	r18, Y+1	; 0x01
    1136:	3a 81       	ldd	r19, Y+2	; 0x02
    1138:	82 1b       	sub	r24, r18
    113a:	93 0b       	sbc	r25, r19
    113c:	97 ff       	sbrs	r25, 7
    113e:	76 cf       	rjmp	.-276    	; 0x102c <effect_snakeBounce_b+0xb6>
    1140:	80 e0       	ldi	r24, 0x00	; 0
    1142:	90 e0       	ldi	r25, 0x00	; 0
    1144:	73 cf       	rjmp	.-282    	; 0x102c <effect_snakeBounce_b+0xb6>
    1146:	f2 ef       	ldi	r31, 0xF2	; 242
    1148:	2f 2e       	mov	r2, r31
    114a:	f3 e0       	ldi	r31, 0x03	; 3
    114c:	3f 2e       	mov	r3, r31
	RGBW_send();
}

void effect_snakeBounce_b(int length, uint32_t color){ // make a bouncing snake
		int tail = 0;
		for(int i = 0; i < LEDpixelcount; i++){
    114e:	a3 eb       	ldi	r26, 0xB3	; 179
    1150:	b0 e0       	ldi	r27, 0x00	; 0
    1152:	bc 8b       	std	Y+20, r27	; 0x14
    1154:	ab 8b       	std	Y+19, r26	; 0x13

	buf = (((*color>>8*1)	& 0x000000FF) * _brightness) / 255;
	colorb |= (buf<<8*1);

	buf = (( *color			& 0x000000FF) * _brightness) / 255;
	colorb |= (buf);
    1156:	81 2c       	mov	r8, r1
    1158:	91 2c       	mov	r9, r1
    115a:	54 01       	movw	r10, r8
    115c:	8a 94       	dec	r8
    115e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1160:	98 89       	ldd	r25, Y+16	; 0x10
    1162:	a9 89       	ldd	r26, Y+17	; 0x11
    1164:	ba 89       	ldd	r27, Y+18	; 0x12
    1166:	99 27       	eor	r25, r25
    1168:	aa 27       	eor	r26, r26
    116a:	bb 27       	eor	r27, r27
    116c:	8f 87       	std	Y+15, r24	; 0x0f
    116e:	98 8b       	std	Y+16, r25	; 0x10
    1170:	a9 8b       	std	Y+17, r26	; 0x11
    1172:	ba 8b       	std	Y+18, r27	; 0x12
    1174:	34 c0       	rjmp	.+104    	; 0x11de <effect_snakeBounce_b+0x268>
		led[pixel].r = (uint8_t)((color>>8*3)	& 0x000000FF);
		led[pixel].g = (uint8_t)((color>>8*2)	& 0x000000FF);
		led[pixel].b = (uint8_t)((color>>8*1)	& 0x000000FF);
		led[pixel].w = (uint8_t)( color			& 0x000000FF);
	}else{
		led[pixel].r = 0;
    1176:	d1 01       	movw	r26, r2
    1178:	11 96       	adiw	r26, 0x01	; 1
    117a:	1c 92       	st	X, r1
    117c:	11 97       	sbiw	r26, 0x01	; 1
		led[pixel].g = 0;
    117e:	1c 92       	st	X, r1
		led[pixel].b = 0;
    1180:	12 96       	adiw	r26, 0x02	; 2
    1182:	1c 92       	st	X, r1
    1184:	12 97       	sbiw	r26, 0x02	; 2
		led[pixel].w = 0;
    1186:	13 96       	adiw	r26, 0x03	; 3
    1188:	1c 92       	st	X, r1
			setRGBW_pixel(i, color);
			tail = i + length;
			if (tail > LEDpixelcount-1){
				tail = LEDpixelcount-1;
			}
			setRGBW_pixel(tail, 0);
    118a:	89 81       	ldd	r24, Y+1	; 0x01
    118c:	9a 81       	ldd	r25, Y+2	; 0x02
    118e:	eb 89       	ldd	r30, Y+19	; 0x13
    1190:	fc 89       	ldd	r31, Y+20	; 0x14
    1192:	8e 0f       	add	r24, r30
    1194:	9f 1f       	adc	r25, r31
    1196:	84 3b       	cpi	r24, 0xB4	; 180
    1198:	91 05       	cpc	r25, r1
    119a:	14 f0       	brlt	.+4      	; 0x11a0 <effect_snakeBounce_b+0x22a>
    119c:	83 eb       	ldi	r24, 0xB3	; 179
    119e:	90 e0       	ldi	r25, 0x00	; 0
		led[pixel].r = (uint8_t)((color>>8*3)	& 0x000000FF);
		led[pixel].g = (uint8_t)((color>>8*2)	& 0x000000FF);
		led[pixel].b = (uint8_t)((color>>8*1)	& 0x000000FF);
		led[pixel].w = (uint8_t)( color			& 0x000000FF);
	}else{
		led[pixel].r = 0;
    11a0:	88 0f       	add	r24, r24
    11a2:	99 1f       	adc	r25, r25
    11a4:	88 0f       	add	r24, r24
    11a6:	99 1f       	adc	r25, r25
    11a8:	fc 01       	movw	r30, r24
    11aa:	ea 5d       	subi	r30, 0xDA	; 218
    11ac:	fe 4f       	sbci	r31, 0xFE	; 254
    11ae:	11 82       	std	Z+1, r1	; 0x01
		led[pixel].g = 0;
    11b0:	10 82       	st	Z, r1
		led[pixel].b = 0;
    11b2:	12 82       	std	Z+2, r1	; 0x02
		led[pixel].w = 0;
    11b4:	13 82       	std	Z+3, r1	; 0x03

	*color = colorb;//update the color with the new brightness value calculated
}

void RGBW_send(){
		ws2812_setleds_rgbw(led, LEDpixelcount);//send the frame with size of pixelcount to update the strip
    11b6:	64 eb       	ldi	r22, 0xB4	; 180
    11b8:	70 e0       	ldi	r23, 0x00	; 0
    11ba:	86 e2       	ldi	r24, 0x26	; 38
    11bc:	91 e0       	ldi	r25, 0x01	; 1
    11be:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <ws2812_setleds_rgbw>
				tail = 0;
			}
			setRGBW_pixel(tail, 0);
			RGBW_send();
		}
		for(int i = LEDpixelcount-1; i >= 0; i--){
    11c2:	2b 89       	ldd	r18, Y+19	; 0x13
    11c4:	3c 89       	ldd	r19, Y+20	; 0x14
    11c6:	21 50       	subi	r18, 0x01	; 1
    11c8:	31 09       	sbc	r19, r1
    11ca:	3c 8b       	std	Y+20, r19	; 0x14
    11cc:	2b 8b       	std	Y+19, r18	; 0x13
    11ce:	34 e0       	ldi	r19, 0x04	; 4
    11d0:	23 1a       	sub	r2, r19
    11d2:	31 08       	sbc	r3, r1
    11d4:	8b 89       	ldd	r24, Y+19	; 0x13
    11d6:	9c 89       	ldd	r25, Y+20	; 0x14
    11d8:	01 96       	adiw	r24, 0x01	; 1
    11da:	09 f4       	brne	.+2      	; 0x11de <effect_snakeBounce_b+0x268>
    11dc:	63 c0       	rjmp	.+198    	; 0x12a4 <effect_snakeBounce_b+0x32e>
uint16_t exLow = -1;
uint16_t exHigh = -1;

void setRGBW_pixel(uint16_t pixel, uint32_t color){

	if (pixel < exLow || pixel >= exHigh)
    11de:	00 91 04 01 	lds	r16, 0x0104	; 0x800104 <exLow>
    11e2:	10 91 05 01 	lds	r17, 0x0105	; 0x800105 <exLow+0x1>
    11e6:	ab 89       	ldd	r26, Y+19	; 0x13
    11e8:	bc 89       	ldd	r27, Y+20	; 0x14
    11ea:	a0 17       	cp	r26, r16
    11ec:	b1 07       	cpc	r27, r17
    11ee:	40 f0       	brcs	.+16     	; 0x1200 <effect_snakeBounce_b+0x28a>
    11f0:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <exHigh>
    11f4:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <exHigh+0x1>
    11f8:	a8 17       	cp	r26, r24
    11fa:	b9 07       	cpc	r27, r25
    11fc:	08 f4       	brcc	.+2      	; 0x1200 <effect_snakeBounce_b+0x28a>
    11fe:	bb cf       	rjmp	.-138    	; 0x1176 <effect_snakeBounce_b+0x200>

void calcBrightness(uint32_t *color, uint8_t _brightness){
	uint32_t buf = 0;
	uint32_t colorb = 0;

	buf = (((*color>>8*3)	& 0x000000FF) * _brightness) / 255;
    1200:	c0 90 06 01 	lds	r12, 0x0106	; 0x800106 <brightness>
    1204:	d1 2c       	mov	r13, r1
    1206:	e1 2c       	mov	r14, r1
    1208:	f1 2c       	mov	r15, r1

	buf = (((*color>>8*1)	& 0x000000FF) * _brightness) / 255;
	colorb |= (buf<<8*1);

	buf = (( *color			& 0x000000FF) * _brightness) / 255;
	colorb |= (buf);
    120a:	2b 81       	ldd	r18, Y+3	; 0x03
    120c:	3c 81       	ldd	r19, Y+4	; 0x04
    120e:	4d 81       	ldd	r20, Y+5	; 0x05
    1210:	5e 81       	ldd	r21, Y+6	; 0x06
    1212:	c7 01       	movw	r24, r14
    1214:	b6 01       	movw	r22, r12
    1216:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <__mulsi3>
    121a:	a5 01       	movw	r20, r10
    121c:	94 01       	movw	r18, r8
    121e:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <__udivmodsi4>
    1222:	72 2e       	mov	r7, r18
    1224:	66 24       	eor	r6, r6
    1226:	55 24       	eor	r5, r5
    1228:	44 24       	eor	r4, r4
    122a:	2f 85       	ldd	r18, Y+15	; 0x0f
    122c:	38 89       	ldd	r19, Y+16	; 0x10
    122e:	49 89       	ldd	r20, Y+17	; 0x11
    1230:	5a 89       	ldd	r21, Y+18	; 0x12
    1232:	c7 01       	movw	r24, r14
    1234:	b6 01       	movw	r22, r12
    1236:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <__mulsi3>
    123a:	a5 01       	movw	r20, r10
    123c:	94 01       	movw	r18, r8
    123e:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <__udivmodsi4>
    1242:	42 2a       	or	r4, r18
    1244:	53 2a       	or	r5, r19
    1246:	64 2a       	or	r6, r20
    1248:	75 2a       	or	r7, r21
    124a:	2f 81       	ldd	r18, Y+7	; 0x07
    124c:	38 85       	ldd	r19, Y+8	; 0x08
    124e:	49 85       	ldd	r20, Y+9	; 0x09
    1250:	5a 85       	ldd	r21, Y+10	; 0x0a
    1252:	c7 01       	movw	r24, r14
    1254:	b6 01       	movw	r22, r12
    1256:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <__mulsi3>
    125a:	a5 01       	movw	r20, r10
    125c:	94 01       	movw	r18, r8
    125e:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <__udivmodsi4>
    1262:	d9 01       	movw	r26, r18
    1264:	99 27       	eor	r25, r25
    1266:	88 27       	eor	r24, r24
    1268:	48 2a       	or	r4, r24
    126a:	59 2a       	or	r5, r25
    126c:	6a 2a       	or	r6, r26
    126e:	7b 2a       	or	r7, r27
    1270:	2b 85       	ldd	r18, Y+11	; 0x0b
    1272:	3c 85       	ldd	r19, Y+12	; 0x0c
    1274:	4d 85       	ldd	r20, Y+13	; 0x0d
    1276:	5e 85       	ldd	r21, Y+14	; 0x0e
    1278:	c7 01       	movw	r24, r14
    127a:	b6 01       	movw	r22, r12
    127c:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <__mulsi3>
    1280:	a5 01       	movw	r20, r10
    1282:	94 01       	movw	r18, r8
    1284:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <__udivmodsi4>
    1288:	b4 2f       	mov	r27, r20
    128a:	a3 2f       	mov	r26, r19
    128c:	92 2f       	mov	r25, r18
    128e:	88 27       	eor	r24, r24
    1290:	48 2a       	or	r4, r24
    1292:	59 2a       	or	r5, r25
    1294:	6a 2a       	or	r6, r26
    1296:	7b 2a       	or	r7, r27
void setRGBW_pixel(uint16_t pixel, uint32_t color){

	if (pixel < exLow || pixel >= exHigh)
	{
		calcBrightness(&color, brightness);
		led[pixel].r = (uint8_t)((color>>8*3)	& 0x000000FF);
    1298:	f1 01       	movw	r30, r2
    129a:	71 82       	std	Z+1, r7	; 0x01
		led[pixel].g = (uint8_t)((color>>8*2)	& 0x000000FF);
    129c:	60 82       	st	Z, r6
		led[pixel].b = (uint8_t)((color>>8*1)	& 0x000000FF);
    129e:	52 82       	std	Z+2, r5	; 0x02
		led[pixel].w = (uint8_t)( color			& 0x000000FF);
    12a0:	43 82       	std	Z+3, r4	; 0x03
    12a2:	73 cf       	rjmp	.-282    	; 0x118a <effect_snakeBounce_b+0x214>
				tail = LEDpixelcount-1;
			}
			setRGBW_pixel(tail, 0);
			RGBW_send();
		}
}
    12a4:	68 96       	adiw	r28, 0x18	; 24
    12a6:	0f b6       	in	r0, 0x3f	; 63
    12a8:	f8 94       	cli
    12aa:	de bf       	out	0x3e, r29	; 62
    12ac:	0f be       	out	0x3f, r0	; 63
    12ae:	cd bf       	out	0x3d, r28	; 61
    12b0:	df 91       	pop	r29
    12b2:	cf 91       	pop	r28
    12b4:	1f 91       	pop	r17
    12b6:	0f 91       	pop	r16
    12b8:	ff 90       	pop	r15
    12ba:	ef 90       	pop	r14
    12bc:	df 90       	pop	r13
    12be:	cf 90       	pop	r12
    12c0:	bf 90       	pop	r11
    12c2:	af 90       	pop	r10
    12c4:	9f 90       	pop	r9
    12c6:	8f 90       	pop	r8
    12c8:	7f 90       	pop	r7
    12ca:	6f 90       	pop	r6
    12cc:	5f 90       	pop	r5
    12ce:	4f 90       	pop	r4
    12d0:	3f 90       	pop	r3
    12d2:	2f 90       	pop	r2
    12d4:	08 95       	ret

000012d6 <effect_snakeBounce_nb>:

void effect_snakeBounce_nb(int length, uint32_t color){ // make a bouncing snake
    12d6:	2f 92       	push	r2
    12d8:	3f 92       	push	r3
    12da:	4f 92       	push	r4
    12dc:	5f 92       	push	r5
    12de:	6f 92       	push	r6
    12e0:	7f 92       	push	r7
    12e2:	8f 92       	push	r8
    12e4:	9f 92       	push	r9
    12e6:	af 92       	push	r10
    12e8:	bf 92       	push	r11
    12ea:	cf 92       	push	r12
    12ec:	df 92       	push	r13
    12ee:	ef 92       	push	r14
    12f0:	ff 92       	push	r15
    12f2:	0f 93       	push	r16
    12f4:	1f 93       	push	r17
    12f6:	cf 93       	push	r28
    12f8:	df 93       	push	r29
    12fa:	00 d0       	rcall	.+0      	; 0x12fc <effect_snakeBounce_nb+0x26>
    12fc:	00 d0       	rcall	.+0      	; 0x12fe <effect_snakeBounce_nb+0x28>
    12fe:	cd b7       	in	r28, 0x3d	; 61
    1300:	de b7       	in	r29, 0x3e	; 62
    1302:	1c 01       	movw	r2, r24
    1304:	6a 01       	movw	r12, r20
    1306:	7b 01       	movw	r14, r22
	int tail = 0;
	static int i = 0;
	static _Bool reverse = 0;
	
	if (i<LEDpixelcount && !reverse){
    1308:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <i.2083>
    130c:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <i.2083+0x1>
    1310:	3c 83       	std	Y+4, r19	; 0x04
    1312:	2b 83       	std	Y+3, r18	; 0x03
    1314:	89 01       	movw	r16, r18
    1316:	24 3b       	cpi	r18, 0xB4	; 180
    1318:	31 05       	cpc	r19, r1
    131a:	34 f5       	brge	.+76     	; 0x1368 <effect_snakeBounce_nb+0x92>
    131c:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <reverse.2084>
    1320:	88 23       	and	r24, r24
    1322:	09 f4       	brne	.+2      	; 0x1326 <effect_snakeBounce_nb+0x50>
    1324:	7a c0       	rjmp	.+244    	; 0x141a <effect_snakeBounce_nb+0x144>
		}
		setRGBW_pixel(tail, 0);
		RGBW_send();
		i++;
	}else{
		reverse = 1;	
    1326:	81 e0       	ldi	r24, 0x01	; 1
    1328:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <reverse.2084>
	}
	 
	if (i > 0 && reverse){
    132c:	8b 81       	ldd	r24, Y+3	; 0x03
    132e:	9c 81       	ldd	r25, Y+4	; 0x04
    1330:	18 16       	cp	r1, r24
    1332:	19 06       	cpc	r1, r25
    1334:	e4 f0       	brlt	.+56     	; 0x136e <effect_snakeBounce_nb+0x98>
		setRGBW_pixel(tail, 0);
		RGBW_send();
		
		i--;
	}else{
		reverse = 0;
    1336:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <reverse.2084>
	}

}
    133a:	0f 90       	pop	r0
    133c:	0f 90       	pop	r0
    133e:	0f 90       	pop	r0
    1340:	0f 90       	pop	r0
    1342:	df 91       	pop	r29
    1344:	cf 91       	pop	r28
    1346:	1f 91       	pop	r17
    1348:	0f 91       	pop	r16
    134a:	ff 90       	pop	r15
    134c:	ef 90       	pop	r14
    134e:	df 90       	pop	r13
    1350:	cf 90       	pop	r12
    1352:	bf 90       	pop	r11
    1354:	af 90       	pop	r10
    1356:	9f 90       	pop	r9
    1358:	8f 90       	pop	r8
    135a:	7f 90       	pop	r7
    135c:	6f 90       	pop	r6
    135e:	5f 90       	pop	r5
    1360:	4f 90       	pop	r4
    1362:	3f 90       	pop	r3
    1364:	2f 90       	pop	r2
    1366:	08 95       	ret
		}
		setRGBW_pixel(tail, 0);
		RGBW_send();
		i++;
	}else{
		reverse = 1;	
    1368:	81 e0       	ldi	r24, 0x01	; 1
    136a:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <reverse.2084>
uint16_t exLow = -1;
uint16_t exHigh = -1;

void setRGBW_pixel(uint16_t pixel, uint32_t color){

	if (pixel < exLow || pixel >= exHigh)
    136e:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <exLow>
    1372:	f0 91 05 01 	lds	r31, 0x0105	; 0x800105 <exLow+0x1>
    1376:	fa 83       	std	Y+2, r31	; 0x02
    1378:	e9 83       	std	Y+1, r30	; 0x01
    137a:	0e 17       	cp	r16, r30
    137c:	1f 07       	cpc	r17, r31
    137e:	08 f4       	brcc	.+2      	; 0x1382 <effect_snakeBounce_nb+0xac>
    1380:	a6 c0       	rjmp	.+332    	; 0x14ce <effect_snakeBounce_nb+0x1f8>
    1382:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <exHigh>
    1386:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <exHigh+0x1>
    138a:	08 17       	cp	r16, r24
    138c:	19 07       	cpc	r17, r25
    138e:	08 f0       	brcs	.+2      	; 0x1392 <effect_snakeBounce_nb+0xbc>
    1390:	9e c0       	rjmp	.+316    	; 0x14ce <effect_snakeBounce_nb+0x1f8>
		led[pixel].r = (uint8_t)((color>>8*3)	& 0x000000FF);
		led[pixel].g = (uint8_t)((color>>8*2)	& 0x000000FF);
		led[pixel].b = (uint8_t)((color>>8*1)	& 0x000000FF);
		led[pixel].w = (uint8_t)( color			& 0x000000FF);
	}else{
		led[pixel].r = 0;
    1392:	00 0f       	add	r16, r16
    1394:	11 1f       	adc	r17, r17
    1396:	00 0f       	add	r16, r16
    1398:	11 1f       	adc	r17, r17
    139a:	f8 01       	movw	r30, r16
    139c:	ea 5d       	subi	r30, 0xDA	; 218
    139e:	fe 4f       	sbci	r31, 0xFE	; 254
    13a0:	11 82       	std	Z+1, r1	; 0x01
		led[pixel].g = 0;
    13a2:	10 82       	st	Z, r1
		led[pixel].b = 0;
    13a4:	12 82       	std	Z+2, r1	; 0x02
		led[pixel].w = 0;
    13a6:	13 82       	std	Z+3, r1	; 0x03
		reverse = 1;	
	}
	 
	if (i > 0 && reverse){
		setRGBW_pixel(i, color);
		tail = i + length;
    13a8:	2b 81       	ldd	r18, Y+3	; 0x03
    13aa:	3c 81       	ldd	r19, Y+4	; 0x04
    13ac:	22 0d       	add	r18, r2
    13ae:	33 1d       	adc	r19, r3
    13b0:	3c 83       	std	Y+4, r19	; 0x04
    13b2:	2b 83       	std	Y+3, r18	; 0x03
		if (tail > LEDpixelcount-1){
			tail = LEDpixelcount-1;
		}
		setRGBW_pixel(tail, 0);
    13b4:	24 3b       	cpi	r18, 0xB4	; 180
    13b6:	31 05       	cpc	r19, r1
    13b8:	24 f0       	brlt	.+8      	; 0x13c2 <effect_snakeBounce_nb+0xec>
    13ba:	83 eb       	ldi	r24, 0xB3	; 179
    13bc:	90 e0       	ldi	r25, 0x00	; 0
    13be:	9c 83       	std	Y+4, r25	; 0x04
    13c0:	8b 83       	std	Y+3, r24	; 0x03
uint16_t exLow = -1;
uint16_t exHigh = -1;

void setRGBW_pixel(uint16_t pixel, uint32_t color){

	if (pixel < exLow || pixel >= exHigh)
    13c2:	eb 81       	ldd	r30, Y+3	; 0x03
    13c4:	fc 81       	ldd	r31, Y+4	; 0x04
    13c6:	29 81       	ldd	r18, Y+1	; 0x01
    13c8:	3a 81       	ldd	r19, Y+2	; 0x02
    13ca:	e2 17       	cp	r30, r18
    13cc:	f3 07       	cpc	r31, r19
    13ce:	08 f4       	brcc	.+2      	; 0x13d2 <effect_snakeBounce_nb+0xfc>
    13d0:	d8 c0       	rjmp	.+432    	; 0x1582 <effect_snakeBounce_nb+0x2ac>
    13d2:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <exHigh>
    13d6:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <exHigh+0x1>
    13da:	e8 17       	cp	r30, r24
    13dc:	f9 07       	cpc	r31, r25
    13de:	08 f0       	brcs	.+2      	; 0x13e2 <effect_snakeBounce_nb+0x10c>
    13e0:	d0 c0       	rjmp	.+416    	; 0x1582 <effect_snakeBounce_nb+0x2ac>
    13e2:	9f 01       	movw	r18, r30
		led[pixel].r = (uint8_t)((color>>8*3)	& 0x000000FF);
		led[pixel].g = (uint8_t)((color>>8*2)	& 0x000000FF);
		led[pixel].b = (uint8_t)((color>>8*1)	& 0x000000FF);
		led[pixel].w = (uint8_t)( color			& 0x000000FF);
	}else{
		led[pixel].r = 0;
    13e4:	22 0f       	add	r18, r18
    13e6:	33 1f       	adc	r19, r19
    13e8:	22 0f       	add	r18, r18
    13ea:	33 1f       	adc	r19, r19
    13ec:	2a 5d       	subi	r18, 0xDA	; 218
    13ee:	3e 4f       	sbci	r19, 0xFE	; 254
    13f0:	f9 01       	movw	r30, r18
    13f2:	11 82       	std	Z+1, r1	; 0x01
		led[pixel].g = 0;
    13f4:	10 82       	st	Z, r1
		led[pixel].b = 0;
    13f6:	12 82       	std	Z+2, r1	; 0x02
		led[pixel].w = 0;
    13f8:	13 82       	std	Z+3, r1	; 0x03

	*color = colorb;//update the color with the new brightness value calculated
}

void RGBW_send(){
		ws2812_setleds_rgbw(led, LEDpixelcount);//send the frame with size of pixelcount to update the strip
    13fa:	64 eb       	ldi	r22, 0xB4	; 180
    13fc:	70 e0       	ldi	r23, 0x00	; 0
    13fe:	86 e2       	ldi	r24, 0x26	; 38
    1400:	91 e0       	ldi	r25, 0x01	; 1
    1402:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <ws2812_setleds_rgbw>
			tail = LEDpixelcount-1;
		}
		setRGBW_pixel(tail, 0);
		RGBW_send();
		
		i--;
    1406:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <i.2083>
    140a:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <i.2083+0x1>
    140e:	01 97       	sbiw	r24, 0x01	; 1
    1410:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <i.2083+0x1>
    1414:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <i.2083>
    1418:	90 cf       	rjmp	.-224    	; 0x133a <effect_snakeBounce_nb+0x64>
uint16_t exLow = -1;
uint16_t exHigh = -1;

void setRGBW_pixel(uint16_t pixel, uint32_t color){

	if (pixel < exLow || pixel >= exHigh)
    141a:	00 91 04 01 	lds	r16, 0x0104	; 0x800104 <exLow>
    141e:	10 91 05 01 	lds	r17, 0x0105	; 0x800105 <exLow+0x1>
    1422:	20 17       	cp	r18, r16
    1424:	31 07       	cpc	r19, r17
    1426:	08 f4       	brcc	.+2      	; 0x142a <effect_snakeBounce_nb+0x154>
    1428:	bd c0       	rjmp	.+378    	; 0x15a4 <effect_snakeBounce_nb+0x2ce>
    142a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <exHigh>
    142e:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <exHigh+0x1>
    1432:	28 17       	cp	r18, r24
    1434:	39 07       	cpc	r19, r25
    1436:	08 f0       	brcs	.+2      	; 0x143a <effect_snakeBounce_nb+0x164>
    1438:	b5 c0       	rjmp	.+362    	; 0x15a4 <effect_snakeBounce_nb+0x2ce>
    143a:	f9 01       	movw	r30, r18
		led[pixel].r = (uint8_t)((color>>8*3)	& 0x000000FF);
		led[pixel].g = (uint8_t)((color>>8*2)	& 0x000000FF);
		led[pixel].b = (uint8_t)((color>>8*1)	& 0x000000FF);
		led[pixel].w = (uint8_t)( color			& 0x000000FF);
	}else{
		led[pixel].r = 0;
    143c:	ee 0f       	add	r30, r30
    143e:	ff 1f       	adc	r31, r31
    1440:	ee 0f       	add	r30, r30
    1442:	ff 1f       	adc	r31, r31
    1444:	ea 5d       	subi	r30, 0xDA	; 218
    1446:	fe 4f       	sbci	r31, 0xFE	; 254
    1448:	11 82       	std	Z+1, r1	; 0x01
		led[pixel].g = 0;
    144a:	10 82       	st	Z, r1
		led[pixel].b = 0;
    144c:	12 82       	std	Z+2, r1	; 0x02
		led[pixel].w = 0;
    144e:	13 82       	std	Z+3, r1	; 0x03
		setRGBW_pixel(i, color);
		tail = i - length;
		if (tail < 0){
			tail = 0;
		}
		setRGBW_pixel(tail, 0);
    1450:	8b 81       	ldd	r24, Y+3	; 0x03
    1452:	9c 81       	ldd	r25, Y+4	; 0x04
    1454:	82 19       	sub	r24, r2
    1456:	93 09       	sbc	r25, r3
    1458:	9a 83       	std	Y+2, r25	; 0x02
    145a:	89 83       	std	Y+1, r24	; 0x01
    145c:	97 fd       	sbrc	r25, 7
    145e:	fd c0       	rjmp	.+506    	; 0x165a <effect_snakeBounce_nb+0x384>
uint16_t exLow = -1;
uint16_t exHigh = -1;

void setRGBW_pixel(uint16_t pixel, uint32_t color){

	if (pixel < exLow || pixel >= exHigh)
    1460:	e9 81       	ldd	r30, Y+1	; 0x01
    1462:	fa 81       	ldd	r31, Y+2	; 0x02
    1464:	e0 17       	cp	r30, r16
    1466:	f1 07       	cpc	r31, r17
    1468:	08 f4       	brcc	.+2      	; 0x146c <effect_snakeBounce_nb+0x196>
    146a:	99 c0       	rjmp	.+306    	; 0x159e <effect_snakeBounce_nb+0x2c8>
    146c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <exHigh>
    1470:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <exHigh+0x1>
    1474:	e8 17       	cp	r30, r24
    1476:	f9 07       	cpc	r31, r25
    1478:	08 f0       	brcs	.+2      	; 0x147c <effect_snakeBounce_nb+0x1a6>
    147a:	91 c0       	rjmp	.+290    	; 0x159e <effect_snakeBounce_nb+0x2c8>
    147c:	9f 01       	movw	r18, r30
		led[pixel].r = (uint8_t)((color>>8*3)	& 0x000000FF);
		led[pixel].g = (uint8_t)((color>>8*2)	& 0x000000FF);
		led[pixel].b = (uint8_t)((color>>8*1)	& 0x000000FF);
		led[pixel].w = (uint8_t)( color			& 0x000000FF);
	}else{
		led[pixel].r = 0;
    147e:	22 0f       	add	r18, r18
    1480:	33 1f       	adc	r19, r19
    1482:	22 0f       	add	r18, r18
    1484:	33 1f       	adc	r19, r19
    1486:	2a 5d       	subi	r18, 0xDA	; 218
    1488:	3e 4f       	sbci	r19, 0xFE	; 254
    148a:	f9 01       	movw	r30, r18
    148c:	11 82       	std	Z+1, r1	; 0x01
		led[pixel].g = 0;
    148e:	10 82       	st	Z, r1
		led[pixel].b = 0;
    1490:	12 82       	std	Z+2, r1	; 0x02
		led[pixel].w = 0;
    1492:	13 82       	std	Z+3, r1	; 0x03

	*color = colorb;//update the color with the new brightness value calculated
}

void RGBW_send(){
		ws2812_setleds_rgbw(led, LEDpixelcount);//send the frame with size of pixelcount to update the strip
    1494:	64 eb       	ldi	r22, 0xB4	; 180
    1496:	70 e0       	ldi	r23, 0x00	; 0
    1498:	86 e2       	ldi	r24, 0x26	; 38
    149a:	91 e0       	ldi	r25, 0x01	; 1
    149c:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <ws2812_setleds_rgbw>
		if (tail < 0){
			tail = 0;
		}
		setRGBW_pixel(tail, 0);
		RGBW_send();
		i++;
    14a0:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <i.2083>
    14a4:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <i.2083+0x1>
    14a8:	89 01       	movw	r16, r18
    14aa:	0f 5f       	subi	r16, 0xFF	; 255
    14ac:	1f 4f       	sbci	r17, 0xFF	; 255
    14ae:	1c 83       	std	Y+4, r17	; 0x04
    14b0:	0b 83       	std	Y+3, r16	; 0x03
    14b2:	10 93 0d 01 	sts	0x010D, r17	; 0x80010d <i.2083+0x1>
    14b6:	00 93 0c 01 	sts	0x010C, r16	; 0x80010c <i.2083>
	}else{
		reverse = 1;	
	}
	 
	if (i > 0 && reverse){
    14ba:	10 16       	cp	r1, r16
    14bc:	11 06       	cpc	r1, r17
    14be:	0c f0       	brlt	.+2      	; 0x14c2 <effect_snakeBounce_nb+0x1ec>
    14c0:	3a cf       	rjmp	.-396    	; 0x1336 <effect_snakeBounce_nb+0x60>
    14c2:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <reverse.2084>
    14c6:	88 23       	and	r24, r24
    14c8:	09 f4       	brne	.+2      	; 0x14cc <effect_snakeBounce_nb+0x1f6>
    14ca:	35 cf       	rjmp	.-406    	; 0x1336 <effect_snakeBounce_nb+0x60>
    14cc:	50 cf       	rjmp	.-352    	; 0x136e <effect_snakeBounce_nb+0x98>

void calcBrightness(uint32_t *color, uint8_t _brightness){
	uint32_t buf = 0;
	uint32_t colorb = 0;

	buf = (((*color>>8*3)	& 0x000000FF) * _brightness) / 255;
    14ce:	80 90 06 01 	lds	r8, 0x0106	; 0x800106 <brightness>
    14d2:	91 2c       	mov	r9, r1
    14d4:	a1 2c       	mov	r10, r1
    14d6:	b1 2c       	mov	r11, r1

	buf = (((*color>>8*1)	& 0x000000FF) * _brightness) / 255;
	colorb |= (buf<<8*1);

	buf = (( *color			& 0x000000FF) * _brightness) / 255;
	colorb |= (buf);
    14d8:	2f 2d       	mov	r18, r15
    14da:	33 27       	eor	r19, r19
    14dc:	44 27       	eor	r20, r20
    14de:	55 27       	eor	r21, r21
    14e0:	c5 01       	movw	r24, r10
    14e2:	b4 01       	movw	r22, r8
    14e4:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <__mulsi3>
    14e8:	2f ef       	ldi	r18, 0xFF	; 255
    14ea:	30 e0       	ldi	r19, 0x00	; 0
    14ec:	40 e0       	ldi	r20, 0x00	; 0
    14ee:	50 e0       	ldi	r21, 0x00	; 0
    14f0:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <__udivmodsi4>
    14f4:	72 2e       	mov	r7, r18
    14f6:	66 24       	eor	r6, r6
    14f8:	55 24       	eor	r5, r5
    14fa:	44 24       	eor	r4, r4
    14fc:	ac 2d       	mov	r26, r12
    14fe:	b0 e0       	ldi	r27, 0x00	; 0
    1500:	a5 01       	movw	r20, r10
    1502:	94 01       	movw	r18, r8
    1504:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <__muluhisi3>
    1508:	2f ef       	ldi	r18, 0xFF	; 255
    150a:	30 e0       	ldi	r19, 0x00	; 0
    150c:	40 e0       	ldi	r20, 0x00	; 0
    150e:	50 e0       	ldi	r21, 0x00	; 0
    1510:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <__udivmodsi4>
    1514:	42 2a       	or	r4, r18
    1516:	53 2a       	or	r5, r19
    1518:	64 2a       	or	r6, r20
    151a:	75 2a       	or	r7, r21
    151c:	ae 2d       	mov	r26, r14
    151e:	b0 e0       	ldi	r27, 0x00	; 0
    1520:	a5 01       	movw	r20, r10
    1522:	94 01       	movw	r18, r8
    1524:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <__muluhisi3>
    1528:	2f ef       	ldi	r18, 0xFF	; 255
    152a:	30 e0       	ldi	r19, 0x00	; 0
    152c:	40 e0       	ldi	r20, 0x00	; 0
    152e:	50 e0       	ldi	r21, 0x00	; 0
    1530:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <__udivmodsi4>
    1534:	d9 01       	movw	r26, r18
    1536:	99 27       	eor	r25, r25
    1538:	88 27       	eor	r24, r24
    153a:	48 2a       	or	r4, r24
    153c:	59 2a       	or	r5, r25
    153e:	6a 2a       	or	r6, r26
    1540:	7b 2a       	or	r7, r27
    1542:	ad 2d       	mov	r26, r13
    1544:	b0 e0       	ldi	r27, 0x00	; 0
    1546:	a5 01       	movw	r20, r10
    1548:	94 01       	movw	r18, r8
    154a:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <__muluhisi3>
    154e:	2f ef       	ldi	r18, 0xFF	; 255
    1550:	30 e0       	ldi	r19, 0x00	; 0
    1552:	40 e0       	ldi	r20, 0x00	; 0
    1554:	50 e0       	ldi	r21, 0x00	; 0
    1556:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <__udivmodsi4>
    155a:	b4 2f       	mov	r27, r20
    155c:	a3 2f       	mov	r26, r19
    155e:	92 2f       	mov	r25, r18
    1560:	88 27       	eor	r24, r24
    1562:	48 2a       	or	r4, r24
    1564:	59 2a       	or	r5, r25
    1566:	6a 2a       	or	r6, r26
    1568:	7b 2a       	or	r7, r27
void setRGBW_pixel(uint16_t pixel, uint32_t color){

	if (pixel < exLow || pixel >= exHigh)
	{
		calcBrightness(&color, brightness);
		led[pixel].r = (uint8_t)((color>>8*3)	& 0x000000FF);
    156a:	00 0f       	add	r16, r16
    156c:	11 1f       	adc	r17, r17
    156e:	00 0f       	add	r16, r16
    1570:	11 1f       	adc	r17, r17
    1572:	f8 01       	movw	r30, r16
    1574:	ea 5d       	subi	r30, 0xDA	; 218
    1576:	fe 4f       	sbci	r31, 0xFE	; 254
    1578:	71 82       	std	Z+1, r7	; 0x01
		led[pixel].g = (uint8_t)((color>>8*2)	& 0x000000FF);
    157a:	60 82       	st	Z, r6
		led[pixel].b = (uint8_t)((color>>8*1)	& 0x000000FF);
    157c:	52 82       	std	Z+2, r5	; 0x02
		led[pixel].w = (uint8_t)( color			& 0x000000FF);
    157e:	43 82       	std	Z+3, r4	; 0x03
    1580:	13 cf       	rjmp	.-474    	; 0x13a8 <effect_snakeBounce_nb+0xd2>
void setRGBW_pixel(uint16_t pixel, uint32_t color){

	if (pixel < exLow || pixel >= exHigh)
	{
		calcBrightness(&color, brightness);
		led[pixel].r = (uint8_t)((color>>8*3)	& 0x000000FF);
    1582:	8b 81       	ldd	r24, Y+3	; 0x03
    1584:	9c 81       	ldd	r25, Y+4	; 0x04
    1586:	88 0f       	add	r24, r24
    1588:	99 1f       	adc	r25, r25
    158a:	88 0f       	add	r24, r24
    158c:	99 1f       	adc	r25, r25
    158e:	8a 5d       	subi	r24, 0xDA	; 218
    1590:	9e 4f       	sbci	r25, 0xFE	; 254
    1592:	fc 01       	movw	r30, r24
    1594:	11 82       	std	Z+1, r1	; 0x01
		led[pixel].g = (uint8_t)((color>>8*2)	& 0x000000FF);
    1596:	10 82       	st	Z, r1
		led[pixel].b = (uint8_t)((color>>8*1)	& 0x000000FF);
    1598:	12 82       	std	Z+2, r1	; 0x02
		led[pixel].w = (uint8_t)( color			& 0x000000FF);
    159a:	13 82       	std	Z+3, r1	; 0x03
    159c:	2e cf       	rjmp	.-420    	; 0x13fa <effect_snakeBounce_nb+0x124>
void setRGBW_pixel(uint16_t pixel, uint32_t color){

	if (pixel < exLow || pixel >= exHigh)
	{
		calcBrightness(&color, brightness);
		led[pixel].r = (uint8_t)((color>>8*3)	& 0x000000FF);
    159e:	29 81       	ldd	r18, Y+1	; 0x01
    15a0:	3a 81       	ldd	r19, Y+2	; 0x02
    15a2:	6d cf       	rjmp	.-294    	; 0x147e <effect_snakeBounce_nb+0x1a8>

void calcBrightness(uint32_t *color, uint8_t _brightness){
	uint32_t buf = 0;
	uint32_t colorb = 0;

	buf = (((*color>>8*3)	& 0x000000FF) * _brightness) / 255;
    15a4:	80 90 06 01 	lds	r8, 0x0106	; 0x800106 <brightness>
    15a8:	91 2c       	mov	r9, r1
    15aa:	a1 2c       	mov	r10, r1
    15ac:	b1 2c       	mov	r11, r1

	buf = (((*color>>8*1)	& 0x000000FF) * _brightness) / 255;
	colorb |= (buf<<8*1);

	buf = (( *color			& 0x000000FF) * _brightness) / 255;
	colorb |= (buf);
    15ae:	2f 2d       	mov	r18, r15
    15b0:	33 27       	eor	r19, r19
    15b2:	44 27       	eor	r20, r20
    15b4:	55 27       	eor	r21, r21
    15b6:	c5 01       	movw	r24, r10
    15b8:	b4 01       	movw	r22, r8
    15ba:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <__mulsi3>
    15be:	2f ef       	ldi	r18, 0xFF	; 255
    15c0:	30 e0       	ldi	r19, 0x00	; 0
    15c2:	40 e0       	ldi	r20, 0x00	; 0
    15c4:	50 e0       	ldi	r21, 0x00	; 0
    15c6:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <__udivmodsi4>
    15ca:	72 2e       	mov	r7, r18
    15cc:	66 24       	eor	r6, r6
    15ce:	55 24       	eor	r5, r5
    15d0:	44 24       	eor	r4, r4
    15d2:	ac 2d       	mov	r26, r12
    15d4:	b0 e0       	ldi	r27, 0x00	; 0
    15d6:	a5 01       	movw	r20, r10
    15d8:	94 01       	movw	r18, r8
    15da:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <__muluhisi3>
    15de:	2f ef       	ldi	r18, 0xFF	; 255
    15e0:	30 e0       	ldi	r19, 0x00	; 0
    15e2:	40 e0       	ldi	r20, 0x00	; 0
    15e4:	50 e0       	ldi	r21, 0x00	; 0
    15e6:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <__udivmodsi4>
    15ea:	42 2a       	or	r4, r18
    15ec:	53 2a       	or	r5, r19
    15ee:	64 2a       	or	r6, r20
    15f0:	75 2a       	or	r7, r21
    15f2:	ae 2d       	mov	r26, r14
    15f4:	b0 e0       	ldi	r27, 0x00	; 0
    15f6:	a5 01       	movw	r20, r10
    15f8:	94 01       	movw	r18, r8
    15fa:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <__muluhisi3>
    15fe:	2f ef       	ldi	r18, 0xFF	; 255
    1600:	30 e0       	ldi	r19, 0x00	; 0
    1602:	40 e0       	ldi	r20, 0x00	; 0
    1604:	50 e0       	ldi	r21, 0x00	; 0
    1606:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <__udivmodsi4>
    160a:	d9 01       	movw	r26, r18
    160c:	99 27       	eor	r25, r25
    160e:	88 27       	eor	r24, r24
    1610:	48 2a       	or	r4, r24
    1612:	59 2a       	or	r5, r25
    1614:	6a 2a       	or	r6, r26
    1616:	7b 2a       	or	r7, r27
    1618:	ad 2d       	mov	r26, r13
    161a:	b0 e0       	ldi	r27, 0x00	; 0
    161c:	a5 01       	movw	r20, r10
    161e:	94 01       	movw	r18, r8
    1620:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <__muluhisi3>
    1624:	2f ef       	ldi	r18, 0xFF	; 255
    1626:	30 e0       	ldi	r19, 0x00	; 0
    1628:	40 e0       	ldi	r20, 0x00	; 0
    162a:	50 e0       	ldi	r21, 0x00	; 0
    162c:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <__udivmodsi4>
    1630:	b4 2f       	mov	r27, r20
    1632:	a3 2f       	mov	r26, r19
    1634:	92 2f       	mov	r25, r18
    1636:	88 27       	eor	r24, r24
    1638:	48 2a       	or	r4, r24
    163a:	59 2a       	or	r5, r25
    163c:	6a 2a       	or	r6, r26
    163e:	7b 2a       	or	r7, r27
void setRGBW_pixel(uint16_t pixel, uint32_t color){

	if (pixel < exLow || pixel >= exHigh)
	{
		calcBrightness(&color, brightness);
		led[pixel].r = (uint8_t)((color>>8*3)	& 0x000000FF);
    1640:	eb 81       	ldd	r30, Y+3	; 0x03
    1642:	fc 81       	ldd	r31, Y+4	; 0x04
    1644:	ee 0f       	add	r30, r30
    1646:	ff 1f       	adc	r31, r31
    1648:	ee 0f       	add	r30, r30
    164a:	ff 1f       	adc	r31, r31
    164c:	ea 5d       	subi	r30, 0xDA	; 218
    164e:	fe 4f       	sbci	r31, 0xFE	; 254
    1650:	71 82       	std	Z+1, r7	; 0x01
		led[pixel].g = (uint8_t)((color>>8*2)	& 0x000000FF);
    1652:	60 82       	st	Z, r6
		led[pixel].b = (uint8_t)((color>>8*1)	& 0x000000FF);
    1654:	52 82       	std	Z+2, r5	; 0x02
		led[pixel].w = (uint8_t)( color			& 0x000000FF);
    1656:	43 82       	std	Z+3, r4	; 0x03
    1658:	fb ce       	rjmp	.-522    	; 0x1450 <effect_snakeBounce_nb+0x17a>
		setRGBW_pixel(i, color);
		tail = i - length;
		if (tail < 0){
			tail = 0;
		}
		setRGBW_pixel(tail, 0);
    165a:	1a 82       	std	Y+2, r1	; 0x02
    165c:	19 82       	std	Y+1, r1	; 0x01
    165e:	00 cf       	rjmp	.-512    	; 0x1460 <effect_snakeBounce_nb+0x18a>

00001660 <effect_chase_b>:
	}else{
		reverse = 0;
	}

}
void effect_chase_b(uint32_t color){
    1660:	2f 92       	push	r2
    1662:	3f 92       	push	r3
    1664:	4f 92       	push	r4
    1666:	5f 92       	push	r5
    1668:	6f 92       	push	r6
    166a:	7f 92       	push	r7
    166c:	8f 92       	push	r8
    166e:	9f 92       	push	r9
    1670:	af 92       	push	r10
    1672:	bf 92       	push	r11
    1674:	cf 92       	push	r12
    1676:	df 92       	push	r13
    1678:	ef 92       	push	r14
    167a:	ff 92       	push	r15
    167c:	0f 93       	push	r16
    167e:	1f 93       	push	r17
    1680:	cf 93       	push	r28
    1682:	df 93       	push	r29
    1684:	cd b7       	in	r28, 0x3d	; 61
    1686:	de b7       	in	r29, 0x3e	; 62
    1688:	62 97       	sbiw	r28, 0x12	; 18
    168a:	0f b6       	in	r0, 0x3f	; 63
    168c:	f8 94       	cli
    168e:	de bf       	out	0x3e, r29	; 62
    1690:	0f be       	out	0x3f, r0	; 63
    1692:	cd bf       	out	0x3d, r28	; 61

void calcBrightness(uint32_t *color, uint8_t _brightness){
	uint32_t buf = 0;
	uint32_t colorb = 0;

	buf = (((*color>>8*3)	& 0x000000FF) * _brightness) / 255;
    1694:	29 2f       	mov	r18, r25
    1696:	33 27       	eor	r19, r19
    1698:	44 27       	eor	r20, r20
    169a:	55 27       	eor	r21, r21
    169c:	29 83       	std	Y+1, r18	; 0x01
    169e:	3a 83       	std	Y+2, r19	; 0x02
    16a0:	4b 83       	std	Y+3, r20	; 0x03
    16a2:	5c 83       	std	Y+4, r21	; 0x04
	colorb |= (buf<<8*3);

	buf = (((*color>>8*2)	& 0x000000FF) * _brightness) / 255;
    16a4:	28 2f       	mov	r18, r24
    16a6:	30 e0       	ldi	r19, 0x00	; 0
    16a8:	40 e0       	ldi	r20, 0x00	; 0
    16aa:	50 e0       	ldi	r21, 0x00	; 0
    16ac:	2d 83       	std	Y+5, r18	; 0x05
    16ae:	3e 83       	std	Y+6, r19	; 0x06
    16b0:	4f 83       	std	Y+7, r20	; 0x07
    16b2:	58 87       	std	Y+8, r21	; 0x08
	colorb |= (buf<<8*2);

	buf = (((*color>>8*1)	& 0x000000FF) * _brightness) / 255;
    16b4:	27 2f       	mov	r18, r23
    16b6:	30 e0       	ldi	r19, 0x00	; 0
    16b8:	40 e0       	ldi	r20, 0x00	; 0
    16ba:	50 e0       	ldi	r21, 0x00	; 0
    16bc:	29 87       	std	Y+9, r18	; 0x09
    16be:	3a 87       	std	Y+10, r19	; 0x0a
    16c0:	4b 87       	std	Y+11, r20	; 0x0b
    16c2:	5c 87       	std	Y+12, r21	; 0x0c
    16c4:	46 e2       	ldi	r20, 0x26	; 38
    16c6:	51 e0       	ldi	r21, 0x01	; 1
    16c8:	5a 8b       	std	Y+18, r21	; 0x12
    16ca:	49 8b       	std	Y+17, r20	; 0x11
    16cc:	8a 01       	movw	r16, r20
		reverse = 0;
	}

}
void effect_chase_b(uint32_t color){
	for(int i = 0; i <= LEDpixelcount; i++){
    16ce:	21 2c       	mov	r2, r1
    16d0:	31 2c       	mov	r3, r1

	buf = (((*color>>8*1)	& 0x000000FF) * _brightness) / 255;
	colorb |= (buf<<8*1);

	buf = (( *color			& 0x000000FF) * _brightness) / 255;
	colorb |= (buf);
    16d2:	81 2c       	mov	r8, r1
    16d4:	91 2c       	mov	r9, r1
    16d6:	54 01       	movw	r10, r8
    16d8:	8a 94       	dec	r8
    16da:	9b 01       	movw	r18, r22
    16dc:	ac 01       	movw	r20, r24
    16de:	33 27       	eor	r19, r19
    16e0:	44 27       	eor	r20, r20
    16e2:	55 27       	eor	r21, r21
    16e4:	2d 87       	std	Y+13, r18	; 0x0d
    16e6:	3e 87       	std	Y+14, r19	; 0x0e
    16e8:	4f 87       	std	Y+15, r20	; 0x0f
    16ea:	58 8b       	std	Y+16, r21	; 0x10
    16ec:	15 c0       	rjmp	.+42     	; 0x1718 <effect_chase_b+0xb8>
		led[pixel].r = (uint8_t)((color>>8*3)	& 0x000000FF);
		led[pixel].g = (uint8_t)((color>>8*2)	& 0x000000FF);
		led[pixel].b = (uint8_t)((color>>8*1)	& 0x000000FF);
		led[pixel].w = (uint8_t)( color			& 0x000000FF);
	}else{
		led[pixel].r = 0;
    16ee:	f8 01       	movw	r30, r16
    16f0:	11 82       	std	Z+1, r1	; 0x01
		led[pixel].g = 0;
    16f2:	10 82       	st	Z, r1
		led[pixel].b = 0;
    16f4:	12 82       	std	Z+2, r1	; 0x02
		led[pixel].w = 0;
    16f6:	13 82       	std	Z+3, r1	; 0x03

	*color = colorb;//update the color with the new brightness value calculated
}

void RGBW_send(){
		ws2812_setleds_rgbw(led, LEDpixelcount);//send the frame with size of pixelcount to update the strip
    16f8:	64 eb       	ldi	r22, 0xB4	; 180
    16fa:	70 e0       	ldi	r23, 0x00	; 0
    16fc:	86 e2       	ldi	r24, 0x26	; 38
    16fe:	91 e0       	ldi	r25, 0x01	; 1
    1700:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <ws2812_setleds_rgbw>
		reverse = 0;
	}

}
void effect_chase_b(uint32_t color){
	for(int i = 0; i <= LEDpixelcount; i++){
    1704:	ff ef       	ldi	r31, 0xFF	; 255
    1706:	2f 1a       	sub	r2, r31
    1708:	3f 0a       	sbc	r3, r31
    170a:	0c 5f       	subi	r16, 0xFC	; 252
    170c:	1f 4f       	sbci	r17, 0xFF	; 255
    170e:	25 eb       	ldi	r18, 0xB5	; 181
    1710:	22 16       	cp	r2, r18
    1712:	31 04       	cpc	r3, r1
    1714:	09 f4       	brne	.+2      	; 0x1718 <effect_chase_b+0xb8>
    1716:	60 c0       	rjmp	.+192    	; 0x17d8 <effect_chase_b+0x178>
uint16_t exLow = -1;
uint16_t exHigh = -1;

void setRGBW_pixel(uint16_t pixel, uint32_t color){

	if (pixel < exLow || pixel >= exHigh)
    1718:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <exLow>
    171c:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <exLow+0x1>
    1720:	28 16       	cp	r2, r24
    1722:	39 06       	cpc	r3, r25
    1724:	38 f0       	brcs	.+14     	; 0x1734 <effect_chase_b+0xd4>
    1726:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <exHigh>
    172a:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <exHigh+0x1>
    172e:	28 16       	cp	r2, r24
    1730:	39 06       	cpc	r3, r25
    1732:	e8 f2       	brcs	.-70     	; 0x16ee <effect_chase_b+0x8e>

void calcBrightness(uint32_t *color, uint8_t _brightness){
	uint32_t buf = 0;
	uint32_t colorb = 0;

	buf = (((*color>>8*3)	& 0x000000FF) * _brightness) / 255;
    1734:	c0 90 06 01 	lds	r12, 0x0106	; 0x800106 <brightness>
    1738:	d1 2c       	mov	r13, r1
    173a:	e1 2c       	mov	r14, r1
    173c:	f1 2c       	mov	r15, r1

	buf = (((*color>>8*1)	& 0x000000FF) * _brightness) / 255;
	colorb |= (buf<<8*1);

	buf = (( *color			& 0x000000FF) * _brightness) / 255;
	colorb |= (buf);
    173e:	29 81       	ldd	r18, Y+1	; 0x01
    1740:	3a 81       	ldd	r19, Y+2	; 0x02
    1742:	4b 81       	ldd	r20, Y+3	; 0x03
    1744:	5c 81       	ldd	r21, Y+4	; 0x04
    1746:	c7 01       	movw	r24, r14
    1748:	b6 01       	movw	r22, r12
    174a:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <__mulsi3>
    174e:	a5 01       	movw	r20, r10
    1750:	94 01       	movw	r18, r8
    1752:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <__udivmodsi4>
    1756:	72 2e       	mov	r7, r18
    1758:	66 24       	eor	r6, r6
    175a:	55 24       	eor	r5, r5
    175c:	44 24       	eor	r4, r4
    175e:	2d 85       	ldd	r18, Y+13	; 0x0d
    1760:	3e 85       	ldd	r19, Y+14	; 0x0e
    1762:	4f 85       	ldd	r20, Y+15	; 0x0f
    1764:	58 89       	ldd	r21, Y+16	; 0x10
    1766:	c7 01       	movw	r24, r14
    1768:	b6 01       	movw	r22, r12
    176a:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <__mulsi3>
    176e:	a5 01       	movw	r20, r10
    1770:	94 01       	movw	r18, r8
    1772:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <__udivmodsi4>
    1776:	42 2a       	or	r4, r18
    1778:	53 2a       	or	r5, r19
    177a:	64 2a       	or	r6, r20
    177c:	75 2a       	or	r7, r21
    177e:	a7 01       	movw	r20, r14
    1780:	96 01       	movw	r18, r12
    1782:	6d 81       	ldd	r22, Y+5	; 0x05
    1784:	7e 81       	ldd	r23, Y+6	; 0x06
    1786:	8f 81       	ldd	r24, Y+7	; 0x07
    1788:	98 85       	ldd	r25, Y+8	; 0x08
    178a:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <__mulsi3>
    178e:	a5 01       	movw	r20, r10
    1790:	94 01       	movw	r18, r8
    1792:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <__udivmodsi4>
    1796:	d9 01       	movw	r26, r18
    1798:	99 27       	eor	r25, r25
    179a:	88 27       	eor	r24, r24
    179c:	48 2a       	or	r4, r24
    179e:	59 2a       	or	r5, r25
    17a0:	6a 2a       	or	r6, r26
    17a2:	7b 2a       	or	r7, r27
    17a4:	a7 01       	movw	r20, r14
    17a6:	96 01       	movw	r18, r12
    17a8:	69 85       	ldd	r22, Y+9	; 0x09
    17aa:	7a 85       	ldd	r23, Y+10	; 0x0a
    17ac:	8b 85       	ldd	r24, Y+11	; 0x0b
    17ae:	9c 85       	ldd	r25, Y+12	; 0x0c
    17b0:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <__mulsi3>
    17b4:	a5 01       	movw	r20, r10
    17b6:	94 01       	movw	r18, r8
    17b8:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <__udivmodsi4>
    17bc:	b4 2f       	mov	r27, r20
    17be:	a3 2f       	mov	r26, r19
    17c0:	92 2f       	mov	r25, r18
    17c2:	88 27       	eor	r24, r24
    17c4:	48 2a       	or	r4, r24
    17c6:	59 2a       	or	r5, r25
    17c8:	6a 2a       	or	r6, r26
    17ca:	7b 2a       	or	r7, r27
void setRGBW_pixel(uint16_t pixel, uint32_t color){

	if (pixel < exLow || pixel >= exHigh)
	{
		calcBrightness(&color, brightness);
		led[pixel].r = (uint8_t)((color>>8*3)	& 0x000000FF);
    17cc:	f8 01       	movw	r30, r16
    17ce:	71 82       	std	Z+1, r7	; 0x01
		led[pixel].g = (uint8_t)((color>>8*2)	& 0x000000FF);
    17d0:	60 82       	st	Z, r6
		led[pixel].b = (uint8_t)((color>>8*1)	& 0x000000FF);
    17d2:	52 82       	std	Z+2, r5	; 0x02
		led[pixel].w = (uint8_t)( color			& 0x000000FF);
    17d4:	43 82       	std	Z+3, r4	; 0x03
    17d6:	90 cf       	rjmp	.-224    	; 0x16f8 <effect_chase_b+0x98>
    17d8:	00 e0       	ldi	r16, 0x00	; 0
    17da:	10 e0       	ldi	r17, 0x00	; 0
void setRGBW_pixel(uint16_t pixel, uint32_t color){

	if (pixel < exLow || pixel >= exHigh)
	{
		calcBrightness(&color, brightness);
		led[pixel].r = (uint8_t)((color>>8*3)	& 0x000000FF);
    17dc:	e9 89       	ldd	r30, Y+17	; 0x11
    17de:	fa 89       	ldd	r31, Y+18	; 0x12
		led[pixel].g = (uint8_t)((color>>8*2)	& 0x000000FF);
		led[pixel].b = (uint8_t)((color>>8*1)	& 0x000000FF);
		led[pixel].w = (uint8_t)( color			& 0x000000FF);
	}else{
		led[pixel].r = 0;
    17e0:	11 82       	std	Z+1, r1	; 0x01
		led[pixel].g = 0;
    17e2:	10 82       	st	Z, r1
		led[pixel].b = 0;
    17e4:	12 82       	std	Z+2, r1	; 0x02
		led[pixel].w = 0;
    17e6:	13 82       	std	Z+3, r1	; 0x03

	*color = colorb;//update the color with the new brightness value calculated
}

void RGBW_send(){
		ws2812_setleds_rgbw(led, LEDpixelcount);//send the frame with size of pixelcount to update the strip
    17e8:	64 eb       	ldi	r22, 0xB4	; 180
    17ea:	70 e0       	ldi	r23, 0x00	; 0
    17ec:	86 e2       	ldi	r24, 0x26	; 38
    17ee:	91 e0       	ldi	r25, 0x01	; 1
    17f0:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <ws2812_setleds_rgbw>
void effect_chase_b(uint32_t color){
	for(int i = 0; i <= LEDpixelcount; i++){
		setRGBW_pixel(i, color);
		RGBW_send();
	}
	for(int i = 0; i <= LEDpixelcount; i++){
    17f4:	0f 5f       	subi	r16, 0xFF	; 255
    17f6:	1f 4f       	sbci	r17, 0xFF	; 255
    17f8:	29 89       	ldd	r18, Y+17	; 0x11
    17fa:	3a 89       	ldd	r19, Y+18	; 0x12
    17fc:	2c 5f       	subi	r18, 0xFC	; 252
    17fe:	3f 4f       	sbci	r19, 0xFF	; 255
    1800:	3a 8b       	std	Y+18, r19	; 0x12
    1802:	29 8b       	std	Y+17, r18	; 0x11
    1804:	05 3b       	cpi	r16, 0xB5	; 181
    1806:	11 05       	cpc	r17, r1
    1808:	49 f7       	brne	.-46     	; 0x17dc <effect_chase_b+0x17c>
		setRGBW_pixel(i, 0);
		RGBW_send();
	}
}
    180a:	62 96       	adiw	r28, 0x12	; 18
    180c:	0f b6       	in	r0, 0x3f	; 63
    180e:	f8 94       	cli
    1810:	de bf       	out	0x3e, r29	; 62
    1812:	0f be       	out	0x3f, r0	; 63
    1814:	cd bf       	out	0x3d, r28	; 61
    1816:	df 91       	pop	r29
    1818:	cf 91       	pop	r28
    181a:	1f 91       	pop	r17
    181c:	0f 91       	pop	r16
    181e:	ff 90       	pop	r15
    1820:	ef 90       	pop	r14
    1822:	df 90       	pop	r13
    1824:	cf 90       	pop	r12
    1826:	bf 90       	pop	r11
    1828:	af 90       	pop	r10
    182a:	9f 90       	pop	r9
    182c:	8f 90       	pop	r8
    182e:	7f 90       	pop	r7
    1830:	6f 90       	pop	r6
    1832:	5f 90       	pop	r5
    1834:	4f 90       	pop	r4
    1836:	3f 90       	pop	r3
    1838:	2f 90       	pop	r2
    183a:	08 95       	ret

0000183c <effect_pulse_b>:
@param maxBrightness The top pulse brightness, 0-255;
		The brightness the led(s) will go to when at the top of the pulse cylce.

*/

void effect_pulse_b(int delay, int maxBrightness, uint32_t color){
    183c:	2f 92       	push	r2
    183e:	3f 92       	push	r3
    1840:	4f 92       	push	r4
    1842:	5f 92       	push	r5
    1844:	6f 92       	push	r6
    1846:	7f 92       	push	r7
    1848:	8f 92       	push	r8
    184a:	9f 92       	push	r9
    184c:	af 92       	push	r10
    184e:	bf 92       	push	r11
    1850:	cf 92       	push	r12
    1852:	df 92       	push	r13
    1854:	ef 92       	push	r14
    1856:	ff 92       	push	r15
    1858:	0f 93       	push	r16
    185a:	1f 93       	push	r17
    185c:	cf 93       	push	r28
    185e:	df 93       	push	r29
    1860:	cd b7       	in	r28, 0x3d	; 61
    1862:	de b7       	in	r29, 0x3e	; 62
    1864:	64 97       	sbiw	r28, 0x14	; 20
    1866:	0f b6       	in	r0, 0x3f	; 63
    1868:	f8 94       	cli
    186a:	de bf       	out	0x3e, r29	; 62
    186c:	0f be       	out	0x3f, r0	; 63
    186e:	cd bf       	out	0x3d, r28	; 61
    1870:	1b 01       	movw	r2, r22

	for(int i = 0; i < maxBrightness; i++){//ramp up loop
    1872:	16 16       	cp	r1, r22
    1874:	17 06       	cpc	r1, r23
    1876:	0c f0       	brlt	.+2      	; 0x187a <effect_pulse_b+0x3e>
    1878:	42 c1       	rjmp	.+644    	; 0x1afe <effect_pulse_b+0x2c2>

void calcBrightness(uint32_t *color, uint8_t _brightness){
	uint32_t buf = 0;
	uint32_t colorb = 0;

	buf = (((*color>>8*3)	& 0x000000FF) * _brightness) / 255;
    187a:	65 2f       	mov	r22, r21
    187c:	77 27       	eor	r23, r23
    187e:	88 27       	eor	r24, r24
    1880:	99 27       	eor	r25, r25
    1882:	6b 83       	std	Y+3, r22	; 0x03
    1884:	7c 83       	std	Y+4, r23	; 0x04
    1886:	8d 83       	std	Y+5, r24	; 0x05
    1888:	9e 83       	std	Y+6, r25	; 0x06
	colorb |= (buf<<8*3);

	buf = (((*color>>8*2)	& 0x000000FF) * _brightness) / 255;
    188a:	84 2f       	mov	r24, r20
    188c:	90 e0       	ldi	r25, 0x00	; 0
    188e:	a0 e0       	ldi	r26, 0x00	; 0
    1890:	b0 e0       	ldi	r27, 0x00	; 0
    1892:	8f 83       	std	Y+7, r24	; 0x07
    1894:	98 87       	std	Y+8, r25	; 0x08
    1896:	a9 87       	std	Y+9, r26	; 0x09
    1898:	ba 87       	std	Y+10, r27	; 0x0a
	colorb |= (buf<<8*2);

	buf = (((*color>>8*1)	& 0x000000FF) * _brightness) / 255;
    189a:	63 2f       	mov	r22, r19
    189c:	70 e0       	ldi	r23, 0x00	; 0
    189e:	80 e0       	ldi	r24, 0x00	; 0
    18a0:	90 e0       	ldi	r25, 0x00	; 0
    18a2:	6b 87       	std	Y+11, r22	; 0x0b
    18a4:	7c 87       	std	Y+12, r23	; 0x0c
    18a6:	8d 87       	std	Y+13, r24	; 0x0d
    18a8:	9e 87       	std	Y+14, r25	; 0x0e
    18aa:	1a 82       	std	Y+2, r1	; 0x02
    18ac:	19 82       	std	Y+1, r1	; 0x01
    18ae:	da 01       	movw	r26, r20
    18b0:	c9 01       	movw	r24, r18
    18b2:	99 27       	eor	r25, r25
    18b4:	aa 27       	eor	r26, r26
    18b6:	bb 27       	eor	r27, r27
    18b8:	8f 87       	std	Y+15, r24	; 0x0f
    18ba:	98 8b       	std	Y+16, r25	; 0x10
    18bc:	a9 8b       	std	Y+17, r26	; 0x11
    18be:	ba 8b       	std	Y+18, r27	; 0x12
	colorb |= (buf<<8*1);

	buf = (( *color			& 0x000000FF) * _brightness) / 255;
	colorb |= (buf);
    18c0:	81 2c       	mov	r8, r1
    18c2:	91 2c       	mov	r9, r1
    18c4:	54 01       	movw	r10, r8
    18c6:	8a 94       	dec	r8
void setRGBW_clear(){
	setRGBW_all(0);
}

void setRGBW_Brightness(uint8_t bright){
	brightness = bright;
    18c8:	99 81       	ldd	r25, Y+1	; 0x01
    18ca:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <brightness>
    18ce:	a0 91 04 01 	lds	r26, 0x0104	; 0x800104 <exLow>
    18d2:	b0 91 05 01 	lds	r27, 0x0105	; 0x800105 <exLow+0x1>
    18d6:	bc 8b       	std	Y+20, r27	; 0x14
    18d8:	ab 8b       	std	Y+19, r26	; 0x13
uint16_t exLow = -1;
uint16_t exHigh = -1;

void setRGBW_pixel(uint16_t pixel, uint32_t color){

	if (pixel < exLow || pixel >= exHigh)
    18da:	00 91 02 01 	lds	r16, 0x0102	; 0x800102 <exHigh>
    18de:	10 91 03 01 	lds	r17, 0x0103	; 0x800103 <exHigh+0x1>

void calcBrightness(uint32_t *color, uint8_t _brightness){
	uint32_t buf = 0;
	uint32_t colorb = 0;

	buf = (((*color>>8*3)	& 0x000000FF) * _brightness) / 255;
    18e2:	c9 2e       	mov	r12, r25
    18e4:	d1 2c       	mov	r13, r1
    18e6:	e1 2c       	mov	r14, r1
    18e8:	f1 2c       	mov	r15, r1

	buf = (((*color>>8*1)	& 0x000000FF) * _brightness) / 255;
	colorb |= (buf<<8*1);

	buf = (( *color			& 0x000000FF) * _brightness) / 255;
	colorb |= (buf);
    18ea:	2b 81       	ldd	r18, Y+3	; 0x03
    18ec:	3c 81       	ldd	r19, Y+4	; 0x04
    18ee:	4d 81       	ldd	r20, Y+5	; 0x05
    18f0:	5e 81       	ldd	r21, Y+6	; 0x06
    18f2:	c7 01       	movw	r24, r14
    18f4:	b6 01       	movw	r22, r12
    18f6:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <__mulsi3>
    18fa:	a5 01       	movw	r20, r10
    18fc:	94 01       	movw	r18, r8
    18fe:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <__udivmodsi4>
    1902:	72 2e       	mov	r7, r18
    1904:	66 24       	eor	r6, r6
    1906:	55 24       	eor	r5, r5
    1908:	44 24       	eor	r4, r4
    190a:	a7 01       	movw	r20, r14
    190c:	96 01       	movw	r18, r12
    190e:	6f 85       	ldd	r22, Y+15	; 0x0f
    1910:	78 89       	ldd	r23, Y+16	; 0x10
    1912:	89 89       	ldd	r24, Y+17	; 0x11
    1914:	9a 89       	ldd	r25, Y+18	; 0x12
    1916:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <__mulsi3>
    191a:	a5 01       	movw	r20, r10
    191c:	94 01       	movw	r18, r8
    191e:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <__udivmodsi4>
    1922:	42 2a       	or	r4, r18
    1924:	53 2a       	or	r5, r19
    1926:	64 2a       	or	r6, r20
    1928:	75 2a       	or	r7, r21
    192a:	a7 01       	movw	r20, r14
    192c:	96 01       	movw	r18, r12
    192e:	6f 81       	ldd	r22, Y+7	; 0x07
    1930:	78 85       	ldd	r23, Y+8	; 0x08
    1932:	89 85       	ldd	r24, Y+9	; 0x09
    1934:	9a 85       	ldd	r25, Y+10	; 0x0a
    1936:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <__mulsi3>
    193a:	a5 01       	movw	r20, r10
    193c:	94 01       	movw	r18, r8
    193e:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <__udivmodsi4>
    1942:	d9 01       	movw	r26, r18
    1944:	99 27       	eor	r25, r25
    1946:	88 27       	eor	r24, r24
    1948:	48 2a       	or	r4, r24
    194a:	59 2a       	or	r5, r25
    194c:	6a 2a       	or	r6, r26
    194e:	7b 2a       	or	r7, r27
    1950:	a7 01       	movw	r20, r14
    1952:	96 01       	movw	r18, r12
    1954:	6b 85       	ldd	r22, Y+11	; 0x0b
    1956:	7c 85       	ldd	r23, Y+12	; 0x0c
    1958:	8d 85       	ldd	r24, Y+13	; 0x0d
    195a:	9e 85       	ldd	r25, Y+14	; 0x0e
    195c:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <__mulsi3>
    1960:	a5 01       	movw	r20, r10
    1962:	94 01       	movw	r18, r8
    1964:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <__udivmodsi4>
    1968:	b4 2f       	mov	r27, r20
    196a:	a3 2f       	mov	r26, r19
    196c:	92 2f       	mov	r25, r18
    196e:	88 27       	eor	r24, r24
    1970:	48 2a       	or	r4, r24
    1972:	59 2a       	or	r5, r25
    1974:	6a 2a       	or	r6, r26
    1976:	7b 2a       	or	r7, r27

	if (pixel < exLow || pixel >= exHigh)
	{
		calcBrightness(&color, brightness);
		led[pixel].r = (uint8_t)((color>>8*3)	& 0x000000FF);
		led[pixel].g = (uint8_t)((color>>8*2)	& 0x000000FF);
    1978:	a3 01       	movw	r20, r6
		led[pixel].b = (uint8_t)((color>>8*1)	& 0x000000FF);
    197a:	35 2d       	mov	r19, r5
		led[pixel].w = (uint8_t)( color			& 0x000000FF);
    197c:	e6 e2       	ldi	r30, 0x26	; 38
    197e:	f1 e0       	ldi	r31, 0x01	; 1
	exLow = low;
	exHigh = high;
}

void setRGBW_all(uint32_t color){
	for (int i = 0; i < LEDpixelcount; i++)
    1980:	80 e0       	ldi	r24, 0x00	; 0
    1982:	90 e0       	ldi	r25, 0x00	; 0
    1984:	09 c0       	rjmp	.+18     	; 0x1998 <effect_pulse_b+0x15c>
		led[pixel].r = (uint8_t)((color>>8*3)	& 0x000000FF);
		led[pixel].g = (uint8_t)((color>>8*2)	& 0x000000FF);
		led[pixel].b = (uint8_t)((color>>8*1)	& 0x000000FF);
		led[pixel].w = (uint8_t)( color			& 0x000000FF);
	}else{
		led[pixel].r = 0;
    1986:	11 82       	std	Z+1, r1	; 0x01
		led[pixel].g = 0;
    1988:	10 82       	st	Z, r1
		led[pixel].b = 0;
    198a:	12 82       	std	Z+2, r1	; 0x02
		led[pixel].w = 0;
    198c:	13 82       	std	Z+3, r1	; 0x03
	exLow = low;
	exHigh = high;
}

void setRGBW_all(uint32_t color){
	for (int i = 0; i < LEDpixelcount; i++)
    198e:	01 96       	adiw	r24, 0x01	; 1
    1990:	34 96       	adiw	r30, 0x04	; 4
    1992:	84 3b       	cpi	r24, 0xB4	; 180
    1994:	91 05       	cpc	r25, r1
    1996:	89 f0       	breq	.+34     	; 0x19ba <effect_pulse_b+0x17e>
uint16_t exLow = -1;
uint16_t exHigh = -1;

void setRGBW_pixel(uint16_t pixel, uint32_t color){

	if (pixel < exLow || pixel >= exHigh)
    1998:	6b 89       	ldd	r22, Y+19	; 0x13
    199a:	7c 89       	ldd	r23, Y+20	; 0x14
    199c:	86 17       	cp	r24, r22
    199e:	97 07       	cpc	r25, r23
    19a0:	18 f0       	brcs	.+6      	; 0x19a8 <effect_pulse_b+0x16c>
    19a2:	80 17       	cp	r24, r16
    19a4:	91 07       	cpc	r25, r17
    19a6:	78 f3       	brcs	.-34     	; 0x1986 <effect_pulse_b+0x14a>
	{
		calcBrightness(&color, brightness);
		led[pixel].r = (uint8_t)((color>>8*3)	& 0x000000FF);
    19a8:	51 83       	std	Z+1, r21	; 0x01
		led[pixel].g = (uint8_t)((color>>8*2)	& 0x000000FF);
    19aa:	40 83       	st	Z, r20
		led[pixel].b = (uint8_t)((color>>8*1)	& 0x000000FF);
    19ac:	32 83       	std	Z+2, r19	; 0x02
		led[pixel].w = (uint8_t)( color			& 0x000000FF);
    19ae:	43 82       	std	Z+3, r4	; 0x03
	exLow = low;
	exHigh = high;
}

void setRGBW_all(uint32_t color){
	for (int i = 0; i < LEDpixelcount; i++)
    19b0:	01 96       	adiw	r24, 0x01	; 1
    19b2:	34 96       	adiw	r30, 0x04	; 4
    19b4:	84 3b       	cpi	r24, 0xB4	; 180
    19b6:	91 05       	cpc	r25, r1
    19b8:	79 f7       	brne	.-34     	; 0x1998 <effect_pulse_b+0x15c>

	*color = colorb;//update the color with the new brightness value calculated
}

void RGBW_send(){
		ws2812_setleds_rgbw(led, LEDpixelcount);//send the frame with size of pixelcount to update the strip
    19ba:	64 eb       	ldi	r22, 0xB4	; 180
    19bc:	70 e0       	ldi	r23, 0x00	; 0
    19be:	86 e2       	ldi	r24, 0x26	; 38
    19c0:	91 e0       	ldi	r25, 0x01	; 1
    19c2:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <ws2812_setleds_rgbw>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    19c6:	8f e9       	ldi	r24, 0x9F	; 159
    19c8:	9f e0       	ldi	r25, 0x0F	; 15
    19ca:	01 97       	sbiw	r24, 0x01	; 1
    19cc:	f1 f7       	brne	.-4      	; 0x19ca <effect_pulse_b+0x18e>
    19ce:	00 c0       	rjmp	.+0      	; 0x19d0 <effect_pulse_b+0x194>
    19d0:	00 00       	nop

*/

void effect_pulse_b(int delay, int maxBrightness, uint32_t color){

	for(int i = 0; i < maxBrightness; i++){//ramp up loop
    19d2:	a9 81       	ldd	r26, Y+1	; 0x01
    19d4:	ba 81       	ldd	r27, Y+2	; 0x02
    19d6:	11 96       	adiw	r26, 0x01	; 1
    19d8:	ba 83       	std	Y+2, r27	; 0x02
    19da:	a9 83       	std	Y+1, r26	; 0x01
    19dc:	2a 16       	cp	r2, r26
    19de:	3b 06       	cpc	r3, r27
    19e0:	09 f0       	breq	.+2      	; 0x19e4 <effect_pulse_b+0x1a8>
    19e2:	72 cf       	rjmp	.-284    	; 0x18c8 <effect_pulse_b+0x8c>

	buf = (((*color>>8*1)	& 0x000000FF) * _brightness) / 255;
	colorb |= (buf<<8*1);

	buf = (( *color			& 0x000000FF) * _brightness) / 255;
	colorb |= (buf);
    19e4:	81 2c       	mov	r8, r1
    19e6:	91 2c       	mov	r9, r1
    19e8:	54 01       	movw	r10, r8
    19ea:	8a 94       	dec	r8
void setRGBW_clear(){
	setRGBW_all(0);
}

void setRGBW_Brightness(uint8_t bright){
	brightness = bright;
    19ec:	20 92 06 01 	sts	0x0106, r2	; 0x800106 <brightness>
    19f0:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <exLow>
    19f4:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <exLow+0x1>
    19f8:	7a 83       	std	Y+2, r23	; 0x02
    19fa:	69 83       	std	Y+1, r22	; 0x01
uint16_t exLow = -1;
uint16_t exHigh = -1;

void setRGBW_pixel(uint16_t pixel, uint32_t color){

	if (pixel < exLow || pixel >= exHigh)
    19fc:	00 91 02 01 	lds	r16, 0x0102	; 0x800102 <exHigh>
    1a00:	10 91 03 01 	lds	r17, 0x0103	; 0x800103 <exHigh+0x1>

void calcBrightness(uint32_t *color, uint8_t _brightness){
	uint32_t buf = 0;
	uint32_t colorb = 0;

	buf = (((*color>>8*3)	& 0x000000FF) * _brightness) / 255;
    1a04:	c2 2c       	mov	r12, r2
    1a06:	d1 2c       	mov	r13, r1
    1a08:	e1 2c       	mov	r14, r1
    1a0a:	f1 2c       	mov	r15, r1

	buf = (((*color>>8*1)	& 0x000000FF) * _brightness) / 255;
	colorb |= (buf<<8*1);

	buf = (( *color			& 0x000000FF) * _brightness) / 255;
	colorb |= (buf);
    1a0c:	2b 81       	ldd	r18, Y+3	; 0x03
    1a0e:	3c 81       	ldd	r19, Y+4	; 0x04
    1a10:	4d 81       	ldd	r20, Y+5	; 0x05
    1a12:	5e 81       	ldd	r21, Y+6	; 0x06
    1a14:	c7 01       	movw	r24, r14
    1a16:	b6 01       	movw	r22, r12
    1a18:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <__mulsi3>
    1a1c:	a5 01       	movw	r20, r10
    1a1e:	94 01       	movw	r18, r8
    1a20:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <__udivmodsi4>
    1a24:	72 2e       	mov	r7, r18
    1a26:	66 24       	eor	r6, r6
    1a28:	55 24       	eor	r5, r5
    1a2a:	44 24       	eor	r4, r4
    1a2c:	2f 85       	ldd	r18, Y+15	; 0x0f
    1a2e:	38 89       	ldd	r19, Y+16	; 0x10
    1a30:	49 89       	ldd	r20, Y+17	; 0x11
    1a32:	5a 89       	ldd	r21, Y+18	; 0x12
    1a34:	c7 01       	movw	r24, r14
    1a36:	b6 01       	movw	r22, r12
    1a38:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <__mulsi3>
    1a3c:	a5 01       	movw	r20, r10
    1a3e:	94 01       	movw	r18, r8
    1a40:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <__udivmodsi4>
    1a44:	42 2a       	or	r4, r18
    1a46:	53 2a       	or	r5, r19
    1a48:	64 2a       	or	r6, r20
    1a4a:	75 2a       	or	r7, r21
    1a4c:	2f 81       	ldd	r18, Y+7	; 0x07
    1a4e:	38 85       	ldd	r19, Y+8	; 0x08
    1a50:	49 85       	ldd	r20, Y+9	; 0x09
    1a52:	5a 85       	ldd	r21, Y+10	; 0x0a
    1a54:	c7 01       	movw	r24, r14
    1a56:	b6 01       	movw	r22, r12
    1a58:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <__mulsi3>
    1a5c:	a5 01       	movw	r20, r10
    1a5e:	94 01       	movw	r18, r8
    1a60:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <__udivmodsi4>
    1a64:	d9 01       	movw	r26, r18
    1a66:	99 27       	eor	r25, r25
    1a68:	88 27       	eor	r24, r24
    1a6a:	48 2a       	or	r4, r24
    1a6c:	59 2a       	or	r5, r25
    1a6e:	6a 2a       	or	r6, r26
    1a70:	7b 2a       	or	r7, r27
    1a72:	2b 85       	ldd	r18, Y+11	; 0x0b
    1a74:	3c 85       	ldd	r19, Y+12	; 0x0c
    1a76:	4d 85       	ldd	r20, Y+13	; 0x0d
    1a78:	5e 85       	ldd	r21, Y+14	; 0x0e
    1a7a:	c7 01       	movw	r24, r14
    1a7c:	b6 01       	movw	r22, r12
    1a7e:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <__mulsi3>
    1a82:	a5 01       	movw	r20, r10
    1a84:	94 01       	movw	r18, r8
    1a86:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <__udivmodsi4>
    1a8a:	b4 2f       	mov	r27, r20
    1a8c:	a3 2f       	mov	r26, r19
    1a8e:	92 2f       	mov	r25, r18
    1a90:	88 27       	eor	r24, r24
    1a92:	48 2a       	or	r4, r24
    1a94:	59 2a       	or	r5, r25
    1a96:	6a 2a       	or	r6, r26
    1a98:	7b 2a       	or	r7, r27

	if (pixel < exLow || pixel >= exHigh)
	{
		calcBrightness(&color, brightness);
		led[pixel].r = (uint8_t)((color>>8*3)	& 0x000000FF);
		led[pixel].g = (uint8_t)((color>>8*2)	& 0x000000FF);
    1a9a:	a3 01       	movw	r20, r6
		led[pixel].b = (uint8_t)((color>>8*1)	& 0x000000FF);
    1a9c:	35 2d       	mov	r19, r5
		led[pixel].w = (uint8_t)( color			& 0x000000FF);
    1a9e:	e6 e2       	ldi	r30, 0x26	; 38
    1aa0:	f1 e0       	ldi	r31, 0x01	; 1
	exLow = low;
	exHigh = high;
}

void setRGBW_all(uint32_t color){
	for (int i = 0; i < LEDpixelcount; i++)
    1aa2:	80 e0       	ldi	r24, 0x00	; 0
    1aa4:	90 e0       	ldi	r25, 0x00	; 0
    1aa6:	09 c0       	rjmp	.+18     	; 0x1aba <effect_pulse_b+0x27e>
		led[pixel].r = (uint8_t)((color>>8*3)	& 0x000000FF);
		led[pixel].g = (uint8_t)((color>>8*2)	& 0x000000FF);
		led[pixel].b = (uint8_t)((color>>8*1)	& 0x000000FF);
		led[pixel].w = (uint8_t)( color			& 0x000000FF);
	}else{
		led[pixel].r = 0;
    1aa8:	11 82       	std	Z+1, r1	; 0x01
		led[pixel].g = 0;
    1aaa:	10 82       	st	Z, r1
		led[pixel].b = 0;
    1aac:	12 82       	std	Z+2, r1	; 0x02
		led[pixel].w = 0;
    1aae:	13 82       	std	Z+3, r1	; 0x03
	exLow = low;
	exHigh = high;
}

void setRGBW_all(uint32_t color){
	for (int i = 0; i < LEDpixelcount; i++)
    1ab0:	01 96       	adiw	r24, 0x01	; 1
    1ab2:	34 96       	adiw	r30, 0x04	; 4
    1ab4:	84 3b       	cpi	r24, 0xB4	; 180
    1ab6:	91 05       	cpc	r25, r1
    1ab8:	89 f0       	breq	.+34     	; 0x1adc <effect_pulse_b+0x2a0>
uint16_t exLow = -1;
uint16_t exHigh = -1;

void setRGBW_pixel(uint16_t pixel, uint32_t color){

	if (pixel < exLow || pixel >= exHigh)
    1aba:	a9 81       	ldd	r26, Y+1	; 0x01
    1abc:	ba 81       	ldd	r27, Y+2	; 0x02
    1abe:	8a 17       	cp	r24, r26
    1ac0:	9b 07       	cpc	r25, r27
    1ac2:	18 f0       	brcs	.+6      	; 0x1aca <effect_pulse_b+0x28e>
    1ac4:	80 17       	cp	r24, r16
    1ac6:	91 07       	cpc	r25, r17
    1ac8:	78 f3       	brcs	.-34     	; 0x1aa8 <effect_pulse_b+0x26c>
	{
		calcBrightness(&color, brightness);
		led[pixel].r = (uint8_t)((color>>8*3)	& 0x000000FF);
    1aca:	51 83       	std	Z+1, r21	; 0x01
		led[pixel].g = (uint8_t)((color>>8*2)	& 0x000000FF);
    1acc:	40 83       	st	Z, r20
		led[pixel].b = (uint8_t)((color>>8*1)	& 0x000000FF);
    1ace:	32 83       	std	Z+2, r19	; 0x02
		led[pixel].w = (uint8_t)( color			& 0x000000FF);
    1ad0:	43 82       	std	Z+3, r4	; 0x03
	exLow = low;
	exHigh = high;
}

void setRGBW_all(uint32_t color){
	for (int i = 0; i < LEDpixelcount; i++)
    1ad2:	01 96       	adiw	r24, 0x01	; 1
    1ad4:	34 96       	adiw	r30, 0x04	; 4
    1ad6:	84 3b       	cpi	r24, 0xB4	; 180
    1ad8:	91 05       	cpc	r25, r1
    1ada:	79 f7       	brne	.-34     	; 0x1aba <effect_pulse_b+0x27e>

	*color = colorb;//update the color with the new brightness value calculated
}

void RGBW_send(){
		ws2812_setleds_rgbw(led, LEDpixelcount);//send the frame with size of pixelcount to update the strip
    1adc:	64 eb       	ldi	r22, 0xB4	; 180
    1ade:	70 e0       	ldi	r23, 0x00	; 0
    1ae0:	86 e2       	ldi	r24, 0x26	; 38
    1ae2:	91 e0       	ldi	r25, 0x01	; 1
    1ae4:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <ws2812_setleds_rgbw>
    1ae8:	8f e9       	ldi	r24, 0x9F	; 159
    1aea:	9f e0       	ldi	r25, 0x0F	; 15
    1aec:	01 97       	sbiw	r24, 0x01	; 1
    1aee:	f1 f7       	brne	.-4      	; 0x1aec <effect_pulse_b+0x2b0>
    1af0:	00 c0       	rjmp	.+0      	; 0x1af2 <effect_pulse_b+0x2b6>
    1af2:	00 00       	nop
		setRGBW_Brightness(i);
		setRGBW_all(color);
		RGBW_send();
		_delay_ms(1);
	}
	for(int i = maxBrightness; i > 0; i--){//ramp down loop
    1af4:	91 e0       	ldi	r25, 0x01	; 1
    1af6:	29 1a       	sub	r2, r25
    1af8:	31 08       	sbc	r3, r1
    1afa:	09 f0       	breq	.+2      	; 0x1afe <effect_pulse_b+0x2c2>
    1afc:	77 cf       	rjmp	.-274    	; 0x19ec <effect_pulse_b+0x1b0>
		setRGBW_Brightness(i); 
		setRGBW_all(color);	
		RGBW_send();
		_delay_ms(1);	
	}	
}
    1afe:	64 96       	adiw	r28, 0x14	; 20
    1b00:	0f b6       	in	r0, 0x3f	; 63
    1b02:	f8 94       	cli
    1b04:	de bf       	out	0x3e, r29	; 62
    1b06:	0f be       	out	0x3f, r0	; 63
    1b08:	cd bf       	out	0x3d, r28	; 61
    1b0a:	df 91       	pop	r29
    1b0c:	cf 91       	pop	r28
    1b0e:	1f 91       	pop	r17
    1b10:	0f 91       	pop	r16
    1b12:	ff 90       	pop	r15
    1b14:	ef 90       	pop	r14
    1b16:	df 90       	pop	r13
    1b18:	cf 90       	pop	r12
    1b1a:	bf 90       	pop	r11
    1b1c:	af 90       	pop	r10
    1b1e:	9f 90       	pop	r9
    1b20:	8f 90       	pop	r8
    1b22:	7f 90       	pop	r7
    1b24:	6f 90       	pop	r6
    1b26:	5f 90       	pop	r5
    1b28:	4f 90       	pop	r4
    1b2a:	3f 90       	pop	r3
    1b2c:	2f 90       	pop	r2
    1b2e:	08 95       	ret

00001b30 <__vector_14>:
#include <avr/interrupt.h>

uint16_t time_ms = 0; //variable for keeping track of time

//interrupt
ISR(TIMER0_COMPA_vect){
    1b30:	1f 92       	push	r1
    1b32:	0f 92       	push	r0
    1b34:	0f b6       	in	r0, 0x3f	; 63
    1b36:	0f 92       	push	r0
    1b38:	11 24       	eor	r1, r1
    1b3a:	2f 93       	push	r18
    1b3c:	8f 93       	push	r24
    1b3e:	9f 93       	push	r25
	if (time_ms > 60000){
    1b40:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <time_ms>
    1b44:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <time_ms+0x1>
    1b48:	81 36       	cpi	r24, 0x61	; 97
    1b4a:	2a ee       	ldi	r18, 0xEA	; 234
    1b4c:	92 07       	cpc	r25, r18
    1b4e:	70 f0       	brcs	.+28     	; 0x1b6c <__vector_14+0x3c>
    1b50:	81 e0       	ldi	r24, 0x01	; 1
    1b52:	90 e0       	ldi	r25, 0x00	; 0
		time_ms = 0;
	}
	
		time_ms++;	
    1b54:	90 93 1c 01 	sts	0x011C, r25	; 0x80011c <time_ms+0x1>
    1b58:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <time_ms>
}
    1b5c:	9f 91       	pop	r25
    1b5e:	8f 91       	pop	r24
    1b60:	2f 91       	pop	r18
    1b62:	0f 90       	pop	r0
    1b64:	0f be       	out	0x3f, r0	; 63
    1b66:	0f 90       	pop	r0
    1b68:	1f 90       	pop	r1
    1b6a:	18 95       	reti
    1b6c:	01 96       	adiw	r24, 0x01	; 1
    1b6e:	f2 cf       	rjmp	.-28     	; 0x1b54 <__vector_14+0x24>

00001b70 <init_timer0>:

void init_timer0(void){
	TCCR0B |= (1<<CS01)|(1<<CS00);//set prescaler to /64
    1b70:	85 b5       	in	r24, 0x25	; 37
    1b72:	83 60       	ori	r24, 0x03	; 3
    1b74:	85 bd       	out	0x25, r24	; 37
	OCR0A = 235;
    1b76:	8b ee       	ldi	r24, 0xEB	; 235
    1b78:	87 bd       	out	0x27, r24	; 39
	TIMSK0 |= (1<<OCIE0A);//enable ocr0A match interrupt
    1b7a:	ee e6       	ldi	r30, 0x6E	; 110
    1b7c:	f0 e0       	ldi	r31, 0x00	; 0
    1b7e:	80 81       	ld	r24, Z
    1b80:	82 60       	ori	r24, 0x02	; 2
    1b82:	80 83       	st	Z, r24
	TCCR0A |= (1<<WGM01);//clear timer on ocr0A match
    1b84:	84 b5       	in	r24, 0x24	; 36
    1b86:	82 60       	ori	r24, 0x02	; 2
    1b88:	84 bd       	out	0x24, r24	; 36
    1b8a:	08 95       	ret

00001b8c <ws2812_setleds_rgbw>:
}

// Setleds for SK6812RGBW
void inline ws2812_setleds_rgbw(struct cRGBW *ledarray, uint16_t leds)
{
  ws2812_sendarray_mask((uint8_t*)ledarray,leds<<2,_BV(ws2812_pin));
    1b8c:	66 0f       	add	r22, r22
    1b8e:	77 1f       	adc	r23, r23
    1b90:	66 0f       	add	r22, r22
    1b92:	77 1f       	adc	r23, r23
void inline ws2812_sendarray_mask(uint8_t *data,uint16_t datlen,uint8_t maskhi)
{
  uint8_t curbyte,ctr,masklo;
  uint8_t sreg_prev;
  
  ws2812_DDRREG |= maskhi; // Enable output
    1b94:	3d 9a       	sbi	0x07, 5	; 7
  
  masklo	=~maskhi&ws2812_PORTREG;
    1b96:	28 b1       	in	r18, 0x08	; 8
    1b98:	2f 7d       	andi	r18, 0xDF	; 223
  maskhi |=        ws2812_PORTREG;
    1b9a:	38 b1       	in	r19, 0x08	; 8
    1b9c:	30 62       	ori	r19, 0x20	; 32
  
  sreg_prev=SREG;
    1b9e:	4f b7       	in	r20, 0x3f	; 63
#ifdef interrupt_is_disabled
  cli();  
    1ba0:	f8 94       	cli
#endif  

  while (datlen--) {
    1ba2:	61 15       	cp	r22, r1
    1ba4:	71 05       	cpc	r23, r1
    1ba6:	b1 f0       	breq	.+44     	; 0x1bd4 <loop222+0x22>
    1ba8:	fc 01       	movw	r30, r24
    1baa:	68 0f       	add	r22, r24
    1bac:	79 1f       	adc	r23, r25
    curbyte=*data++;
    1bae:	81 91       	ld	r24, Z+
    
    asm volatile(
    1bb0:	98 e0       	ldi	r25, 0x08	; 8

00001bb2 <loop222>:
    1bb2:	38 b9       	out	0x08, r19	; 8
    1bb4:	00 00       	nop
    1bb6:	07 f4       	brid	.+0      	; 0x1bb8 <loop222+0x6>
    1bb8:	87 ff       	sbrs	r24, 7
    1bba:	28 b9       	out	0x08, r18	; 8
    1bbc:	88 0f       	add	r24, r24
    1bbe:	00 00       	nop
    1bc0:	07 f4       	brid	.+0      	; 0x1bc2 <loop222+0x10>
    1bc2:	07 f4       	brid	.+0      	; 0x1bc4 <loop222+0x12>
    1bc4:	07 f4       	brid	.+0      	; 0x1bc6 <loop222+0x14>
    1bc6:	28 b9       	out	0x08, r18	; 8
    1bc8:	07 f4       	brid	.+0      	; 0x1bca <loop222+0x18>
    1bca:	9a 95       	dec	r25
    1bcc:	91 f7       	brne	.-28     	; 0x1bb2 <loop222>
  sreg_prev=SREG;
#ifdef interrupt_is_disabled
  cli();  
#endif  

  while (datlen--) {
    1bce:	e6 17       	cp	r30, r22
    1bd0:	f7 07       	cpc	r31, r23
    1bd2:	69 f7       	brne	.-38     	; 0x1bae <ws2812_setleds_rgbw+0x22>
    :	"=&d" (ctr)
    :	"r" (curbyte), "I" (_SFR_IO_ADDR(ws2812_PORTREG)), "r" (maskhi), "r" (masklo)
    );
  }
  
  SREG=sreg_prev;
    1bd4:	4f bf       	out	0x3f, r20	; 63
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1bd6:	8f e3       	ldi	r24, 0x3F	; 63
    1bd8:	91 e0       	ldi	r25, 0x01	; 1
    1bda:	01 97       	sbiw	r24, 0x01	; 1
    1bdc:	f1 f7       	brne	.-4      	; 0x1bda <loop222+0x28>
    1bde:	00 c0       	rjmp	.+0      	; 0x1be0 <loop222+0x2e>
    1be0:	00 00       	nop
    1be2:	08 95       	ret

00001be4 <main>:
event_e update();
state_e state_act(state_e state, event_e eventn);

int main(void)
{	
	systemstate_f.currentstate = S_INIT;
    1be4:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <systemstate_f+0x6>
	systemstate_f.nextstate = S_ledOFF;
    1be8:	81 e0       	ldi	r24, 0x01	; 1
    1bea:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <systemstate_f+0x7>
	
	init_timer0();
    1bee:	0e 94 b8 0d 	call	0x1b70	; 0x1b70 <init_timer0>
	setRGBW_ExBounds(0, 36);
    1bf2:	64 e2       	ldi	r22, 0x24	; 36
    1bf4:	70 e0       	ldi	r23, 0x00	; 0
    1bf6:	80 e0       	ldi	r24, 0x00	; 0
    1bf8:	90 e0       	ldi	r25, 0x00	; 0
    1bfa:	0e 94 b6 00 	call	0x16c	; 0x16c <setRGBW_ExBounds>
	//setRGBW_ExBounds(12,30);
	setRGBW_Brightness(255);
    1bfe:	8f ef       	ldi	r24, 0xFF	; 255
    1c00:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <setRGBW_Brightness>
	setRGBW_clear();
    1c04:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <setRGBW_clear>
	RGBW_send();
    1c08:	0e 94 7d 01 	call	0x2fa	; 0x2fa <RGBW_send>
	buttons_init();
    1c0c:	0e 94 5e 00 	call	0xbc	; 0xbc <buttons_init>
	knob_init();
    1c10:	0e 94 8b 00 	call	0x116	; 0x116 <knob_init>
	uint16_t knob_pos;
	uint16_t hue = 0;
	static	uint8_t	 i = 0;
	static  uint8_t  f = 0;

	sei();//enable interrupts
    1c14:	78 94       	sei
	
	systemstate_f.current_color32 = color32(255, 255, 230, 100);
    1c16:	24 e6       	ldi	r18, 0x64	; 100
    1c18:	46 ee       	ldi	r20, 0xE6	; 230
    1c1a:	6f ef       	ldi	r22, 0xFF	; 255
    1c1c:	8f ef       	ldi	r24, 0xFF	; 255
    1c1e:	0e 94 9f 02 	call	0x53e	; 0x53e <color32>
    1c22:	60 93 1f 01 	sts	0x011F, r22	; 0x80011f <systemstate_f+0x2>
    1c26:	70 93 20 01 	sts	0x0120, r23	; 0x800120 <systemstate_f+0x3>
    1c2a:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <systemstate_f+0x4>
    1c2e:	90 93 22 01 	sts	0x0122, r25	; 0x800122 <systemstate_f+0x5>
/************************************************************************/
/* control part that needs to be integrated in real system later		*/
/************************************************************************/
event_e update(){
	if(buttonflag.button0){
		systemstate_f.strip_on ^= 1;		
    1c32:	d1 e0       	ldi	r29, 0x01	; 1
		systemstate_f.currentstate = S_EFFECT_ON;
    1c34:	c4 e0       	ldi	r28, 0x04	; 4
/************************************************************************/
/* control part that needs to be integrated in real system later		*/
/************************************************************************/
		
		//check adc need update later
		knob_pos = knob_getPos(KNOB0_SHIFT);
    1c36:	83 e0       	ldi	r24, 0x03	; 3
    1c38:	0e 94 9e 00 	call	0x13c	; 0x13c <knob_getPos>
		//mapui(knob_pos, 0, 1024, 0 , 65535);
		
		systemstate_f.current_color32 = ColorHSV((uint16_t)knob_pos*64, 255, 255, 0);
    1c3c:	20 e0       	ldi	r18, 0x00	; 0
    1c3e:	4f ef       	ldi	r20, 0xFF	; 255
    1c40:	6f ef       	ldi	r22, 0xFF	; 255
    1c42:	00 24       	eor	r0, r0
    1c44:	96 95       	lsr	r25
    1c46:	87 95       	ror	r24
    1c48:	07 94       	ror	r0
    1c4a:	96 95       	lsr	r25
    1c4c:	87 95       	ror	r24
    1c4e:	07 94       	ror	r0
    1c50:	98 2f       	mov	r25, r24
    1c52:	80 2d       	mov	r24, r0
    1c54:	0e 94 83 01 	call	0x306	; 0x306 <ColorHSV>
    1c58:	60 93 1f 01 	sts	0x011F, r22	; 0x80011f <systemstate_f+0x2>
    1c5c:	70 93 20 01 	sts	0x0120, r23	; 0x800120 <systemstate_f+0x3>
    1c60:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <systemstate_f+0x4>
    1c64:	90 93 22 01 	sts	0x0122, r25	; 0x800122 <systemstate_f+0x5>
				
		//state
		systemstate_f.currentstate = systemstate_f.nextstate; //update currrentstate 
    1c68:	20 91 24 01 	lds	r18, 0x0124	; 0x800124 <systemstate_f+0x7>
    1c6c:	20 93 23 01 	sts	0x0123, r18	; 0x800123 <systemstate_f+0x6>

/************************************************************************/
/* control part that needs to be integrated in real system later		*/
/************************************************************************/
event_e update(){
	if(buttonflag.button0){
    1c70:	30 91 08 01 	lds	r19, 0x0108	; 0x800108 <__data_end>
    1c74:	33 23       	and	r19, r19
    1c76:	61 f0       	breq	.+24     	; 0x1c90 <main+0xac>
		systemstate_f.strip_on ^= 1;		
    1c78:	20 91 1d 01 	lds	r18, 0x011D	; 0x80011d <systemstate_f>
    1c7c:	2d 27       	eor	r18, r29
    1c7e:	20 93 1d 01 	sts	0x011D, r18	; 0x80011d <systemstate_f>
		systemstate_f.currentstate = S_EFFECT_ON;
    1c82:	c0 93 23 01 	sts	0x0123, r28	; 0x800123 <systemstate_f+0x6>
		systemstate_f.current_ef = EF_NO;
    1c86:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <systemstate_f+0x1>
		buttonflag.button0 = 0;
    1c8a:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__data_end>
    1c8e:	24 e0       	ldi	r18, 0x04	; 4
	}
	if(buttonflag.button1){
    1c90:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <__data_end+0x1>
    1c94:	33 23       	and	r19, r19
    1c96:	31 f1       	breq	.+76     	; 0x1ce4 <main+0x100>
		systemstate_f.strip_on = 1;
    1c98:	d0 93 1d 01 	sts	0x011D, r29	; 0x80011d <systemstate_f>
		systemstate_f.currentstate = S_EFFECT_ON;
    1c9c:	c0 93 23 01 	sts	0x0123, r28	; 0x800123 <systemstate_f+0x6>
		
		if(systemstate_f.current_ef < EF_amountn) systemstate_f.current_ef += 1;//go through the list of effects
    1ca0:	e0 91 1e 01 	lds	r30, 0x011E	; 0x80011e <systemstate_f+0x1>
    1ca4:	e5 30       	cpi	r30, 0x05	; 5
    1ca6:	e0 f5       	brcc	.+120    	; 0x1d20 <main+0x13c>
    1ca8:	ef 5f       	subi	r30, 0xFF	; 255
    1caa:	e0 93 1e 01 	sts	0x011E, r30	; 0x80011e <systemstate_f+0x1>
		else systemstate_f.current_ef = 0;
		
		buttonflag.button1 = 0;
    1cae:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <__data_end+0x1>
	}
	if(buttonflag.button2){
    1cb2:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <__data_end+0x2>
    1cb6:	22 23       	and	r18, r18
    1cb8:	09 f4       	brne	.+2      	; 0x1cbc <main+0xd8>
    1cba:	45 c0       	rjmp	.+138    	; 0x1d46 <main+0x162>
    1cbc:	31 e0       	ldi	r19, 0x01	; 1
    1cbe:	24 e0       	ldi	r18, 0x04	; 4

		buttonflag.button2 = 0;
    1cc0:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <__data_end+0x2>
}

state_e state_act(state_e state, event_e eventn){
	state_e nxtstate = 0;
	
	if (!systemstate_f.strip_on) state = nxtstate = S_ledOFF;
    1cc4:	31 11       	cpse	r19, r1
    1cc6:	16 c0       	rjmp	.+44     	; 0x1cf4 <main+0x110>
	
	switch(state){
	case S_ledOFF:
		setRGBW_clear();
    1cc8:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <setRGBW_clear>
		RGBW_send();
    1ccc:	0e 94 7d 01 	call	0x2fa	; 0x2fa <RGBW_send>
		if (systemstate_f.strip_on) nxtstate = S_EFFECT_ON;
    1cd0:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <systemstate_f>
    1cd4:	88 23       	and	r24, r24
    1cd6:	21 f0       	breq	.+8      	; 0x1ce0 <main+0xfc>
	//eq code
		nxtstate = S_EQ_ON;
		break;
		
	case S_EFFECT_ON:	//effect types
		switch (systemstate_f.current_ef){
    1cd8:	84 e0       	ldi	r24, 0x04	; 4
		systemstate_f.current_color32 = ColorHSV((uint16_t)knob_pos*64, 255, 255, 0);
				
		//state
		systemstate_f.currentstate = systemstate_f.nextstate; //update currrentstate 
		update();
		systemstate_f.nextstate = state_act(systemstate_f.currentstate, systemstate_f.currentevent);//do actions
    1cda:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <systemstate_f+0x7>
// 		}
		
//		recursiveFlowHue(10, 51);
		//effect_pulse(0, 255, color32(0, 255, 255, 50))
//		effect_pulse_nb(0, 255, color32(255, 255, 255, 255));
	}	
    1cde:	ab cf       	rjmp	.-170    	; 0x1c36 <main+0x52>
	switch(state){
	case S_ledOFF:
		setRGBW_clear();
		RGBW_send();
		if (systemstate_f.strip_on) nxtstate = S_EFFECT_ON;
		else nxtstate = S_ledOFF;
    1ce0:	81 e0       	ldi	r24, 0x01	; 1
    1ce2:	fb cf       	rjmp	.-10     	; 0x1cda <main+0xf6>
		if(systemstate_f.current_ef < EF_amountn) systemstate_f.current_ef += 1;//go through the list of effects
		else systemstate_f.current_ef = 0;
		
		buttonflag.button1 = 0;
	}
	if(buttonflag.button2){
    1ce4:	30 91 0a 01 	lds	r19, 0x010A	; 0x80010a <__data_end+0x2>
    1ce8:	31 11       	cpse	r19, r1
    1cea:	28 c0       	rjmp	.+80     	; 0x1d3c <main+0x158>
    1cec:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <systemstate_f>
}

state_e state_act(state_e state, event_e eventn){
	state_e nxtstate = 0;
	
	if (!systemstate_f.strip_on) state = nxtstate = S_ledOFF;
    1cf0:	33 23       	and	r19, r19
    1cf2:	51 f3       	breq	.-44     	; 0x1cc8 <main+0xe4>
	
	switch(state){
    1cf4:	22 30       	cpi	r18, 0x02	; 2
    1cf6:	09 f4       	brne	.+2      	; 0x1cfa <main+0x116>
    1cf8:	7b c0       	rjmp	.+246    	; 0x1df0 <main+0x20c>
    1cfa:	08 f4       	brcc	.+2      	; 0x1cfe <main+0x11a>
    1cfc:	74 c0       	rjmp	.+232    	; 0x1de6 <main+0x202>
    1cfe:	24 30       	cpi	r18, 0x04	; 4
    1d00:	01 f1       	breq	.+64     	; 0x1d42 <main+0x15e>
    1d02:	25 30       	cpi	r18, 0x05	; 5
    1d04:	09 f0       	breq	.+2      	; 0x1d08 <main+0x124>
    1d06:	72 c0       	rjmp	.+228    	; 0x1dec <main+0x208>
		nxtstate = S_EFFECT_ON;
		break;
	
	case S_ledERR:
	//effect code
		setRGBW_all(color32(10,0,0,0));
    1d08:	20 e0       	ldi	r18, 0x00	; 0
    1d0a:	40 e0       	ldi	r20, 0x00	; 0
    1d0c:	60 e0       	ldi	r22, 0x00	; 0
    1d0e:	8a e0       	ldi	r24, 0x0A	; 10
    1d10:	0e 94 9f 02 	call	0x53e	; 0x53e <color32>
    1d14:	0e 94 bf 00 	call	0x17e	; 0x17e <setRGBW_all>
		RGBW_send();
    1d18:	0e 94 7d 01 	call	0x2fa	; 0x2fa <RGBW_send>
		nxtstate = S_ledERR;
    1d1c:	85 e0       	ldi	r24, 0x05	; 5
    1d1e:	dd cf       	rjmp	.-70     	; 0x1cda <main+0xf6>
	if(buttonflag.button1){
		systemstate_f.strip_on = 1;
		systemstate_f.currentstate = S_EFFECT_ON;
		
		if(systemstate_f.current_ef < EF_amountn) systemstate_f.current_ef += 1;//go through the list of effects
		else systemstate_f.current_ef = 0;
    1d20:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <systemstate_f+0x1>
		
		buttonflag.button1 = 0;
    1d24:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <__data_end+0x1>
	}
	if(buttonflag.button2){
    1d28:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <__data_end+0x2>
    1d2c:	21 11       	cpse	r18, r1
    1d2e:	c6 cf       	rjmp	.-116    	; 0x1cbc <main+0xd8>
		switch (systemstate_f.current_ef){
/************************************************************************/
/* add test code										                */
/************************************************************************/		
			case EF_NO:
				setRGBW_all(systemstate_f.current_color32);
    1d30:	0e 94 bf 00 	call	0x17e	; 0x17e <setRGBW_all>
				RGBW_send();
    1d34:	0e 94 7d 01 	call	0x2fa	; 0x2fa <RGBW_send>
    1d38:	84 e0       	ldi	r24, 0x04	; 4
    1d3a:	cf cf       	rjmp	.-98     	; 0x1cda <main+0xf6>
    1d3c:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <systemstate_f>
    1d40:	bf cf       	rjmp	.-130    	; 0x1cc0 <main+0xdc>
    1d42:	e0 91 1e 01 	lds	r30, 0x011E	; 0x80011e <systemstate_f+0x1>
	//eq code
		nxtstate = S_EQ_ON;
		break;
		
	case S_EFFECT_ON:	//effect types
		switch (systemstate_f.current_ef){
    1d46:	0e 2f       	mov	r16, r30
    1d48:	10 e0       	ldi	r17, 0x00	; 0
    1d4a:	0b 30       	cpi	r16, 0x0B	; 11
    1d4c:	11 05       	cpc	r17, r1
    1d4e:	20 f6       	brcc	.-120    	; 0x1cd8 <main+0xf4>
    1d50:	f8 01       	movw	r30, r16
    1d52:	ec 5c       	subi	r30, 0xCC	; 204
    1d54:	ff 4f       	sbci	r31, 0xFF	; 255
    1d56:	0c 94 2c 0f 	jmp	0x1e58	; 0x1e58 <__tablejump2__>
			case EF_snakeGrowHue_nb:
				effect_snakeGrowHue_nb(5,50);
				break;
			
			case EF_snakeGrow_b:
				effect_snakeGrow_b(10, systemstate_f.current_color32);
    1d5a:	ab 01       	movw	r20, r22
    1d5c:	bc 01       	movw	r22, r24
    1d5e:	8a e0       	ldi	r24, 0x0A	; 10
    1d60:	90 e0       	ldi	r25, 0x00	; 0
    1d62:	0e 94 c9 03 	call	0x792	; 0x792 <effect_snakeGrow_b>
    1d66:	84 e0       	ldi	r24, 0x04	; 4
    1d68:	b8 cf       	rjmp	.-144    	; 0x1cda <main+0xf6>
			case EF_chase_b:
				effect_chase_b(systemstate_f.current_color32);
				break;
			
			case EF_snakeGrowHue_b:
				effect_snakeGrowHue_b(5,5);
    1d6a:	65 e0       	ldi	r22, 0x05	; 5
    1d6c:	70 e0       	ldi	r23, 0x00	; 0
    1d6e:	85 e0       	ldi	r24, 0x05	; 5
    1d70:	90 e0       	ldi	r25, 0x00	; 0
    1d72:	0e 94 ff 06 	call	0xdfe	; 0xdfe <effect_snakeGrowHue_b>
    1d76:	84 e0       	ldi	r24, 0x04	; 4
    1d78:	b0 cf       	rjmp	.-160    	; 0x1cda <main+0xf6>
			case EF_snakeBounce_nb:
				effect_snakeBounce_nb(70, systemstate_f.current_color32);
				break;
			
			case EF_chase_b:
				effect_chase_b(systemstate_f.current_color32);
    1d7a:	0e 94 30 0b 	call	0x1660	; 0x1660 <effect_chase_b>
    1d7e:	84 e0       	ldi	r24, 0x04	; 4
    1d80:	ac cf       	rjmp	.-168    	; 0x1cda <main+0xf6>
			case EF_snake_nb:
				effect_snake_nb(10, systemstate_f.current_color32);
				break;

			case EF_snakeBounce_b:
				effect_snakeBounce_b(10, systemstate_f.current_color32);
    1d82:	ab 01       	movw	r20, r22
    1d84:	bc 01       	movw	r22, r24
    1d86:	8a e0       	ldi	r24, 0x0A	; 10
    1d88:	90 e0       	ldi	r25, 0x00	; 0
    1d8a:	0e 94 bb 07 	call	0xf76	; 0xf76 <effect_snakeBounce_b>
    1d8e:	84 e0       	ldi	r24, 0x04	; 4
    1d90:	a4 cf       	rjmp	.-184    	; 0x1cda <main+0xf6>
			case EF_snakeGrow_nb:
				effect_snakeGrow_nb(10, systemstate_f.current_color32);
				break;
			
			case EF_pulse_b:
				effect_pulse_b(10, 255, systemstate_f.current_color32);
    1d92:	9b 01       	movw	r18, r22
    1d94:	ac 01       	movw	r20, r24
    1d96:	6f ef       	ldi	r22, 0xFF	; 255
    1d98:	70 e0       	ldi	r23, 0x00	; 0
    1d9a:	8a e0       	ldi	r24, 0x0A	; 10
    1d9c:	90 e0       	ldi	r25, 0x00	; 0
    1d9e:	0e 94 1e 0c 	call	0x183c	; 0x183c <effect_pulse_b>
    1da2:	84 e0       	ldi	r24, 0x04	; 4
    1da4:	9a cf       	rjmp	.-204    	; 0x1cda <main+0xf6>
			case EF_snakeGrow_b:
				effect_snakeGrow_b(10, systemstate_f.current_color32);
				break;
			
			case EF_snakeGrow_nb:
				effect_snakeGrow_nb(10, systemstate_f.current_color32);
    1da6:	ab 01       	movw	r20, r22
    1da8:	bc 01       	movw	r22, r24
    1daa:	8a e0       	ldi	r24, 0x0A	; 10
    1dac:	90 e0       	ldi	r25, 0x00	; 0
    1dae:	0e 94 b1 02 	call	0x562	; 0x562 <effect_snakeGrow_nb>
    1db2:	84 e0       	ldi	r24, 0x04	; 4
    1db4:	92 cf       	rjmp	.-220    	; 0x1cda <main+0xf6>
			case EF_snakeGrowHue_b:
				effect_snakeGrowHue_b(5,5);
				break;
			
			case EF_snakeGrowHue_nb:
				effect_snakeGrowHue_nb(5,50);
    1db6:	62 e3       	ldi	r22, 0x32	; 50
    1db8:	70 e0       	ldi	r23, 0x00	; 0
    1dba:	85 e0       	ldi	r24, 0x05	; 5
    1dbc:	90 e0       	ldi	r25, 0x00	; 0
    1dbe:	0e 94 43 06 	call	0xc86	; 0xc86 <effect_snakeGrowHue_nb>
    1dc2:	84 e0       	ldi	r24, 0x04	; 4
    1dc4:	8a cf       	rjmp	.-236    	; 0x1cda <main+0xf6>
			case EF_snakeBounce_b:
				effect_snakeBounce_b(10, systemstate_f.current_color32);
				break;
			
			case EF_snakeBounce_nb:
				effect_snakeBounce_nb(70, systemstate_f.current_color32);
    1dc6:	ab 01       	movw	r20, r22
    1dc8:	bc 01       	movw	r22, r24
    1dca:	86 e4       	ldi	r24, 0x46	; 70
    1dcc:	90 e0       	ldi	r25, 0x00	; 0
    1dce:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <effect_snakeBounce_nb>
    1dd2:	84 e0       	ldi	r24, 0x04	; 4
    1dd4:	82 cf       	rjmp	.-252    	; 0x1cda <main+0xf6>
				break;
/************************************************************************/
/* end test code										                */
/************************************************************************/
			case EF_snake_nb:
				effect_snake_nb(10, systemstate_f.current_color32);
    1dd6:	ab 01       	movw	r20, r22
    1dd8:	bc 01       	movw	r22, r24
    1dda:	8a e0       	ldi	r24, 0x0A	; 10
    1ddc:	90 e0       	ldi	r25, 0x00	; 0
    1dde:	0e 94 2e 05 	call	0xa5c	; 0xa5c <effect_snake_nb>
    1de2:	84 e0       	ldi	r24, 0x04	; 4
    1de4:	7a cf       	rjmp	.-268    	; 0x1cda <main+0xf6>
state_e state_act(state_e state, event_e eventn){
	state_e nxtstate = 0;
	
	if (!systemstate_f.strip_on) state = nxtstate = S_ledOFF;
	
	switch(state){
    1de6:	21 30       	cpi	r18, 0x01	; 1
    1de8:	09 f4       	brne	.+2      	; 0x1dec <main+0x208>
    1dea:	6e cf       	rjmp	.-292    	; 0x1cc8 <main+0xe4>
		nxtstate = S_ledERR;
		break;
	
	default:
	//error
		nxtstate = S_ledERR;
    1dec:	85 e0       	ldi	r24, 0x05	; 5
    1dee:	75 cf       	rjmp	.-278    	; 0x1cda <main+0xf6>
		else nxtstate = S_ledOFF;
		break;
		
	case S_EQ_ON:
	//eq code
		nxtstate = S_EQ_ON;
    1df0:	82 e0       	ldi	r24, 0x02	; 2
    1df2:	73 cf       	rjmp	.-282    	; 0x1cda <main+0xf6>

00001df4 <__mulsi3>:
    1df4:	db 01       	movw	r26, r22
    1df6:	8f 93       	push	r24
    1df8:	9f 93       	push	r25
    1dfa:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <__muluhisi3>
    1dfe:	bf 91       	pop	r27
    1e00:	af 91       	pop	r26
    1e02:	a2 9f       	mul	r26, r18
    1e04:	80 0d       	add	r24, r0
    1e06:	91 1d       	adc	r25, r1
    1e08:	a3 9f       	mul	r26, r19
    1e0a:	90 0d       	add	r25, r0
    1e0c:	b2 9f       	mul	r27, r18
    1e0e:	90 0d       	add	r25, r0
    1e10:	11 24       	eor	r1, r1
    1e12:	08 95       	ret

00001e14 <__udivmodsi4>:
    1e14:	a1 e2       	ldi	r26, 0x21	; 33
    1e16:	1a 2e       	mov	r1, r26
    1e18:	aa 1b       	sub	r26, r26
    1e1a:	bb 1b       	sub	r27, r27
    1e1c:	fd 01       	movw	r30, r26
    1e1e:	0d c0       	rjmp	.+26     	; 0x1e3a <__udivmodsi4_ep>

00001e20 <__udivmodsi4_loop>:
    1e20:	aa 1f       	adc	r26, r26
    1e22:	bb 1f       	adc	r27, r27
    1e24:	ee 1f       	adc	r30, r30
    1e26:	ff 1f       	adc	r31, r31
    1e28:	a2 17       	cp	r26, r18
    1e2a:	b3 07       	cpc	r27, r19
    1e2c:	e4 07       	cpc	r30, r20
    1e2e:	f5 07       	cpc	r31, r21
    1e30:	20 f0       	brcs	.+8      	; 0x1e3a <__udivmodsi4_ep>
    1e32:	a2 1b       	sub	r26, r18
    1e34:	b3 0b       	sbc	r27, r19
    1e36:	e4 0b       	sbc	r30, r20
    1e38:	f5 0b       	sbc	r31, r21

00001e3a <__udivmodsi4_ep>:
    1e3a:	66 1f       	adc	r22, r22
    1e3c:	77 1f       	adc	r23, r23
    1e3e:	88 1f       	adc	r24, r24
    1e40:	99 1f       	adc	r25, r25
    1e42:	1a 94       	dec	r1
    1e44:	69 f7       	brne	.-38     	; 0x1e20 <__udivmodsi4_loop>
    1e46:	60 95       	com	r22
    1e48:	70 95       	com	r23
    1e4a:	80 95       	com	r24
    1e4c:	90 95       	com	r25
    1e4e:	9b 01       	movw	r18, r22
    1e50:	ac 01       	movw	r20, r24
    1e52:	bd 01       	movw	r22, r26
    1e54:	cf 01       	movw	r24, r30
    1e56:	08 95       	ret

00001e58 <__tablejump2__>:
    1e58:	ee 0f       	add	r30, r30
    1e5a:	ff 1f       	adc	r31, r31
    1e5c:	05 90       	lpm	r0, Z+
    1e5e:	f4 91       	lpm	r31, Z
    1e60:	e0 2d       	mov	r30, r0
    1e62:	09 94       	ijmp

00001e64 <__umulhisi3>:
    1e64:	a2 9f       	mul	r26, r18
    1e66:	b0 01       	movw	r22, r0
    1e68:	b3 9f       	mul	r27, r19
    1e6a:	c0 01       	movw	r24, r0
    1e6c:	a3 9f       	mul	r26, r19
    1e6e:	70 0d       	add	r23, r0
    1e70:	81 1d       	adc	r24, r1
    1e72:	11 24       	eor	r1, r1
    1e74:	91 1d       	adc	r25, r1
    1e76:	b2 9f       	mul	r27, r18
    1e78:	70 0d       	add	r23, r0
    1e7a:	81 1d       	adc	r24, r1
    1e7c:	11 24       	eor	r1, r1
    1e7e:	91 1d       	adc	r25, r1
    1e80:	08 95       	ret

00001e82 <__usmulhisi3>:
    1e82:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <__umulhisi3>

00001e86 <__usmulhisi3_tail>:
    1e86:	b7 ff       	sbrs	r27, 7
    1e88:	08 95       	ret
    1e8a:	82 1b       	sub	r24, r18
    1e8c:	93 0b       	sbc	r25, r19
    1e8e:	08 95       	ret

00001e90 <__muluhisi3>:
    1e90:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <__umulhisi3>
    1e94:	a5 9f       	mul	r26, r21
    1e96:	90 0d       	add	r25, r0
    1e98:	b4 9f       	mul	r27, r20
    1e9a:	90 0d       	add	r25, r0
    1e9c:	a4 9f       	mul	r26, r20
    1e9e:	80 0d       	add	r24, r0
    1ea0:	91 1d       	adc	r25, r1
    1ea2:	11 24       	eor	r1, r1
    1ea4:	08 95       	ret

00001ea6 <_exit>:
    1ea6:	f8 94       	cli

00001ea8 <__stop_program>:
    1ea8:	ff cf       	rjmp	.-2      	; 0x1ea8 <__stop_program>
