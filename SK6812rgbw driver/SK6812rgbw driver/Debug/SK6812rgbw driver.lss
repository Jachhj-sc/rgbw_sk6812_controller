
SK6812rgbw driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  00000478  0000050c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000478  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002d6  00800106  00800106  00000512  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000512  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000544  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000178  00000000  00000000  00000584  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001ef7  00000000  00000000  000006fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c67  00000000  00000000  000025f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001007  00000000  00000000  0000325a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004fc  00000000  00000000  00004264  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000766  00000000  00000000  00004760  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001e90  00000000  00000000  00004ec6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000168  00000000  00000000  00006d56  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 77 01 	jmp	0x2ee	; 0x2ee <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e7       	ldi	r30, 0x78	; 120
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 30       	cpi	r26, 0x06	; 6
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	23 e0       	ldi	r18, 0x03	; 3
  8c:	a6 e0       	ldi	r26, 0x06	; 6
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ac 3d       	cpi	r26, 0xDC	; 220
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <main>
  9e:	0c 94 3a 02 	jmp	0x474	; 0x474 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <setRGBW_Brightness>:
	uint32_t v1 =   1 + val; // 1 to 256; allows >>8 instead of /255
	uint16_t s1 =   1 + sat; // 1 to 256; same reason
	uint8_t  s2 = 255 - sat; // 255 to 0
	uint32_t rgb = (((((((r * s1) >> 8) + s2) * v1) & 0xff00) << 8) | (((((g * s1) >> 8) + s2) * v1) & 0xff00) | ( ((((b * s1) >> 8) + s2) * v1) >> 8));
	return ((rgb << 8)| whiteness);
}
  a6:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <brightness>
  aa:	08 95       	ret

000000ac <calcBrightness>:
  ac:	4f 92       	push	r4
  ae:	5f 92       	push	r5
  b0:	6f 92       	push	r6
  b2:	7f 92       	push	r7
  b4:	8f 92       	push	r8
  b6:	9f 92       	push	r9
  b8:	af 92       	push	r10
  ba:	bf 92       	push	r11
  bc:	cf 92       	push	r12
  be:	df 92       	push	r13
  c0:	ef 92       	push	r14
  c2:	ff 92       	push	r15
  c4:	cf 93       	push	r28
  c6:	df 93       	push	r29
  c8:	00 d0       	rcall	.+0      	; 0xca <calcBrightness+0x1e>
  ca:	00 d0       	rcall	.+0      	; 0xcc <calcBrightness+0x20>
  cc:	00 d0       	rcall	.+0      	; 0xce <calcBrightness+0x22>
  ce:	cd b7       	in	r28, 0x3d	; 61
  d0:	de b7       	in	r29, 0x3e	; 62
  d2:	9e 83       	std	Y+6, r25	; 0x06
  d4:	8d 83       	std	Y+5, r24	; 0x05
  d6:	dc 01       	movw	r26, r24
  d8:	4d 90       	ld	r4, X+
  da:	5d 90       	ld	r5, X+
  dc:	6d 90       	ld	r6, X+
  de:	7c 90       	ld	r7, X
  e0:	27 2d       	mov	r18, r7
  e2:	33 27       	eor	r19, r19
  e4:	44 27       	eor	r20, r20
  e6:	55 27       	eor	r21, r21
  e8:	86 2f       	mov	r24, r22
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	a0 e0       	ldi	r26, 0x00	; 0
  ee:	b0 e0       	ldi	r27, 0x00	; 0
  f0:	89 83       	std	Y+1, r24	; 0x01
  f2:	9a 83       	std	Y+2, r25	; 0x02
  f4:	ab 83       	std	Y+3, r26	; 0x03
  f6:	bc 83       	std	Y+4, r27	; 0x04
  f8:	bc 01       	movw	r22, r24
  fa:	cd 01       	movw	r24, r26
  fc:	0e 94 ee 01 	call	0x3dc	; 0x3dc <__mulsi3>
 100:	2f ef       	ldi	r18, 0xFF	; 255
 102:	30 e0       	ldi	r19, 0x00	; 0
 104:	40 e0       	ldi	r20, 0x00	; 0
 106:	50 e0       	ldi	r21, 0x00	; 0
 108:	0e 94 fe 01 	call	0x3fc	; 0x3fc <__udivmodsi4>
 10c:	f2 2e       	mov	r15, r18
 10e:	ee 24       	eor	r14, r14
 110:	dd 24       	eor	r13, r13
 112:	cc 24       	eor	r12, r12
 114:	a6 2d       	mov	r26, r6
 116:	b0 e0       	ldi	r27, 0x00	; 0
 118:	29 81       	ldd	r18, Y+1	; 0x01
 11a:	3a 81       	ldd	r19, Y+2	; 0x02
 11c:	4b 81       	ldd	r20, Y+3	; 0x03
 11e:	5c 81       	ldd	r21, Y+4	; 0x04
 120:	0e 94 2f 02 	call	0x45e	; 0x45e <__muluhisi3>
 124:	2f ef       	ldi	r18, 0xFF	; 255
 126:	30 e0       	ldi	r19, 0x00	; 0
 128:	40 e0       	ldi	r20, 0x00	; 0
 12a:	50 e0       	ldi	r21, 0x00	; 0
 12c:	0e 94 fe 01 	call	0x3fc	; 0x3fc <__udivmodsi4>
 130:	59 01       	movw	r10, r18
 132:	99 24       	eor	r9, r9
 134:	88 24       	eor	r8, r8
 136:	8c 28       	or	r8, r12
 138:	9d 28       	or	r9, r13
 13a:	ae 28       	or	r10, r14
 13c:	bf 28       	or	r11, r15
 13e:	a5 2d       	mov	r26, r5
 140:	b0 e0       	ldi	r27, 0x00	; 0
 142:	29 81       	ldd	r18, Y+1	; 0x01
 144:	3a 81       	ldd	r19, Y+2	; 0x02
 146:	4b 81       	ldd	r20, Y+3	; 0x03
 148:	5c 81       	ldd	r21, Y+4	; 0x04
 14a:	0e 94 2f 02 	call	0x45e	; 0x45e <__muluhisi3>
 14e:	2f ef       	ldi	r18, 0xFF	; 255
 150:	30 e0       	ldi	r19, 0x00	; 0
 152:	40 e0       	ldi	r20, 0x00	; 0
 154:	50 e0       	ldi	r21, 0x00	; 0
 156:	0e 94 fe 01 	call	0x3fc	; 0x3fc <__udivmodsi4>
 15a:	b4 2f       	mov	r27, r20
 15c:	a3 2f       	mov	r26, r19
 15e:	92 2f       	mov	r25, r18
 160:	88 27       	eor	r24, r24
 162:	88 2a       	or	r8, r24
 164:	99 2a       	or	r9, r25
 166:	aa 2a       	or	r10, r26
 168:	bb 2a       	or	r11, r27
 16a:	a4 2d       	mov	r26, r4
 16c:	b0 e0       	ldi	r27, 0x00	; 0
 16e:	29 81       	ldd	r18, Y+1	; 0x01
 170:	3a 81       	ldd	r19, Y+2	; 0x02
 172:	4b 81       	ldd	r20, Y+3	; 0x03
 174:	5c 81       	ldd	r21, Y+4	; 0x04
 176:	0e 94 2f 02 	call	0x45e	; 0x45e <__muluhisi3>
 17a:	2f ef       	ldi	r18, 0xFF	; 255
 17c:	30 e0       	ldi	r19, 0x00	; 0
 17e:	40 e0       	ldi	r20, 0x00	; 0
 180:	50 e0       	ldi	r21, 0x00	; 0
 182:	0e 94 fe 01 	call	0x3fc	; 0x3fc <__udivmodsi4>
 186:	82 2a       	or	r8, r18
 188:	93 2a       	or	r9, r19
 18a:	a4 2a       	or	r10, r20
 18c:	b5 2a       	or	r11, r21
 18e:	ad 81       	ldd	r26, Y+5	; 0x05
 190:	be 81       	ldd	r27, Y+6	; 0x06
 192:	8d 92       	st	X+, r8
 194:	9d 92       	st	X+, r9
 196:	ad 92       	st	X+, r10
 198:	bc 92       	st	X, r11
 19a:	13 97       	sbiw	r26, 0x03	; 3
 19c:	26 96       	adiw	r28, 0x06	; 6
 19e:	0f b6       	in	r0, 0x3f	; 63
 1a0:	f8 94       	cli
 1a2:	de bf       	out	0x3e, r29	; 62
 1a4:	0f be       	out	0x3f, r0	; 63
 1a6:	cd bf       	out	0x3d, r28	; 61
 1a8:	df 91       	pop	r29
 1aa:	cf 91       	pop	r28
 1ac:	ff 90       	pop	r15
 1ae:	ef 90       	pop	r14
 1b0:	df 90       	pop	r13
 1b2:	cf 90       	pop	r12
 1b4:	bf 90       	pop	r11
 1b6:	af 90       	pop	r10
 1b8:	9f 90       	pop	r9
 1ba:	8f 90       	pop	r8
 1bc:	7f 90       	pop	r7
 1be:	6f 90       	pop	r6
 1c0:	5f 90       	pop	r5
 1c2:	4f 90       	pop	r4
 1c4:	08 95       	ret

000001c6 <setRGBW_pixel>:
 1c6:	0f 93       	push	r16
 1c8:	1f 93       	push	r17
 1ca:	cf 93       	push	r28
 1cc:	df 93       	push	r29
 1ce:	00 d0       	rcall	.+0      	; 0x1d0 <setRGBW_pixel+0xa>
 1d0:	00 d0       	rcall	.+0      	; 0x1d2 <setRGBW_pixel+0xc>
 1d2:	cd b7       	in	r28, 0x3d	; 61
 1d4:	de b7       	in	r29, 0x3e	; 62
 1d6:	49 83       	std	Y+1, r20	; 0x01
 1d8:	5a 83       	std	Y+2, r21	; 0x02
 1da:	6b 83       	std	Y+3, r22	; 0x03
 1dc:	7c 83       	std	Y+4, r23	; 0x04
 1de:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <exLow>
 1e2:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <exLow+0x1>
 1e6:	82 17       	cp	r24, r18
 1e8:	93 07       	cpc	r25, r19
 1ea:	38 f0       	brcs	.+14     	; 0x1fa <setRGBW_pixel+0x34>
 1ec:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1f0:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1f4:	82 17       	cp	r24, r18
 1f6:	93 07       	cpc	r25, r19
 1f8:	c0 f0       	brcs	.+48     	; 0x22a <setRGBW_pixel+0x64>
 1fa:	8c 01       	movw	r16, r24
 1fc:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <brightness>
 200:	ce 01       	movw	r24, r28
 202:	01 96       	adiw	r24, 0x01	; 1
 204:	0e 94 56 00 	call	0xac	; 0xac <calcBrightness>
 208:	29 81       	ldd	r18, Y+1	; 0x01
 20a:	3a 81       	ldd	r19, Y+2	; 0x02
 20c:	4b 81       	ldd	r20, Y+3	; 0x03
 20e:	5c 81       	ldd	r21, Y+4	; 0x04
 210:	c8 01       	movw	r24, r16
 212:	88 0f       	add	r24, r24
 214:	99 1f       	adc	r25, r25
 216:	88 0f       	add	r24, r24
 218:	99 1f       	adc	r25, r25
 21a:	fc 01       	movw	r30, r24
 21c:	e8 5f       	subi	r30, 0xF8	; 248
 21e:	fe 4f       	sbci	r31, 0xFE	; 254
 220:	51 83       	std	Z+1, r21	; 0x01
 222:	40 83       	st	Z, r20
 224:	32 83       	std	Z+2, r19	; 0x02
 226:	23 83       	std	Z+3, r18	; 0x03
 228:	0b c0       	rjmp	.+22     	; 0x240 <setRGBW_pixel+0x7a>
 22a:	88 0f       	add	r24, r24
 22c:	99 1f       	adc	r25, r25
 22e:	88 0f       	add	r24, r24
 230:	99 1f       	adc	r25, r25
 232:	fc 01       	movw	r30, r24
 234:	e8 5f       	subi	r30, 0xF8	; 248
 236:	fe 4f       	sbci	r31, 0xFE	; 254
 238:	11 82       	std	Z+1, r1	; 0x01
 23a:	10 82       	st	Z, r1
 23c:	12 82       	std	Z+2, r1	; 0x02
 23e:	13 82       	std	Z+3, r1	; 0x03
 240:	0f 90       	pop	r0
 242:	0f 90       	pop	r0
 244:	0f 90       	pop	r0
 246:	0f 90       	pop	r0
 248:	df 91       	pop	r29
 24a:	cf 91       	pop	r28
 24c:	1f 91       	pop	r17
 24e:	0f 91       	pop	r16
 250:	08 95       	ret

00000252 <setRGBW_all>:
 252:	cf 92       	push	r12
 254:	df 92       	push	r13
 256:	ef 92       	push	r14
 258:	ff 92       	push	r15
 25a:	cf 93       	push	r28
 25c:	df 93       	push	r29
 25e:	6b 01       	movw	r12, r22
 260:	7c 01       	movw	r14, r24
 262:	c0 e0       	ldi	r28, 0x00	; 0
 264:	d0 e0       	ldi	r29, 0x00	; 0
 266:	06 c0       	rjmp	.+12     	; 0x274 <setRGBW_all+0x22>
 268:	b7 01       	movw	r22, r14
 26a:	a6 01       	movw	r20, r12
 26c:	ce 01       	movw	r24, r28
 26e:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <setRGBW_pixel>
 272:	21 96       	adiw	r28, 0x01	; 1
 274:	c4 3b       	cpi	r28, 0xB4	; 180
 276:	d1 05       	cpc	r29, r1
 278:	bc f3       	brlt	.-18     	; 0x268 <setRGBW_all+0x16>
 27a:	df 91       	pop	r29
 27c:	cf 91       	pop	r28
 27e:	ff 90       	pop	r15
 280:	ef 90       	pop	r14
 282:	df 90       	pop	r13
 284:	cf 90       	pop	r12
 286:	08 95       	ret

00000288 <setRGBW_clear>:
 288:	60 e0       	ldi	r22, 0x00	; 0
 28a:	70 e0       	ldi	r23, 0x00	; 0
 28c:	cb 01       	movw	r24, r22
 28e:	0e 94 29 01 	call	0x252	; 0x252 <setRGBW_all>
 292:	08 95       	ret

00000294 <RGBW_send>:
 294:	64 eb       	ldi	r22, 0xB4	; 180
 296:	70 e0       	ldi	r23, 0x00	; 0
 298:	88 e0       	ldi	r24, 0x08	; 8
 29a:	91 e0       	ldi	r25, 0x01	; 1
 29c:	0e 94 a9 01 	call	0x352	; 0x352 <ws2812_setleds_rgbw>
 2a0:	08 95       	ret

000002a2 <color32>:

uint32_t color32(uint8_t r, uint8_t g, uint8_t b, uint8_t w){
 2a2:	0f 93       	push	r16
 2a4:	1f 93       	push	r17
 2a6:	e2 2f       	mov	r30, r18
	uint32_t color_32 = 0;
	color_32 |= ((uint32_t)r<<8*3)|((uint32_t)g<<8*2)|((uint32_t)b<<8)|(w); //pack the rgbw value in a 32 bit value 
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	a0 e0       	ldi	r26, 0x00	; 0
 2ac:	b0 e0       	ldi	r27, 0x00	; 0
 2ae:	b8 2f       	mov	r27, r24
 2b0:	aa 27       	eor	r26, r26
 2b2:	99 27       	eor	r25, r25
 2b4:	88 27       	eor	r24, r24
 2b6:	06 2f       	mov	r16, r22
 2b8:	10 e0       	ldi	r17, 0x00	; 0
 2ba:	20 e0       	ldi	r18, 0x00	; 0
 2bc:	30 e0       	ldi	r19, 0x00	; 0
 2be:	98 01       	movw	r18, r16
 2c0:	11 27       	eor	r17, r17
 2c2:	00 27       	eor	r16, r16
 2c4:	80 2b       	or	r24, r16
 2c6:	91 2b       	or	r25, r17
 2c8:	a2 2b       	or	r26, r18
 2ca:	b3 2b       	or	r27, r19
 2cc:	50 e0       	ldi	r21, 0x00	; 0
 2ce:	60 e0       	ldi	r22, 0x00	; 0
 2d0:	70 e0       	ldi	r23, 0x00	; 0
 2d2:	76 2f       	mov	r23, r22
 2d4:	65 2f       	mov	r22, r21
 2d6:	54 2f       	mov	r21, r20
 2d8:	44 27       	eor	r20, r20
 2da:	84 2b       	or	r24, r20
 2dc:	95 2b       	or	r25, r21
 2de:	a6 2b       	or	r26, r22
 2e0:	b7 2b       	or	r27, r23
 2e2:	bc 01       	movw	r22, r24
 2e4:	cd 01       	movw	r24, r26
 2e6:	6e 2b       	or	r22, r30
	return color_32;
}
 2e8:	1f 91       	pop	r17
 2ea:	0f 91       	pop	r16
 2ec:	08 95       	ret

000002ee <__vector_14>:
#include <avr/interrupt.h>

uint16_t time_ms = 0; //variable for keeping track of time

//interrupt
ISR(TIMER0_COMPA_vect){
 2ee:	1f 92       	push	r1
 2f0:	0f 92       	push	r0
 2f2:	0f b6       	in	r0, 0x3f	; 63
 2f4:	0f 92       	push	r0
 2f6:	11 24       	eor	r1, r1
 2f8:	2f 93       	push	r18
 2fa:	8f 93       	push	r24
 2fc:	9f 93       	push	r25
	if (time_ms > 60000){
 2fe:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
 302:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <__data_end+0x1>
 306:	81 36       	cpi	r24, 0x61	; 97
 308:	9a 4e       	sbci	r25, 0xEA	; 234
 30a:	20 f0       	brcs	.+8      	; 0x314 <__vector_14+0x26>
		time_ms = 0;
 30c:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <__data_end+0x1>
 310:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <__data_end>
	}
	
		time_ms++;	
 314:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
 318:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <__data_end+0x1>
 31c:	01 96       	adiw	r24, 0x01	; 1
 31e:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <__data_end+0x1>
 322:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
}
 326:	9f 91       	pop	r25
 328:	8f 91       	pop	r24
 32a:	2f 91       	pop	r18
 32c:	0f 90       	pop	r0
 32e:	0f be       	out	0x3f, r0	; 63
 330:	0f 90       	pop	r0
 332:	1f 90       	pop	r1
 334:	18 95       	reti

00000336 <init_timer0>:

void init_timer0(void){
	TCCR0B |= (1<<CS01)|(1<<CS00);//set prescaler to /64
 336:	85 b5       	in	r24, 0x25	; 37
 338:	83 60       	ori	r24, 0x03	; 3
 33a:	85 bd       	out	0x25, r24	; 37
	OCR0A = 235;
 33c:	8b ee       	ldi	r24, 0xEB	; 235
 33e:	87 bd       	out	0x27, r24	; 39
	TIMSK0 |= (1<<OCIE0A);//enable ocr0A match interrupt
 340:	ee e6       	ldi	r30, 0x6E	; 110
 342:	f0 e0       	ldi	r31, 0x00	; 0
 344:	80 81       	ld	r24, Z
 346:	82 60       	ori	r24, 0x02	; 2
 348:	80 83       	st	Z, r24
	TCCR0A |= (1<<WGM01);//clear timer on ocr0A match
 34a:	84 b5       	in	r24, 0x24	; 36
 34c:	82 60       	ori	r24, 0x02	; 2
 34e:	84 bd       	out	0x24, r24	; 36
 350:	08 95       	ret

00000352 <ws2812_setleds_rgbw>:
  _delay_us(ws2812_resettime);
}

// Setleds for SK6812RGBW
void inline ws2812_setleds_rgbw(struct cRGBW *ledarray, uint16_t leds)
{
 352:	fc 01       	movw	r30, r24
  ws2812_sendarray_mask((uint8_t*)ledarray,leds<<2,_BV(ws2812_pin));
 354:	66 0f       	add	r22, r22
 356:	77 1f       	adc	r23, r23
 358:	66 0f       	add	r22, r22
 35a:	77 1f       	adc	r23, r23
void inline ws2812_sendarray_mask(uint8_t *data,uint16_t datlen,uint8_t maskhi)
{
  uint8_t curbyte,ctr,masklo;
  uint8_t sreg_prev;
  
  ws2812_DDRREG |= maskhi; // Enable output
 35c:	84 b1       	in	r24, 0x04	; 4
 35e:	84 60       	ori	r24, 0x04	; 4
 360:	84 b9       	out	0x04, r24	; 4
  
  masklo	=~maskhi&ws2812_PORTREG;
 362:	a5 b1       	in	r26, 0x05	; 5
 364:	ab 7f       	andi	r26, 0xFB	; 251
  maskhi |=        ws2812_PORTREG;
 366:	55 b1       	in	r21, 0x05	; 5
 368:	54 60       	ori	r21, 0x04	; 4
  
  sreg_prev=SREG;
 36a:	bf b7       	in	r27, 0x3f	; 63
#ifdef interrupt_is_disabled
  cli();  
 36c:	f8 94       	cli
 36e:	15 c0       	rjmp	.+42     	; 0x39a <loop229+0x20>
#endif  

  while (datlen--) {
    curbyte=*data++;
 370:	9f 01       	movw	r18, r30
 372:	2f 5f       	subi	r18, 0xFF	; 255
 374:	3f 4f       	sbci	r19, 0xFF	; 255
 376:	40 81       	ld	r20, Z
    
    asm volatile(
 378:	68 e0       	ldi	r22, 0x08	; 8

0000037a <loop229>:
 37a:	55 b9       	out	0x05, r21	; 5
 37c:	00 00       	nop
 37e:	07 f4       	brid	.+0      	; 0x380 <loop229+0x6>
 380:	47 ff       	sbrs	r20, 7
 382:	a5 b9       	out	0x05, r26	; 5
 384:	44 0f       	add	r20, r20
 386:	00 00       	nop
 388:	07 f4       	brid	.+0      	; 0x38a <loop229+0x10>
 38a:	07 f4       	brid	.+0      	; 0x38c <loop229+0x12>
 38c:	07 f4       	brid	.+0      	; 0x38e <loop229+0x14>
 38e:	a5 b9       	out	0x05, r26	; 5
 390:	07 f4       	brid	.+0      	; 0x392 <loop229+0x18>
 392:	6a 95       	dec	r22
 394:	91 f7       	brne	.-28     	; 0x37a <loop229>
  sreg_prev=SREG;
#ifdef interrupt_is_disabled
  cli();  
#endif  

  while (datlen--) {
 396:	bc 01       	movw	r22, r24
    curbyte=*data++;
 398:	f9 01       	movw	r30, r18
  sreg_prev=SREG;
#ifdef interrupt_is_disabled
  cli();  
#endif  

  while (datlen--) {
 39a:	cb 01       	movw	r24, r22
 39c:	01 97       	sbiw	r24, 0x01	; 1
 39e:	67 2b       	or	r22, r23
 3a0:	39 f7       	brne	.-50     	; 0x370 <ws2812_setleds_rgbw+0x1e>
    :	"=&d" (ctr)
    :	"r" (curbyte), "I" (_SFR_IO_ADDR(ws2812_PORTREG)), "r" (maskhi), "r" (masklo)
    );
  }
  
  SREG=sreg_prev;
 3a2:	bf bf       	out	0x3f, r27	; 63
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3a4:	8f ea       	ldi	r24, 0xAF	; 175
 3a6:	94 e0       	ldi	r25, 0x04	; 4
 3a8:	01 97       	sbiw	r24, 0x01	; 1
 3aa:	f1 f7       	brne	.-4      	; 0x3a8 <loop229+0x2e>
 3ac:	00 c0       	rjmp	.+0      	; 0x3ae <loop229+0x34>
 3ae:	00 00       	nop
 3b0:	08 95       	ret

000003b2 <main>:
	COLOR_PURPLE,     
};

int main(void)
{
	init_timer0();
 3b2:	0e 94 9b 01 	call	0x336	; 0x336 <init_timer0>
	
	//setRGBW_ExBounds(12,30);
	setRGBW_Brightness(255);
 3b6:	8f ef       	ldi	r24, 0xFF	; 255
 3b8:	0e 94 53 00 	call	0xa6	; 0xa6 <setRGBW_Brightness>
	setRGBW_clear();
 3bc:	0e 94 44 01 	call	0x288	; 0x288 <setRGBW_clear>
	RGBW_send();
 3c0:	0e 94 4a 01 	call	0x294	; 0x294 <RGBW_send>
	//RGBW_send();
	uint16_t hue = 0;
	static	uint8_t	 i	 = 0;
	static  uint8_t  f   = 0;

	sei();//enable interrupts
 3c4:	78 94       	sei
// 		effect_snakeBounce_nb(10, color32(50,10,10,10));



		
		setRGBW_all(color32(50,50,50,255));
 3c6:	2f ef       	ldi	r18, 0xFF	; 255
 3c8:	42 e3       	ldi	r20, 0x32	; 50
 3ca:	62 e3       	ldi	r22, 0x32	; 50
 3cc:	82 e3       	ldi	r24, 0x32	; 50
 3ce:	0e 94 51 01 	call	0x2a2	; 0x2a2 <color32>
 3d2:	0e 94 29 01 	call	0x252	; 0x252 <setRGBW_all>
		RGBW_send();
 3d6:	0e 94 4a 01 	call	0x294	; 0x294 <RGBW_send>
 3da:	f5 cf       	rjmp	.-22     	; 0x3c6 <main+0x14>

000003dc <__mulsi3>:
 3dc:	db 01       	movw	r26, r22
 3de:	8f 93       	push	r24
 3e0:	9f 93       	push	r25
 3e2:	0e 94 2f 02 	call	0x45e	; 0x45e <__muluhisi3>
 3e6:	bf 91       	pop	r27
 3e8:	af 91       	pop	r26
 3ea:	a2 9f       	mul	r26, r18
 3ec:	80 0d       	add	r24, r0
 3ee:	91 1d       	adc	r25, r1
 3f0:	a3 9f       	mul	r26, r19
 3f2:	90 0d       	add	r25, r0
 3f4:	b2 9f       	mul	r27, r18
 3f6:	90 0d       	add	r25, r0
 3f8:	11 24       	eor	r1, r1
 3fa:	08 95       	ret

000003fc <__udivmodsi4>:
 3fc:	a1 e2       	ldi	r26, 0x21	; 33
 3fe:	1a 2e       	mov	r1, r26
 400:	aa 1b       	sub	r26, r26
 402:	bb 1b       	sub	r27, r27
 404:	fd 01       	movw	r30, r26
 406:	0d c0       	rjmp	.+26     	; 0x422 <__udivmodsi4_ep>

00000408 <__udivmodsi4_loop>:
 408:	aa 1f       	adc	r26, r26
 40a:	bb 1f       	adc	r27, r27
 40c:	ee 1f       	adc	r30, r30
 40e:	ff 1f       	adc	r31, r31
 410:	a2 17       	cp	r26, r18
 412:	b3 07       	cpc	r27, r19
 414:	e4 07       	cpc	r30, r20
 416:	f5 07       	cpc	r31, r21
 418:	20 f0       	brcs	.+8      	; 0x422 <__udivmodsi4_ep>
 41a:	a2 1b       	sub	r26, r18
 41c:	b3 0b       	sbc	r27, r19
 41e:	e4 0b       	sbc	r30, r20
 420:	f5 0b       	sbc	r31, r21

00000422 <__udivmodsi4_ep>:
 422:	66 1f       	adc	r22, r22
 424:	77 1f       	adc	r23, r23
 426:	88 1f       	adc	r24, r24
 428:	99 1f       	adc	r25, r25
 42a:	1a 94       	dec	r1
 42c:	69 f7       	brne	.-38     	; 0x408 <__udivmodsi4_loop>
 42e:	60 95       	com	r22
 430:	70 95       	com	r23
 432:	80 95       	com	r24
 434:	90 95       	com	r25
 436:	9b 01       	movw	r18, r22
 438:	ac 01       	movw	r20, r24
 43a:	bd 01       	movw	r22, r26
 43c:	cf 01       	movw	r24, r30
 43e:	08 95       	ret

00000440 <__umulhisi3>:
 440:	a2 9f       	mul	r26, r18
 442:	b0 01       	movw	r22, r0
 444:	b3 9f       	mul	r27, r19
 446:	c0 01       	movw	r24, r0
 448:	a3 9f       	mul	r26, r19
 44a:	70 0d       	add	r23, r0
 44c:	81 1d       	adc	r24, r1
 44e:	11 24       	eor	r1, r1
 450:	91 1d       	adc	r25, r1
 452:	b2 9f       	mul	r27, r18
 454:	70 0d       	add	r23, r0
 456:	81 1d       	adc	r24, r1
 458:	11 24       	eor	r1, r1
 45a:	91 1d       	adc	r25, r1
 45c:	08 95       	ret

0000045e <__muluhisi3>:
 45e:	0e 94 20 02 	call	0x440	; 0x440 <__umulhisi3>
 462:	a5 9f       	mul	r26, r21
 464:	90 0d       	add	r25, r0
 466:	b4 9f       	mul	r27, r20
 468:	90 0d       	add	r25, r0
 46a:	a4 9f       	mul	r26, r20
 46c:	80 0d       	add	r24, r0
 46e:	91 1d       	adc	r25, r1
 470:	11 24       	eor	r1, r1
 472:	08 95       	ret

00000474 <_exit>:
 474:	f8 94       	cli

00000476 <__stop_program>:
 476:	ff cf       	rjmp	.-2      	; 0x476 <__stop_program>
