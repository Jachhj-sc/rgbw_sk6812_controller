
SK6812rgbw driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  00000768  000007fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000768  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002e9  00800106  00800106  00000802  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000802  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000834  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001b0  00000000  00000000  00000874  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002faa  00000000  00000000  00000a24  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f10  00000000  00000000  000039ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000019b5  00000000  00000000  000048de  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000007d8  00000000  00000000  00006294  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000954  00000000  00000000  00006a6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000466e  00000000  00000000  000073c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000630  00000000  00000000  0000ba2e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__vector_4>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 74 02 	jmp	0x4e8	; 0x4e8 <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e6       	ldi	r30, 0x68	; 104
  7c:	f7 e0       	ldi	r31, 0x07	; 7
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 30       	cpi	r26, 0x06	; 6
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	23 e0       	ldi	r18, 0x03	; 3
  8c:	a6 e0       	ldi	r26, 0x06	; 6
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	af 3e       	cpi	r26, 0xEF	; 239
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 ce 02 	call	0x59c	; 0x59c <main>
  9e:	0c 94 b2 03 	jmp	0x764	; 0x764 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <buttons_init>:

volatile sw_statusflag_t buttonflag = {0};

void buttons_init(void){
//initialize buttons
	DDRB |= (1<<PORTB5);
  a6:	25 9a       	sbi	0x04, 5	; 4
	
	DDRC &= ~(BUT0_MASK | BUT1_MASK | BUT2_MASK);
  a8:	87 b1       	in	r24, 0x07	; 7
  aa:	88 7f       	andi	r24, 0xF8	; 248
  ac:	87 b9       	out	0x07, r24	; 7
	//enable pullup
	PORTC |= BUT0_MASK | BUT1_MASK | BUT2_MASK;
  ae:	88 b1       	in	r24, 0x08	; 8
  b0:	87 60       	ori	r24, 0x07	; 7
  b2:	88 b9       	out	0x08, r24	; 8
	
	//enable interrupt
	PCICR |= (1<<PCIE1);
  b4:	e8 e6       	ldi	r30, 0x68	; 104
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	80 81       	ld	r24, Z
  ba:	82 60       	ori	r24, 0x02	; 2
  bc:	80 83       	st	Z, r24
	
	PCMSK1 |= (1<<PCINT8) | (1<<PCINT9) | (1<<PCINT10);
  be:	ec e6       	ldi	r30, 0x6C	; 108
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	80 81       	ld	r24, Z
  c4:	87 60       	ori	r24, 0x07	; 7
  c6:	80 83       	st	Z, r24
  c8:	08 95       	ret

000000ca <__vector_4>:
}

ISR(PCINT1_vect){//button interrupt, and set flag for button
  ca:	1f 92       	push	r1
  cc:	0f 92       	push	r0
  ce:	0f b6       	in	r0, 0x3f	; 63
  d0:	0f 92       	push	r0
  d2:	11 24       	eor	r1, r1
  d4:	8f 93       	push	r24
	 //check which button was pressed.
	if(!((BUT0_PIN & BUT0_MASK) == BUT0_MASK)){
  d6:	30 99       	sbic	0x06, 0	; 6
  d8:	03 c0       	rjmp	.+6      	; 0xe0 <__vector_4+0x16>
		 buttonflag.button0 = 1;//if Button on PINC0 is pressed
  da:	81 e0       	ldi	r24, 0x01	; 1
  dc:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
	}
	if(!((BUT1_PIN & BUT1_MASK) == BUT1_MASK)){ 
  e0:	31 99       	sbic	0x06, 1	; 6
  e2:	03 c0       	rjmp	.+6      	; 0xea <__vector_4+0x20>
		buttonflag.button1 = 1;
  e4:	81 e0       	ldi	r24, 0x01	; 1
  e6:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <__data_end+0x1>
	}
	if(!((BUT2_PIN & BUT2_MASK) == BUT2_MASK)){ 
  ea:	32 99       	sbic	0x06, 2	; 6
  ec:	03 c0       	rjmp	.+6      	; 0xf4 <__vector_4+0x2a>
		buttonflag.button2 = 1;
  ee:	81 e0       	ldi	r24, 0x01	; 1
  f0:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__data_end+0x2>
	}
}
  f4:	8f 91       	pop	r24
  f6:	0f 90       	pop	r0
  f8:	0f be       	out	0x3f, r0	; 63
  fa:	0f 90       	pop	r0
  fc:	1f 90       	pop	r1
  fe:	18 95       	reti

00000100 <setRGBW_ExBounds>:
	for(int len = 1; len < LEDpixelcount; len+=growSpd){
		for (int f = 0; f < LEDpixelcount; f++){//finish full animation frame
			effect_snake_nb(len, color);
		}
	}
}
 100:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <exLow+0x1>
 104:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <exLow>
 108:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
 10c:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
 110:	08 95       	ret

00000112 <setRGBW_all>:
 112:	4f 92       	push	r4
 114:	5f 92       	push	r5
 116:	6f 92       	push	r6
 118:	7f 92       	push	r7
 11a:	8f 92       	push	r8
 11c:	9f 92       	push	r9
 11e:	af 92       	push	r10
 120:	bf 92       	push	r11
 122:	cf 92       	push	r12
 124:	df 92       	push	r13
 126:	ef 92       	push	r14
 128:	ff 92       	push	r15
 12a:	0f 93       	push	r16
 12c:	1f 93       	push	r17
 12e:	cf 93       	push	r28
 130:	df 93       	push	r29
 132:	00 d0       	rcall	.+0      	; 0x134 <setRGBW_all+0x22>
 134:	00 d0       	rcall	.+0      	; 0x136 <setRGBW_all+0x24>
 136:	00 d0       	rcall	.+0      	; 0x138 <setRGBW_all+0x26>
 138:	cd b7       	in	r28, 0x3d	; 61
 13a:	de b7       	in	r29, 0x3e	; 62
 13c:	69 83       	std	Y+1, r22	; 0x01
 13e:	7a 83       	std	Y+2, r23	; 0x02
 140:	8b 83       	std	Y+3, r24	; 0x03
 142:	9c 83       	std	Y+4, r25	; 0x04
 144:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <exLow>
 148:	70 91 03 01 	lds	r23, 0x0103	; 0x800103 <exLow+0x1>
 14c:	7e 83       	std	Y+6, r23	; 0x06
 14e:	6d 83       	std	Y+5, r22	; 0x05
 150:	00 91 00 01 	lds	r16, 0x0100	; 0x800100 <__data_start>
 154:	10 91 01 01 	lds	r17, 0x0101	; 0x800101 <__data_start+0x1>
 158:	c0 90 04 01 	lds	r12, 0x0104	; 0x800104 <brightness>
 15c:	d1 2c       	mov	r13, r1
 15e:	e1 2c       	mov	r14, r1
 160:	f1 2c       	mov	r15, r1
 162:	89 81       	ldd	r24, Y+1	; 0x01
 164:	9a 81       	ldd	r25, Y+2	; 0x02
 166:	ab 81       	ldd	r26, Y+3	; 0x03
 168:	bc 81       	ldd	r27, Y+4	; 0x04
 16a:	2b 2f       	mov	r18, r27
 16c:	33 27       	eor	r19, r19
 16e:	44 27       	eor	r20, r20
 170:	55 27       	eor	r21, r21
 172:	c7 01       	movw	r24, r14
 174:	b6 01       	movw	r22, r12
 176:	0e 94 66 03 	call	0x6cc	; 0x6cc <__mulsi3>
 17a:	41 2c       	mov	r4, r1
 17c:	51 2c       	mov	r5, r1
 17e:	32 01       	movw	r6, r4
 180:	4a 94       	dec	r4
 182:	a3 01       	movw	r20, r6
 184:	92 01       	movw	r18, r4
 186:	0e 94 76 03 	call	0x6ec	; 0x6ec <__udivmodsi4>
 18a:	b2 2e       	mov	r11, r18
 18c:	aa 24       	eor	r10, r10
 18e:	99 24       	eor	r9, r9
 190:	88 24       	eor	r8, r8
 192:	99 81       	ldd	r25, Y+1	; 0x01
 194:	a9 2f       	mov	r26, r25
 196:	b0 e0       	ldi	r27, 0x00	; 0
 198:	a7 01       	movw	r20, r14
 19a:	96 01       	movw	r18, r12
 19c:	0e 94 a7 03 	call	0x74e	; 0x74e <__muluhisi3>
 1a0:	a3 01       	movw	r20, r6
 1a2:	92 01       	movw	r18, r4
 1a4:	0e 94 76 03 	call	0x6ec	; 0x6ec <__udivmodsi4>
 1a8:	82 2a       	or	r8, r18
 1aa:	93 2a       	or	r9, r19
 1ac:	a4 2a       	or	r10, r20
 1ae:	b5 2a       	or	r11, r21
 1b0:	6b 81       	ldd	r22, Y+3	; 0x03
 1b2:	a6 2f       	mov	r26, r22
 1b4:	b0 e0       	ldi	r27, 0x00	; 0
 1b6:	a7 01       	movw	r20, r14
 1b8:	96 01       	movw	r18, r12
 1ba:	0e 94 a7 03 	call	0x74e	; 0x74e <__muluhisi3>
 1be:	a3 01       	movw	r20, r6
 1c0:	92 01       	movw	r18, r4
 1c2:	0e 94 76 03 	call	0x6ec	; 0x6ec <__udivmodsi4>
 1c6:	d9 01       	movw	r26, r18
 1c8:	99 27       	eor	r25, r25
 1ca:	88 27       	eor	r24, r24
 1cc:	88 2a       	or	r8, r24
 1ce:	99 2a       	or	r9, r25
 1d0:	aa 2a       	or	r10, r26
 1d2:	bb 2a       	or	r11, r27
 1d4:	7a 81       	ldd	r23, Y+2	; 0x02
 1d6:	a7 2f       	mov	r26, r23
 1d8:	b0 e0       	ldi	r27, 0x00	; 0
 1da:	a7 01       	movw	r20, r14
 1dc:	96 01       	movw	r18, r12
 1de:	0e 94 a7 03 	call	0x74e	; 0x74e <__muluhisi3>
 1e2:	a3 01       	movw	r20, r6
 1e4:	92 01       	movw	r18, r4
 1e6:	0e 94 76 03 	call	0x6ec	; 0x6ec <__udivmodsi4>
 1ea:	b4 2f       	mov	r27, r20
 1ec:	a3 2f       	mov	r26, r19
 1ee:	92 2f       	mov	r25, r18
 1f0:	88 27       	eor	r24, r24
 1f2:	88 2a       	or	r8, r24
 1f4:	99 2a       	or	r9, r25
 1f6:	aa 2a       	or	r10, r26
 1f8:	bb 2a       	or	r11, r27
 1fa:	4b 2d       	mov	r20, r11
 1fc:	3a 2d       	mov	r19, r10
 1fe:	29 2d       	mov	r18, r9
 200:	eb e1       	ldi	r30, 0x1B	; 27
 202:	f1 e0       	ldi	r31, 0x01	; 1
 204:	80 e0       	ldi	r24, 0x00	; 0
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	09 c0       	rjmp	.+18     	; 0x21c <setRGBW_all+0x10a>
 20a:	11 82       	std	Z+1, r1	; 0x01
 20c:	10 82       	st	Z, r1
 20e:	12 82       	std	Z+2, r1	; 0x02
 210:	13 82       	std	Z+3, r1	; 0x03
 212:	01 96       	adiw	r24, 0x01	; 1
 214:	34 96       	adiw	r30, 0x04	; 4
 216:	84 3b       	cpi	r24, 0xB4	; 180
 218:	91 05       	cpc	r25, r1
 21a:	89 f0       	breq	.+34     	; 0x23e <setRGBW_all+0x12c>
 21c:	ad 81       	ldd	r26, Y+5	; 0x05
 21e:	be 81       	ldd	r27, Y+6	; 0x06
 220:	8a 17       	cp	r24, r26
 222:	9b 07       	cpc	r25, r27
 224:	18 f0       	brcs	.+6      	; 0x22c <setRGBW_all+0x11a>
 226:	80 17       	cp	r24, r16
 228:	91 07       	cpc	r25, r17
 22a:	78 f3       	brcs	.-34     	; 0x20a <setRGBW_all+0xf8>
 22c:	41 83       	std	Z+1, r20	; 0x01
 22e:	30 83       	st	Z, r19
 230:	22 83       	std	Z+2, r18	; 0x02
 232:	83 82       	std	Z+3, r8	; 0x03
 234:	01 96       	adiw	r24, 0x01	; 1
 236:	34 96       	adiw	r30, 0x04	; 4
 238:	84 3b       	cpi	r24, 0xB4	; 180
 23a:	91 05       	cpc	r25, r1
 23c:	79 f7       	brne	.-34     	; 0x21c <setRGBW_all+0x10a>
 23e:	26 96       	adiw	r28, 0x06	; 6
 240:	0f b6       	in	r0, 0x3f	; 63
 242:	f8 94       	cli
 244:	de bf       	out	0x3e, r29	; 62
 246:	0f be       	out	0x3f, r0	; 63
 248:	cd bf       	out	0x3d, r28	; 61
 24a:	df 91       	pop	r29
 24c:	cf 91       	pop	r28
 24e:	1f 91       	pop	r17
 250:	0f 91       	pop	r16
 252:	ff 90       	pop	r15
 254:	ef 90       	pop	r14
 256:	df 90       	pop	r13
 258:	cf 90       	pop	r12
 25a:	bf 90       	pop	r11
 25c:	af 90       	pop	r10
 25e:	9f 90       	pop	r9
 260:	8f 90       	pop	r8
 262:	7f 90       	pop	r7
 264:	6f 90       	pop	r6
 266:	5f 90       	pop	r5
 268:	4f 90       	pop	r4
 26a:	08 95       	ret

0000026c <setRGBW_clear>:
 26c:	eb e1       	ldi	r30, 0x1B	; 27
 26e:	f1 e0       	ldi	r31, 0x01	; 1
 270:	80 e0       	ldi	r24, 0x00	; 0
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	11 82       	std	Z+1, r1	; 0x01
 276:	10 82       	st	Z, r1
 278:	12 82       	std	Z+2, r1	; 0x02
 27a:	13 82       	std	Z+3, r1	; 0x03
 27c:	01 96       	adiw	r24, 0x01	; 1
 27e:	34 96       	adiw	r30, 0x04	; 4
 280:	84 3b       	cpi	r24, 0xB4	; 180
 282:	91 05       	cpc	r25, r1
 284:	b9 f7       	brne	.-18     	; 0x274 <setRGBW_clear+0x8>
 286:	08 95       	ret

00000288 <setRGBW_Brightness>:
 288:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <brightness>
 28c:	08 95       	ret

0000028e <RGBW_send>:
 28e:	64 eb       	ldi	r22, 0xB4	; 180
 290:	70 e0       	ldi	r23, 0x00	; 0
 292:	8b e1       	ldi	r24, 0x1B	; 27
 294:	91 e0       	ldi	r25, 0x01	; 1
 296:	0c 94 a2 02 	jmp	0x544	; 0x544 <ws2812_setleds_rgbw>

0000029a <color32>:
 29a:	0f 93       	push	r16
 29c:	1f 93       	push	r17
 29e:	96 2f       	mov	r25, r22
 2a0:	34 2f       	mov	r19, r20
 2a2:	42 2f       	mov	r20, r18
 2a4:	50 e0       	ldi	r21, 0x00	; 0
 2a6:	60 e0       	ldi	r22, 0x00	; 0
 2a8:	70 e0       	ldi	r23, 0x00	; 0
 2aa:	53 2b       	or	r21, r19
 2ac:	69 2b       	or	r22, r25
 2ae:	8a 01       	movw	r16, r20
 2b0:	9b 01       	movw	r18, r22
 2b2:	38 2b       	or	r19, r24
 2b4:	c9 01       	movw	r24, r18
 2b6:	b8 01       	movw	r22, r16
 2b8:	1f 91       	pop	r17
 2ba:	0f 91       	pop	r16
 2bc:	08 95       	ret

000002be <effect_snake_nb>:

void effect_snake_nb(int length, uint32_t color){ // make a circulating snake 
 2be:	4f 92       	push	r4
 2c0:	5f 92       	push	r5
 2c2:	6f 92       	push	r6
 2c4:	7f 92       	push	r7
 2c6:	8f 92       	push	r8
 2c8:	9f 92       	push	r9
 2ca:	af 92       	push	r10
 2cc:	bf 92       	push	r11
 2ce:	cf 92       	push	r12
 2d0:	df 92       	push	r13
 2d2:	ef 92       	push	r14
 2d4:	ff 92       	push	r15
 2d6:	cf 93       	push	r28
 2d8:	df 93       	push	r29
 2da:	00 d0       	rcall	.+0      	; 0x2dc <effect_snake_nb+0x1e>
 2dc:	00 d0       	rcall	.+0      	; 0x2de <effect_snake_nb+0x20>
 2de:	00 d0       	rcall	.+0      	; 0x2e0 <effect_snake_nb+0x22>
 2e0:	cd b7       	in	r28, 0x3d	; 61
 2e2:	de b7       	in	r29, 0x3e	; 62
 2e4:	49 83       	std	Y+1, r20	; 0x01
 2e6:	5a 83       	std	Y+2, r21	; 0x02
 2e8:	6b 83       	std	Y+3, r22	; 0x03
 2ea:	7c 83       	std	Y+4, r23	; 0x04
	static int head = 0;
	static int tail = 0;
	static int8_t state = 0;
	static int prevlen;

	if (state == 0)
 2ec:	20 91 0f 01 	lds	r18, 0x010F	; 0x80010f <state.2063>
 2f0:	21 11       	cpse	r18, r1
 2f2:	cd c0       	rjmp	.+410    	; 0x48e <__EEPROM_REGION_LENGTH__+0x8e>
	{
		tail = -length;
 2f4:	22 27       	eor	r18, r18
 2f6:	33 27       	eor	r19, r19
 2f8:	28 1b       	sub	r18, r24
 2fa:	39 0b       	sbc	r19, r25
		prevlen = length;
 2fc:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <prevlen.2064+0x1>
 300:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <prevlen.2064>
		state++;
 304:	81 e0       	ldi	r24, 0x01	; 1
 306:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <state.2063>
 30a:	40 91 09 01 	lds	r20, 0x0109	; 0x800109 <head.2061>
 30e:	50 91 0a 01 	lds	r21, 0x010A	; 0x80010a <head.2061+0x1>
 312:	5e 83       	std	Y+6, r21	; 0x06
 314:	4d 83       	std	Y+5, r20	; 0x05
uint16_t exLow = -1;
uint16_t exHigh = -1;

void setRGBW_pixel(uint16_t pixel, uint32_t color){

	if (pixel < exLow || pixel >= exHigh)
 316:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <exLow>
 31a:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <exLow+0x1>
	}else if(prevlen != length && head == prevlen){//make the snake longer when the snake is as long as the previous length and at start position
		tail = head - length;
		prevlen = length;
	}
	
	if(tail >= 0){
 31e:	37 fd       	sbrc	r19, 7
 320:	0b c0       	rjmp	.+22     	; 0x338 <effect_snake_nb+0x7a>
void setRGBW_pixel(uint16_t pixel, uint32_t color){

	if (pixel < exLow || pixel >= exHigh)
	{
		calcBrightness(&color, brightness);
		led[pixel].r = (uint8_t)((color>>8*3)	& 0x000000FF);
 322:	f9 01       	movw	r30, r18
 324:	ee 0f       	add	r30, r30
 326:	ff 1f       	adc	r31, r31
 328:	ee 0f       	add	r30, r30
 32a:	ff 1f       	adc	r31, r31
 32c:	e5 5e       	subi	r30, 0xE5	; 229
 32e:	fe 4f       	sbci	r31, 0xFE	; 254
		led[pixel].g = (uint8_t)((color>>8*2)	& 0x000000FF);
		led[pixel].b = (uint8_t)((color>>8*1)	& 0x000000FF);
		led[pixel].w = (uint8_t)( color			& 0x000000FF);
	}else{
		led[pixel].r = 0;
 330:	11 82       	std	Z+1, r1	; 0x01
		led[pixel].g = 0;
 332:	10 82       	st	Z, r1
		led[pixel].b = 0;
 334:	12 82       	std	Z+2, r1	; 0x02
		led[pixel].w = 0;
 336:	13 82       	std	Z+3, r1	; 0x03
	}
	
	if(tail >= 0){
	setRGBW_pixel(tail, 0);
	}
	tail++;
 338:	2f 5f       	subi	r18, 0xFF	; 255
 33a:	3f 4f       	sbci	r19, 0xFF	; 255
	if(tail >= LEDpixelcount){//loop for tail
 33c:	24 3b       	cpi	r18, 0xB4	; 180
 33e:	31 05       	cpc	r19, r1
 340:	0c f0       	brlt	.+2      	; 0x344 <effect_snake_nb+0x86>
 342:	a0 c0       	rjmp	.+320    	; 0x484 <__EEPROM_REGION_LENGTH__+0x84>
	}
	
	if(tail >= 0){
	setRGBW_pixel(tail, 0);
	}
	tail++;
 344:	30 93 0e 01 	sts	0x010E, r19	; 0x80010e <tail.2062+0x1>
 348:	20 93 0d 01 	sts	0x010D, r18	; 0x80010d <tail.2062>
uint16_t exLow = -1;
uint16_t exHigh = -1;

void setRGBW_pixel(uint16_t pixel, uint32_t color){

	if (pixel < exLow || pixel >= exHigh)
 34c:	2d 81       	ldd	r18, Y+5	; 0x05
 34e:	3e 81       	ldd	r19, Y+6	; 0x06
 350:	28 17       	cp	r18, r24
 352:	39 07       	cpc	r19, r25
 354:	98 f0       	brcs	.+38     	; 0x37c <effect_snake_nb+0xbe>
 356:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 35a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 35e:	28 17       	cp	r18, r24
 360:	39 07       	cpc	r19, r25
 362:	60 f4       	brcc	.+24     	; 0x37c <effect_snake_nb+0xbe>
 364:	f9 01       	movw	r30, r18
		led[pixel].r = (uint8_t)((color>>8*3)	& 0x000000FF);
		led[pixel].g = (uint8_t)((color>>8*2)	& 0x000000FF);
		led[pixel].b = (uint8_t)((color>>8*1)	& 0x000000FF);
		led[pixel].w = (uint8_t)( color			& 0x000000FF);
	}else{
		led[pixel].r = 0;
 366:	ee 0f       	add	r30, r30
 368:	ff 1f       	adc	r31, r31
 36a:	ee 0f       	add	r30, r30
 36c:	ff 1f       	adc	r31, r31
 36e:	e5 5e       	subi	r30, 0xE5	; 229
 370:	fe 4f       	sbci	r31, 0xFE	; 254
 372:	11 82       	std	Z+1, r1	; 0x01
		led[pixel].g = 0;
 374:	10 82       	st	Z, r1
		led[pixel].b = 0;
 376:	12 82       	std	Z+2, r1	; 0x02
		led[pixel].w = 0;
 378:	13 82       	std	Z+3, r1	; 0x03
 37a:	5d c0       	rjmp	.+186    	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>

void calcBrightness(uint32_t *color, uint8_t _brightness){
	uint32_t buf = 0;
	uint32_t colorb = 0;

	buf = (((*color>>8*3)	& 0x000000FF) * _brightness) / 255;
 37c:	c0 90 04 01 	lds	r12, 0x0104	; 0x800104 <brightness>
 380:	d1 2c       	mov	r13, r1
 382:	e1 2c       	mov	r14, r1
 384:	f1 2c       	mov	r15, r1

	buf = (((*color>>8*1)	& 0x000000FF) * _brightness) / 255;
	colorb |= (buf<<8*1);

	buf = (( *color			& 0x000000FF) * _brightness) / 255;
	colorb |= (buf);
 386:	89 81       	ldd	r24, Y+1	; 0x01
 388:	9a 81       	ldd	r25, Y+2	; 0x02
 38a:	ab 81       	ldd	r26, Y+3	; 0x03
 38c:	bc 81       	ldd	r27, Y+4	; 0x04
 38e:	2b 2f       	mov	r18, r27
 390:	33 27       	eor	r19, r19
 392:	44 27       	eor	r20, r20
 394:	55 27       	eor	r21, r21
 396:	c7 01       	movw	r24, r14
 398:	b6 01       	movw	r22, r12
 39a:	0e 94 66 03 	call	0x6cc	; 0x6cc <__mulsi3>
 39e:	41 2c       	mov	r4, r1
 3a0:	51 2c       	mov	r5, r1
 3a2:	32 01       	movw	r6, r4
 3a4:	4a 94       	dec	r4
 3a6:	a3 01       	movw	r20, r6
 3a8:	92 01       	movw	r18, r4
 3aa:	0e 94 76 03 	call	0x6ec	; 0x6ec <__udivmodsi4>
 3ae:	b2 2e       	mov	r11, r18
 3b0:	aa 24       	eor	r10, r10
 3b2:	99 24       	eor	r9, r9
 3b4:	88 24       	eor	r8, r8
 3b6:	99 81       	ldd	r25, Y+1	; 0x01
 3b8:	a9 2f       	mov	r26, r25
 3ba:	b0 e0       	ldi	r27, 0x00	; 0
 3bc:	a7 01       	movw	r20, r14
 3be:	96 01       	movw	r18, r12
 3c0:	0e 94 a7 03 	call	0x74e	; 0x74e <__muluhisi3>
 3c4:	a3 01       	movw	r20, r6
 3c6:	92 01       	movw	r18, r4
 3c8:	0e 94 76 03 	call	0x6ec	; 0x6ec <__udivmodsi4>
 3cc:	82 2a       	or	r8, r18
 3ce:	93 2a       	or	r9, r19
 3d0:	a4 2a       	or	r10, r20
 3d2:	b5 2a       	or	r11, r21
 3d4:	2b 81       	ldd	r18, Y+3	; 0x03
 3d6:	a2 2f       	mov	r26, r18
 3d8:	b0 e0       	ldi	r27, 0x00	; 0
 3da:	a7 01       	movw	r20, r14
 3dc:	96 01       	movw	r18, r12
 3de:	0e 94 a7 03 	call	0x74e	; 0x74e <__muluhisi3>
 3e2:	a3 01       	movw	r20, r6
 3e4:	92 01       	movw	r18, r4
 3e6:	0e 94 76 03 	call	0x6ec	; 0x6ec <__udivmodsi4>
 3ea:	d9 01       	movw	r26, r18
 3ec:	99 27       	eor	r25, r25
 3ee:	88 27       	eor	r24, r24
 3f0:	88 2a       	or	r8, r24
 3f2:	99 2a       	or	r9, r25
 3f4:	aa 2a       	or	r10, r26
 3f6:	bb 2a       	or	r11, r27
 3f8:	3a 81       	ldd	r19, Y+2	; 0x02
 3fa:	a3 2f       	mov	r26, r19
 3fc:	b0 e0       	ldi	r27, 0x00	; 0
 3fe:	a7 01       	movw	r20, r14
 400:	96 01       	movw	r18, r12
 402:	0e 94 a7 03 	call	0x74e	; 0x74e <__muluhisi3>
 406:	a3 01       	movw	r20, r6
 408:	92 01       	movw	r18, r4
 40a:	0e 94 76 03 	call	0x6ec	; 0x6ec <__udivmodsi4>
 40e:	b4 2f       	mov	r27, r20
 410:	a3 2f       	mov	r26, r19
 412:	92 2f       	mov	r25, r18
 414:	88 27       	eor	r24, r24
 416:	88 2a       	or	r8, r24
 418:	99 2a       	or	r9, r25
 41a:	aa 2a       	or	r10, r26
 41c:	bb 2a       	or	r11, r27
void setRGBW_pixel(uint16_t pixel, uint32_t color){

	if (pixel < exLow || pixel >= exHigh)
	{
		calcBrightness(&color, brightness);
		led[pixel].r = (uint8_t)((color>>8*3)	& 0x000000FF);
 41e:	ed 81       	ldd	r30, Y+5	; 0x05
 420:	fe 81       	ldd	r31, Y+6	; 0x06
 422:	ee 0f       	add	r30, r30
 424:	ff 1f       	adc	r31, r31
 426:	ee 0f       	add	r30, r30
 428:	ff 1f       	adc	r31, r31
 42a:	e5 5e       	subi	r30, 0xE5	; 229
 42c:	fe 4f       	sbci	r31, 0xFE	; 254
 42e:	b1 82       	std	Z+1, r11	; 0x01
		led[pixel].g = (uint8_t)((color>>8*2)	& 0x000000FF);
 430:	a0 82       	st	Z, r10
		led[pixel].b = (uint8_t)((color>>8*1)	& 0x000000FF);
 432:	92 82       	std	Z+2, r9	; 0x02
		led[pixel].w = (uint8_t)( color			& 0x000000FF);
 434:	83 82       	std	Z+3, r8	; 0x03
		tail = 0;
	}
	
	setRGBW_pixel(head, color);
	
	head++;
 436:	4d 81       	ldd	r20, Y+5	; 0x05
 438:	5e 81       	ldd	r21, Y+6	; 0x06
 43a:	4f 5f       	subi	r20, 0xFF	; 255
 43c:	5f 4f       	sbci	r21, 0xFF	; 255
 43e:	5a 83       	std	Y+2, r21	; 0x02
 440:	49 83       	std	Y+1, r20	; 0x01
	if(head >= LEDpixelcount){//loop for head
 442:	44 3b       	cpi	r20, 0xB4	; 180
 444:	51 05       	cpc	r21, r1
 446:	c4 f1       	brlt	.+112    	; 0x4b8 <__EEPROM_REGION_LENGTH__+0xb8>
		head = 0;
 448:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <head.2061+0x1>
 44c:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <head.2061>

	*color = colorb;//update the color with the new brightness value calculated
}

void RGBW_send(){
		ws2812_setleds_rgbw(led, LEDpixelcount);//send the frame with size of pixelcount to update the strip
 450:	64 eb       	ldi	r22, 0xB4	; 180
 452:	70 e0       	ldi	r23, 0x00	; 0
 454:	8b e1       	ldi	r24, 0x1B	; 27
 456:	91 e0       	ldi	r25, 0x01	; 1
		head = 0;
	}


	RGBW_send();
}
 458:	26 96       	adiw	r28, 0x06	; 6
 45a:	0f b6       	in	r0, 0x3f	; 63
 45c:	f8 94       	cli
 45e:	de bf       	out	0x3e, r29	; 62
 460:	0f be       	out	0x3f, r0	; 63
 462:	cd bf       	out	0x3d, r28	; 61
 464:	df 91       	pop	r29
 466:	cf 91       	pop	r28
 468:	ff 90       	pop	r15
 46a:	ef 90       	pop	r14
 46c:	df 90       	pop	r13
 46e:	cf 90       	pop	r12
 470:	bf 90       	pop	r11
 472:	af 90       	pop	r10
 474:	9f 90       	pop	r9
 476:	8f 90       	pop	r8
 478:	7f 90       	pop	r7
 47a:	6f 90       	pop	r6
 47c:	5f 90       	pop	r5
 47e:	4f 90       	pop	r4

	*color = colorb;//update the color with the new brightness value calculated
}

void RGBW_send(){
		ws2812_setleds_rgbw(led, LEDpixelcount);//send the frame with size of pixelcount to update the strip
 480:	0c 94 a2 02 	jmp	0x544	; 0x544 <ws2812_setleds_rgbw>
	if(tail >= 0){
	setRGBW_pixel(tail, 0);
	}
	tail++;
	if(tail >= LEDpixelcount){//loop for tail
		tail = 0;
 484:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <tail.2062+0x1>
 488:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <tail.2062>
 48c:	5f cf       	rjmp	.-322    	; 0x34c <effect_snake_nb+0x8e>
	if (state == 0)
	{
		tail = -length;
		prevlen = length;
		state++;
	}else if(prevlen != length && head == prevlen){//make the snake longer when the snake is as long as the previous length and at start position
 48e:	20 91 0b 01 	lds	r18, 0x010B	; 0x80010b <prevlen.2064>
 492:	30 91 0c 01 	lds	r19, 0x010C	; 0x80010c <prevlen.2064+0x1>
 496:	82 17       	cp	r24, r18
 498:	93 07       	cpc	r25, r19
 49a:	99 f0       	breq	.+38     	; 0x4c2 <__EEPROM_REGION_LENGTH__+0xc2>
 49c:	a0 91 09 01 	lds	r26, 0x0109	; 0x800109 <head.2061>
 4a0:	b0 91 0a 01 	lds	r27, 0x010A	; 0x80010a <head.2061+0x1>
 4a4:	be 83       	std	Y+6, r27	; 0x06
 4a6:	ad 83       	std	Y+5, r26	; 0x05
 4a8:	2a 17       	cp	r18, r26
 4aa:	3b 07       	cpc	r19, r27
 4ac:	a9 f0       	breq	.+42     	; 0x4d8 <__EEPROM_REGION_LENGTH__+0xd8>
 4ae:	20 91 0d 01 	lds	r18, 0x010D	; 0x80010d <tail.2062>
 4b2:	30 91 0e 01 	lds	r19, 0x010E	; 0x80010e <tail.2062+0x1>
 4b6:	2f cf       	rjmp	.-418    	; 0x316 <effect_snake_nb+0x58>
		tail = 0;
	}
	
	setRGBW_pixel(head, color);
	
	head++;
 4b8:	50 93 0a 01 	sts	0x010A, r21	; 0x80010a <head.2061+0x1>
 4bc:	40 93 09 01 	sts	0x0109, r20	; 0x800109 <head.2061>
 4c0:	c7 cf       	rjmp	.-114    	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
 4c2:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <head.2061>
 4c6:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <head.2061+0x1>
 4ca:	9e 83       	std	Y+6, r25	; 0x06
 4cc:	8d 83       	std	Y+5, r24	; 0x05
 4ce:	20 91 0d 01 	lds	r18, 0x010D	; 0x80010d <tail.2062>
 4d2:	30 91 0e 01 	lds	r19, 0x010E	; 0x80010e <tail.2062+0x1>
 4d6:	1f cf       	rjmp	.-450    	; 0x316 <effect_snake_nb+0x58>
 4d8:	9d 01       	movw	r18, r26
	{
		tail = -length;
		prevlen = length;
		state++;
	}else if(prevlen != length && head == prevlen){//make the snake longer when the snake is as long as the previous length and at start position
		tail = head - length;
 4da:	28 1b       	sub	r18, r24
 4dc:	39 0b       	sbc	r19, r25
		prevlen = length;
 4de:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <prevlen.2064+0x1>
 4e2:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <prevlen.2064>
 4e6:	17 cf       	rjmp	.-466    	; 0x316 <effect_snake_nb+0x58>

000004e8 <__vector_14>:
#include <avr/interrupt.h>

uint16_t time_ms = 0; //variable for keeping track of time

//interrupt
ISR(TIMER0_COMPA_vect){
 4e8:	1f 92       	push	r1
 4ea:	0f 92       	push	r0
 4ec:	0f b6       	in	r0, 0x3f	; 63
 4ee:	0f 92       	push	r0
 4f0:	11 24       	eor	r1, r1
 4f2:	2f 93       	push	r18
 4f4:	8f 93       	push	r24
 4f6:	9f 93       	push	r25
	if (time_ms > 60000){
 4f8:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <time_ms>
 4fc:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <time_ms+0x1>
 500:	81 36       	cpi	r24, 0x61	; 97
 502:	2a ee       	ldi	r18, 0xEA	; 234
 504:	92 07       	cpc	r25, r18
 506:	70 f0       	brcs	.+28     	; 0x524 <__vector_14+0x3c>
 508:	81 e0       	ldi	r24, 0x01	; 1
 50a:	90 e0       	ldi	r25, 0x00	; 0
		time_ms = 0;
	}
	
		time_ms++;	
 50c:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <time_ms+0x1>
 510:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <time_ms>
}
 514:	9f 91       	pop	r25
 516:	8f 91       	pop	r24
 518:	2f 91       	pop	r18
 51a:	0f 90       	pop	r0
 51c:	0f be       	out	0x3f, r0	; 63
 51e:	0f 90       	pop	r0
 520:	1f 90       	pop	r1
 522:	18 95       	reti
 524:	01 96       	adiw	r24, 0x01	; 1
 526:	f2 cf       	rjmp	.-28     	; 0x50c <__vector_14+0x24>

00000528 <init_timer0>:

void init_timer0(void){
	TCCR0B |= (1<<CS01)|(1<<CS00);//set prescaler to /64
 528:	85 b5       	in	r24, 0x25	; 37
 52a:	83 60       	ori	r24, 0x03	; 3
 52c:	85 bd       	out	0x25, r24	; 37
	OCR0A = 235;
 52e:	8b ee       	ldi	r24, 0xEB	; 235
 530:	87 bd       	out	0x27, r24	; 39
	TIMSK0 |= (1<<OCIE0A);//enable ocr0A match interrupt
 532:	ee e6       	ldi	r30, 0x6E	; 110
 534:	f0 e0       	ldi	r31, 0x00	; 0
 536:	80 81       	ld	r24, Z
 538:	82 60       	ori	r24, 0x02	; 2
 53a:	80 83       	st	Z, r24
	TCCR0A |= (1<<WGM01);//clear timer on ocr0A match
 53c:	84 b5       	in	r24, 0x24	; 36
 53e:	82 60       	ori	r24, 0x02	; 2
 540:	84 bd       	out	0x24, r24	; 36
 542:	08 95       	ret

00000544 <ws2812_setleds_rgbw>:
}

// Setleds for SK6812RGBW
void inline ws2812_setleds_rgbw(struct cRGBW *ledarray, uint16_t leds)
{
  ws2812_sendarray_mask((uint8_t*)ledarray,leds<<2,_BV(ws2812_pin));
 544:	66 0f       	add	r22, r22
 546:	77 1f       	adc	r23, r23
 548:	66 0f       	add	r22, r22
 54a:	77 1f       	adc	r23, r23
void inline ws2812_sendarray_mask(uint8_t *data,uint16_t datlen,uint8_t maskhi)
{
  uint8_t curbyte,ctr,masklo;
  uint8_t sreg_prev;
  
  ws2812_DDRREG |= maskhi; // Enable output
 54c:	3d 9a       	sbi	0x07, 5	; 7
  
  masklo	=~maskhi&ws2812_PORTREG;
 54e:	28 b1       	in	r18, 0x08	; 8
 550:	2f 7d       	andi	r18, 0xDF	; 223
  maskhi |=        ws2812_PORTREG;
 552:	38 b1       	in	r19, 0x08	; 8
 554:	30 62       	ori	r19, 0x20	; 32
  
  sreg_prev=SREG;
 556:	4f b7       	in	r20, 0x3f	; 63
#ifdef interrupt_is_disabled
  cli();  
 558:	f8 94       	cli
#endif  

  while (datlen--) {
 55a:	61 15       	cp	r22, r1
 55c:	71 05       	cpc	r23, r1
 55e:	b1 f0       	breq	.+44     	; 0x58c <loop222+0x22>
 560:	fc 01       	movw	r30, r24
 562:	68 0f       	add	r22, r24
 564:	79 1f       	adc	r23, r25
    curbyte=*data++;
 566:	81 91       	ld	r24, Z+
    
    asm volatile(
 568:	98 e0       	ldi	r25, 0x08	; 8

0000056a <loop222>:
 56a:	38 b9       	out	0x08, r19	; 8
 56c:	00 00       	nop
 56e:	07 f4       	brid	.+0      	; 0x570 <loop222+0x6>
 570:	87 ff       	sbrs	r24, 7
 572:	28 b9       	out	0x08, r18	; 8
 574:	88 0f       	add	r24, r24
 576:	00 00       	nop
 578:	07 f4       	brid	.+0      	; 0x57a <loop222+0x10>
 57a:	07 f4       	brid	.+0      	; 0x57c <loop222+0x12>
 57c:	07 f4       	brid	.+0      	; 0x57e <loop222+0x14>
 57e:	28 b9       	out	0x08, r18	; 8
 580:	07 f4       	brid	.+0      	; 0x582 <loop222+0x18>
 582:	9a 95       	dec	r25
 584:	91 f7       	brne	.-28     	; 0x56a <loop222>
  sreg_prev=SREG;
#ifdef interrupt_is_disabled
  cli();  
#endif  

  while (datlen--) {
 586:	e6 17       	cp	r30, r22
 588:	f7 07       	cpc	r31, r23
 58a:	69 f7       	brne	.-38     	; 0x566 <ws2812_setleds_rgbw+0x22>
    :	"=&d" (ctr)
    :	"r" (curbyte), "I" (_SFR_IO_ADDR(ws2812_PORTREG)), "r" (maskhi), "r" (masklo)
    );
  }
  
  SREG=sreg_prev;
 58c:	4f bf       	out	0x3f, r20	; 63
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 58e:	8f e3       	ldi	r24, 0x3F	; 63
 590:	91 e0       	ldi	r25, 0x01	; 1
 592:	01 97       	sbiw	r24, 0x01	; 1
 594:	f1 f7       	brne	.-4      	; 0x592 <loop222+0x28>
 596:	00 c0       	rjmp	.+0      	; 0x598 <loop222+0x2e>
 598:	00 00       	nop
 59a:	08 95       	ret

0000059c <main>:
event_e update();
state_e state_act(state_e state, event_e eventn);

int main(void)
{	
	systemstate_f.currentstate = S_INIT;
 59c:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <systemstate_f+0x6>
	systemstate_f.nextstate = S_ledOFF;
 5a0:	81 e0       	ldi	r24, 0x01	; 1
 5a2:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <systemstate_f+0x7>
	
	init_timer0();
 5a6:	0e 94 94 02 	call	0x528	; 0x528 <init_timer0>
	setRGBW_ExBounds(0, 36);
 5aa:	64 e2       	ldi	r22, 0x24	; 36
 5ac:	70 e0       	ldi	r23, 0x00	; 0
 5ae:	80 e0       	ldi	r24, 0x00	; 0
 5b0:	90 e0       	ldi	r25, 0x00	; 0
 5b2:	0e 94 80 00 	call	0x100	; 0x100 <setRGBW_ExBounds>
	//setRGBW_ExBounds(12,30);
	setRGBW_Brightness(255);
 5b6:	8f ef       	ldi	r24, 0xFF	; 255
 5b8:	0e 94 44 01 	call	0x288	; 0x288 <setRGBW_Brightness>
	setRGBW_clear();
 5bc:	0e 94 36 01 	call	0x26c	; 0x26c <setRGBW_clear>
	RGBW_send();
 5c0:	0e 94 47 01 	call	0x28e	; 0x28e <RGBW_send>
	buttons_init();
 5c4:	0e 94 53 00 	call	0xa6	; 0xa6 <buttons_init>
	//RGBW_send();
	uint16_t hue = 0;
	static	uint8_t	 i	 = 0;
	static  uint8_t  f   = 0;

	sei();//enable interrupts
 5c8:	78 94       	sei
/************************************************************************/
/* control part that needs to be integrated in real system later		*/
/************************************************************************/
event_e update(){
	if(buttonflag.button0){
		systemstate_f.strip_on ^= 1;
 5ca:	c1 e0       	ldi	r28, 0x01	; 1
				
			case EF_snake_nb:
				effect_snake_nb(10, systemstate_f.current_color32);
				break;
		}
		nxtstate = S_EFFECT_ON;
 5cc:	d4 e0       	ldi	r29, 0x04	; 4
		buttonflag.button0 = 0;
	}
	if(buttonflag.button1){
		systemstate_f.strip_on = 1;
		systemstate_f.currentstate = S_EFFECT_ON;
		systemstate_f.current_ef = EF_snake_nb;
 5ce:	13 e0       	ldi	r17, 0x03	; 3
	while(1)
	{
/************************************************************************/
/* control part that needs to be integrated in real system later		*/
/************************************************************************/
		systemstate_f.current_color32 = color32(255,255,255,0);
 5d0:	20 e0       	ldi	r18, 0x00	; 0
 5d2:	4f ef       	ldi	r20, 0xFF	; 255
 5d4:	6f ef       	ldi	r22, 0xFF	; 255
 5d6:	8f ef       	ldi	r24, 0xFF	; 255
 5d8:	0e 94 4d 01 	call	0x29a	; 0x29a <color32>
 5dc:	60 93 14 01 	sts	0x0114, r22	; 0x800114 <systemstate_f+0x2>
 5e0:	70 93 15 01 	sts	0x0115, r23	; 0x800115 <systemstate_f+0x3>
 5e4:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <systemstate_f+0x4>
 5e8:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <systemstate_f+0x5>
		
		//state
		systemstate_f.currentstate = systemstate_f.nextstate; //update currrentstate 
 5ec:	20 91 19 01 	lds	r18, 0x0119	; 0x800119 <systemstate_f+0x7>
 5f0:	20 93 18 01 	sts	0x0118, r18	; 0x800118 <systemstate_f+0x6>

/************************************************************************/
/* control part that needs to be integrated in real system later		*/
/************************************************************************/
event_e update(){
	if(buttonflag.button0){
 5f4:	30 91 06 01 	lds	r19, 0x0106	; 0x800106 <__data_end>
 5f8:	33 23       	and	r19, r19
 5fa:	39 f0       	breq	.+14     	; 0x60a <main+0x6e>
		systemstate_f.strip_on ^= 1;
 5fc:	30 91 12 01 	lds	r19, 0x0112	; 0x800112 <systemstate_f>
 600:	3c 27       	eor	r19, r28
 602:	30 93 12 01 	sts	0x0112, r19	; 0x800112 <systemstate_f>
		buttonflag.button0 = 0;
 606:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <__data_end>
	}
	if(buttonflag.button1){
 60a:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <__data_end+0x1>
 60e:	33 23       	and	r19, r19
 610:	09 f1       	breq	.+66     	; 0x654 <main+0xb8>
		systemstate_f.strip_on = 1;
 612:	c0 93 12 01 	sts	0x0112, r28	; 0x800112 <systemstate_f>
		systemstate_f.currentstate = S_EFFECT_ON;
 616:	d0 93 18 01 	sts	0x0118, r29	; 0x800118 <systemstate_f+0x6>
		systemstate_f.current_ef = EF_snake_nb;
 61a:	10 93 13 01 	sts	0x0113, r17	; 0x800113 <systemstate_f+0x1>
		
		buttonflag.button1 = 0;
 61e:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <__data_end+0x1>
	}
	if(buttonflag.button2){
 622:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <__data_end+0x2>
 626:	22 23       	and	r18, r18
 628:	f1 f1       	breq	.+124    	; 0x6a6 <main+0x10a>
		systemstate_f.strip_on = 1;
 62a:	c0 93 12 01 	sts	0x0112, r28	; 0x800112 <systemstate_f>
		systemstate_f.currentstate = S_EFFECT_ON;
 62e:	d0 93 18 01 	sts	0x0118, r29	; 0x800118 <systemstate_f+0x6>
		systemstate_f.current_ef = EF_NO;
 632:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <systemstate_f+0x1>
		buttonflag.button2 = 0;
 636:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__data_end+0x2>
	case S_EFFECT_ON:
	//effect code
		switch (systemstate_f.current_ef){
			
			case EF_NO:
				setRGBW_all(systemstate_f.current_color32);
 63a:	0e 94 89 00 	call	0x112	; 0x112 <setRGBW_all>
				RGBW_send();
 63e:	0e 94 47 01 	call	0x28e	; 0x28e <RGBW_send>
				
			case EF_snake_nb:
				effect_snake_nb(10, systemstate_f.current_color32);
				break;
		}
		nxtstate = S_EFFECT_ON;
 642:	84 e0       	ldi	r24, 0x04	; 4
	//error
		nxtstate = S_ledERR;
		break;
	}
	
	if (!systemstate_f.strip_on) nxtstate = S_ledOFF;
 644:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <systemstate_f>
 648:	91 11       	cpse	r25, r1
 64a:	01 c0       	rjmp	.+2      	; 0x64e <main+0xb2>
 64c:	81 e0       	ldi	r24, 0x01	; 1
		systemstate_f.current_color32 = color32(255,255,255,0);
		
		//state
		systemstate_f.currentstate = systemstate_f.nextstate; //update currrentstate 
		update();
		systemstate_f.nextstate = state_act(systemstate_f.currentstate, systemstate_f.currentevent);//do actions
 64e:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <systemstate_f+0x7>
// 		}
		
//		recursiveFlowHue(10, 51);
		//effect_pulse(0, 255, color32(0, 255, 255, 50))
//		effect_pulse_nb(0, 255, color32(255, 255, 255, 255));
	}	
 652:	be cf       	rjmp	.-132    	; 0x5d0 <main+0x34>
		systemstate_f.currentstate = S_EFFECT_ON;
		systemstate_f.current_ef = EF_snake_nb;
		
		buttonflag.button1 = 0;
	}
	if(buttonflag.button2){
 654:	30 91 08 01 	lds	r19, 0x0108	; 0x800108 <__data_end+0x2>
 658:	31 11       	cpse	r19, r1
 65a:	e7 cf       	rjmp	.-50     	; 0x62a <main+0x8e>
}

state_e state_act(state_e state, event_e eventn){
	state_e nxtstate = 0;
	
	switch(state){
 65c:	23 30       	cpi	r18, 0x03	; 3
 65e:	59 f1       	breq	.+86     	; 0x6b6 <main+0x11a>
 660:	90 f4       	brcc	.+36     	; 0x686 <main+0xea>
 662:	21 30       	cpi	r18, 0x01	; 1
 664:	21 f0       	breq	.+8      	; 0x66e <main+0xd2>
 666:	22 30       	cpi	r18, 0x02	; 2
 668:	61 f4       	brne	.+24     	; 0x682 <main+0xe6>
		//deprecated		
	break;
		
	case S_EQ_ON:
	//eq code
		nxtstate = S_EQ_ON;
 66a:	82 e0       	ldi	r24, 0x02	; 2
 66c:	eb cf       	rjmp	.-42     	; 0x644 <main+0xa8>
state_e state_act(state_e state, event_e eventn){
	state_e nxtstate = 0;
	
	switch(state){
	case S_ledOFF:
		setRGBW_clear();
 66e:	0e 94 36 01 	call	0x26c	; 0x26c <setRGBW_clear>
		RGBW_send();
 672:	0e 94 47 01 	call	0x28e	; 0x28e <RGBW_send>
		if (systemstate_f.strip_on) nxtstate = S_EFFECT_ON;
 676:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <systemstate_f>
 67a:	88 23       	and	r24, r24
 67c:	39 f3       	breq	.-50     	; 0x64c <main+0xb0>
 67e:	84 e0       	ldi	r24, 0x04	; 4
 680:	e6 cf       	rjmp	.-52     	; 0x64e <main+0xb2>
		nxtstate = S_ledERR;
		break;
	
	default:
	//error
		nxtstate = S_ledERR;
 682:	85 e0       	ldi	r24, 0x05	; 5
 684:	df cf       	rjmp	.-66     	; 0x644 <main+0xa8>
}

state_e state_act(state_e state, event_e eventn){
	state_e nxtstate = 0;
	
	switch(state){
 686:	24 30       	cpi	r18, 0x04	; 4
 688:	c1 f0       	breq	.+48     	; 0x6ba <main+0x11e>
 68a:	25 30       	cpi	r18, 0x05	; 5
 68c:	d1 f7       	brne	.-12     	; 0x682 <main+0xe6>
		nxtstate = S_EFFECT_ON;
		break;
	
	case S_ledERR:
	//effect code
		setRGBW_all(color32(10,0,0,0));
 68e:	20 e0       	ldi	r18, 0x00	; 0
 690:	40 e0       	ldi	r20, 0x00	; 0
 692:	60 e0       	ldi	r22, 0x00	; 0
 694:	8a e0       	ldi	r24, 0x0A	; 10
 696:	0e 94 4d 01 	call	0x29a	; 0x29a <color32>
 69a:	0e 94 89 00 	call	0x112	; 0x112 <setRGBW_all>
		RGBW_send();
 69e:	0e 94 47 01 	call	0x28e	; 0x28e <RGBW_send>
		nxtstate = S_ledERR;
 6a2:	85 e0       	ldi	r24, 0x05	; 5
 6a4:	cf cf       	rjmp	.-98     	; 0x644 <main+0xa8>
				setRGBW_all(systemstate_f.current_color32);
				RGBW_send();
				break;
				
			case EF_snake_nb:
				effect_snake_nb(10, systemstate_f.current_color32);
 6a6:	ab 01       	movw	r20, r22
 6a8:	bc 01       	movw	r22, r24
 6aa:	8a e0       	ldi	r24, 0x0A	; 10
 6ac:	90 e0       	ldi	r25, 0x00	; 0
 6ae:	0e 94 5f 01 	call	0x2be	; 0x2be <effect_snake_nb>
				break;
		}
		nxtstate = S_EFFECT_ON;
 6b2:	84 e0       	ldi	r24, 0x04	; 4
 6b4:	c7 cf       	rjmp	.-114    	; 0x644 <main+0xa8>
	}
	
}

state_e state_act(state_e state, event_e eventn){
	state_e nxtstate = 0;
 6b6:	80 e0       	ldi	r24, 0x00	; 0
 6b8:	c5 cf       	rjmp	.-118    	; 0x644 <main+0xa8>
		nxtstate = S_EQ_ON;
		break;
		
	case S_EFFECT_ON:
	//effect code
		switch (systemstate_f.current_ef){
 6ba:	20 91 13 01 	lds	r18, 0x0113	; 0x800113 <systemstate_f+0x1>
 6be:	22 23       	and	r18, r18
 6c0:	09 f4       	brne	.+2      	; 0x6c4 <main+0x128>
 6c2:	bb cf       	rjmp	.-138    	; 0x63a <main+0x9e>
 6c4:	23 30       	cpi	r18, 0x03	; 3
 6c6:	79 f3       	breq	.-34     	; 0x6a6 <main+0x10a>
				
			case EF_snake_nb:
				effect_snake_nb(10, systemstate_f.current_color32);
				break;
		}
		nxtstate = S_EFFECT_ON;
 6c8:	84 e0       	ldi	r24, 0x04	; 4
 6ca:	bc cf       	rjmp	.-136    	; 0x644 <main+0xa8>

000006cc <__mulsi3>:
 6cc:	db 01       	movw	r26, r22
 6ce:	8f 93       	push	r24
 6d0:	9f 93       	push	r25
 6d2:	0e 94 a7 03 	call	0x74e	; 0x74e <__muluhisi3>
 6d6:	bf 91       	pop	r27
 6d8:	af 91       	pop	r26
 6da:	a2 9f       	mul	r26, r18
 6dc:	80 0d       	add	r24, r0
 6de:	91 1d       	adc	r25, r1
 6e0:	a3 9f       	mul	r26, r19
 6e2:	90 0d       	add	r25, r0
 6e4:	b2 9f       	mul	r27, r18
 6e6:	90 0d       	add	r25, r0
 6e8:	11 24       	eor	r1, r1
 6ea:	08 95       	ret

000006ec <__udivmodsi4>:
 6ec:	a1 e2       	ldi	r26, 0x21	; 33
 6ee:	1a 2e       	mov	r1, r26
 6f0:	aa 1b       	sub	r26, r26
 6f2:	bb 1b       	sub	r27, r27
 6f4:	fd 01       	movw	r30, r26
 6f6:	0d c0       	rjmp	.+26     	; 0x712 <__udivmodsi4_ep>

000006f8 <__udivmodsi4_loop>:
 6f8:	aa 1f       	adc	r26, r26
 6fa:	bb 1f       	adc	r27, r27
 6fc:	ee 1f       	adc	r30, r30
 6fe:	ff 1f       	adc	r31, r31
 700:	a2 17       	cp	r26, r18
 702:	b3 07       	cpc	r27, r19
 704:	e4 07       	cpc	r30, r20
 706:	f5 07       	cpc	r31, r21
 708:	20 f0       	brcs	.+8      	; 0x712 <__udivmodsi4_ep>
 70a:	a2 1b       	sub	r26, r18
 70c:	b3 0b       	sbc	r27, r19
 70e:	e4 0b       	sbc	r30, r20
 710:	f5 0b       	sbc	r31, r21

00000712 <__udivmodsi4_ep>:
 712:	66 1f       	adc	r22, r22
 714:	77 1f       	adc	r23, r23
 716:	88 1f       	adc	r24, r24
 718:	99 1f       	adc	r25, r25
 71a:	1a 94       	dec	r1
 71c:	69 f7       	brne	.-38     	; 0x6f8 <__udivmodsi4_loop>
 71e:	60 95       	com	r22
 720:	70 95       	com	r23
 722:	80 95       	com	r24
 724:	90 95       	com	r25
 726:	9b 01       	movw	r18, r22
 728:	ac 01       	movw	r20, r24
 72a:	bd 01       	movw	r22, r26
 72c:	cf 01       	movw	r24, r30
 72e:	08 95       	ret

00000730 <__umulhisi3>:
 730:	a2 9f       	mul	r26, r18
 732:	b0 01       	movw	r22, r0
 734:	b3 9f       	mul	r27, r19
 736:	c0 01       	movw	r24, r0
 738:	a3 9f       	mul	r26, r19
 73a:	70 0d       	add	r23, r0
 73c:	81 1d       	adc	r24, r1
 73e:	11 24       	eor	r1, r1
 740:	91 1d       	adc	r25, r1
 742:	b2 9f       	mul	r27, r18
 744:	70 0d       	add	r23, r0
 746:	81 1d       	adc	r24, r1
 748:	11 24       	eor	r1, r1
 74a:	91 1d       	adc	r25, r1
 74c:	08 95       	ret

0000074e <__muluhisi3>:
 74e:	0e 94 98 03 	call	0x730	; 0x730 <__umulhisi3>
 752:	a5 9f       	mul	r26, r21
 754:	90 0d       	add	r25, r0
 756:	b4 9f       	mul	r27, r20
 758:	90 0d       	add	r25, r0
 75a:	a4 9f       	mul	r26, r20
 75c:	80 0d       	add	r24, r0
 75e:	91 1d       	adc	r25, r1
 760:	11 24       	eor	r1, r1
 762:	08 95       	ret

00000764 <_exit>:
 764:	f8 94       	cli

00000766 <__stop_program>:
 766:	ff cf       	rjmp	.-2      	; 0x766 <__stop_program>
